<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>20210902神策后端笔试</title>
      <link href="2021/09/02/20210902%E7%A5%9E%E7%AD%96%E6%95%B0%E6%8D%AE%E7%AC%94%E8%AF%95/"/>
      <url>2021/09/02/20210902%E7%A5%9E%E7%AD%96%E6%95%B0%E6%8D%AE%E7%AC%94%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<p>[TOC]</p><h1 id="20210902神策后端笔试"><a href="#20210902神策后端笔试" class="headerlink" title="20210902神策后端笔试"></a>20210902神策后端笔试</h1><p>神策数据后端，8/31发的笔试链接，3日内做完就行。牛客网笔试。</p><hr><p>10道单选，5道多选，3道编程题。<br>哇神策编程题就那几个吗。。。好多人都是重题。实不相瞒我看了两个笔经，碰到了。</p><p>感谢大佬的分享：</p><ul><li><a href="https://blog.csdn.net/DJames23/article/details/119580419">【0810神策数据笔试】java3道编程</a></li><li><a href="https://ac.nowcoder.com/discuss/719746">神策数据后端开发8.25笔试</a></li></ul><hr><h2 id="编程题"><a href="#编程题" class="headerlink" title="编程题"></a>编程题</h2><p>题目简述：</p><p><span class="github-emoji"><span>😭</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f62d.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span></p><ol><li>括号匹配：字符串(1)23(4()5)6，输出里面每对括号对应下标（必然匹配）。</li><li>很赞的整数对：三个数x,y,m。(x,y)里面有一个数大于m，就是很赞的整数对。</li><li>字符串去除重复空格，每个单词进行反转</li></ol><h3 id="第一题：字符串、有效括号数"><a href="#第一题：字符串、有效括号数" class="headerlink" title="第一题：字符串、有效括号数"></a>第一题：字符串、有效括号数</h3><p>给定一个字符串，打印里面匹配的括号的个数和下标，比如：<br>(1)23(4()5)6，一共有三对括号，下标0和2是一对，5和10是一对，7和8是一对。输入数据的括号均能成对出现，以下输入是不存在的：((1)<br>输入描述：一个包含数字和括号的字符串，一行<br>输出描述：多行输出，第一行是成对括号的个数，后面每行是一个括号的下标。</p><blockquote><p>输入：(1)<br>输出：<br>1<br>0<br>2<br>说明：共有1对成对的括号，其下标为0和2</p></blockquote><p><strong>栈的应用，不过有点坑的是<u>输出需要从小到大</u>：</strong></p><p><strong>比如还是上面题目里的例子，  必须要这样输出<code>0  2  5  10   7  8 </code>才可以，也就是第一个括号下标要 <code>0,5,7</code> 这样从小到大有序输出。</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2021/9/2,下午 4:15</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SongX64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()){</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line"></span><br><span class="line">            Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">            TreeMap&lt;Integer,Integer&gt; treeMap = <span class="keyword">new</span> TreeMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) {</span><br><span class="line">                <span class="keyword">if</span>(chars[i] == <span class="string">'('</span>){</span><br><span class="line">                    stack.push(i);</span><br><span class="line">                }<span class="keyword">else</span> <span class="keyword">if</span> (chars[i] == <span class="string">')'</span>){</span><br><span class="line">                    treeMap.put(stack.pop(),i);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            System.out.println(treeMap.keySet().size());</span><br><span class="line">            <span class="keyword">for</span> (Integer key : treeMap.keySet()){</span><br><span class="line">                System.out.println(key);</span><br><span class="line">                System.out.println(treeMap.get(key));</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="第二题：很赞的整数对"><a href="#第二题：很赞的整数对" class="headerlink" title="第二题：很赞的整数对"></a>第二题：很赞的整数对</h3><p>题目：给一个整数对(x,y)，并且允许把其中一个数修改成之前两个数的和，x+y。比如(5,2)，两数之和为7，经过一次修改可以变成(7,2)或(5,7)。再给一个整数m，问至少要做多少次上述修改操作，才能使两个数组成的数对是对m很赞的整数对。两个数中至少有一个数大于等于m，这个数对就是很赞的整数对。</p><p>输入描述：一行包含3个整数，分别是x,y,m。其中x，y是最初的两个整数，取值范围是int32；m是一个整数，取值范围是int32；<br>输出描述：至少要做多少次上述修改操作，才能使得数对为m的很赞整数对。</p><blockquote><p>输入： 1 2 5<br>输出： 2<br>说明：经过2次操作，一种可行的但不一定是最优的操作方法是：(1,2)–&gt;(3,2)–&gt;(5,2)</p><p>输入：-1 4 15<br>输出： 4<br>说明：最少经过4次操作，一种可行的但不一定是最优的操作方法是：(-1,4)–&gt;(3,4)–&gt;(7,4)–&gt;(11,4)–&gt;(15,4) </p><p>输入： 0 -1 5<br>输出： -1<br>说明：经过多少次操作都无法满足要求，输出-1</p></blockquote><p><strong>最终AC95点几。。。实在想不出来了。</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2021/9/2,下午 4:25</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SongX64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="comment">// 越界问题，所以说用Long来避免</span></span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLong()) {</span><br><span class="line">            <span class="keyword">long</span> x = scanner.nextLong();</span><br><span class="line">            <span class="keyword">long</span> y = scanner.nextLong();</span><br><span class="line">            <span class="keyword">long</span> m = scanner.nextLong();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">long</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="comment">// 循环控制标志</span></span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 已经满足条件</span></span><br><span class="line">            <span class="keyword">if</span> (m &lt;= x || m &lt;= y) {</span><br><span class="line">                count = <span class="number">0</span>;</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            } <span class="keyword">else</span> {</span><br><span class="line">                <span class="comment">// 不满足条件，进行操作</span></span><br><span class="line">                <span class="comment">// m为正，xy有0</span></span><br><span class="line">                <span class="keyword">if</span> (x == <span class="number">0</span> || y == <span class="number">0</span>) {</span><br><span class="line">                    count = -<span class="number">1</span>;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 相加永久等于0</span></span><br><span class="line">                <span class="keyword">if</span> (m != <span class="number">0</span> &amp;&amp; x + y == <span class="number">0</span>) {</span><br><span class="line">                    count = -<span class="number">1</span>;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 不满足条件，且x和y都小于0，xy只会越加越小</span></span><br><span class="line">                <span class="keyword">if</span> ( x &lt; <span class="number">0</span> &amp;&amp; y &lt; <span class="number">0</span>) {</span><br><span class="line">                    <span class="comment">// m为正，xy都为负数</span></span><br><span class="line">                    count = -<span class="number">1</span>;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                }</span><br><span class="line"></span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 判断通过，进行操作</span></span><br><span class="line">            <span class="comment">// 若有一个大于等于m，就可以了</span></span><br><span class="line">            <span class="keyword">while</span> (flag &amp;&amp; x &lt; m &amp;&amp; y &lt; m) {</span><br><span class="line">                <span class="comment">// 选择一个较小的进行替换</span></span><br><span class="line">                <span class="keyword">if</span> (x &lt;= y) {</span><br><span class="line">                    x += y;</span><br><span class="line">                } <span class="keyword">else</span> {</span><br><span class="line">                    y += x;</span><br><span class="line">                }</span><br><span class="line">                count++;</span><br><span class="line">            }</span><br><span class="line">            System.out.println(count);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h3 id="第三题：字符串反转"><a href="#第三题：字符串反转" class="headerlink" title="第三题：字符串反转"></a>第三题：字符串反转</h3><p>给定字符串s,要求把s中多于一个的连续空压缩成一个空格，并将连续的非空格字符串倒序打印出来，例如，给定”abc def efg”，打印”cba fed gfe”。</p><blockquote><p>输入：abc def efg<br>输出： cba fed gfe</p></blockquote><p>直接字符数组处理的，AC100。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2021/9/2,下午 4:38</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SongX64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Scanner scanner = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (scanner.hasNextLine()) {</span><br><span class="line">            String s = scanner.nextLine();</span><br><span class="line">            s.trim();</span><br><span class="line">            <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">            StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 快慢指针</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; ) {</span><br><span class="line">                <span class="comment">// 快指针找到空格</span></span><br><span class="line">                <span class="keyword">int</span> j = i;</span><br><span class="line">                <span class="keyword">while</span> (j &lt; chars.length &amp;&amp; chars[j] != <span class="string">' '</span>) {</span><br><span class="line">                    j++;</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 记录单词末尾空格位置，然后逆序单词</span></span><br><span class="line">                <span class="keyword">int</span> temp = j;</span><br><span class="line">                <span class="keyword">while</span> (j!=i){</span><br><span class="line">                    j--;</span><br><span class="line">                    stringBuilder.append(chars[j]);</span><br><span class="line">                }</span><br><span class="line">                <span class="comment">// 添加一个空格，之后慢指针跳过多个空格</span></span><br><span class="line">                stringBuilder.append(<span class="string">' '</span>);</span><br><span class="line">                i = temp;</span><br><span class="line">                <span class="keyword">while</span> (i &lt; chars.length &amp;&amp; chars[i] == <span class="string">' '</span>){</span><br><span class="line">                    i++;</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            System.out.println(stringBuilder);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring原理及应用——Offer来了框架篇第一章</title>
      <link href="2021/08/06/Offer%E6%9D%A5%E4%BA%86%E6%A1%86%E6%9E%B6%E7%AF%871Spring%E5%8E%9F%E7%90%86/"/>
      <url>2021/08/06/Offer%E6%9D%A5%E4%BA%86%E6%A1%86%E6%9E%B6%E7%AF%871Spring%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring原理及应用"><a href="#Spring原理及应用" class="headerlink" title="Spring原理及应用"></a>Spring原理及应用</h1><p>[TOC]</p><h2 id="1-1-Spring特性"><a href="#1-1-Spring特性" class="headerlink" title="1.1 Spring特性"></a>1.1 Spring特性</h2><p>问：Spring有哪些特点？</p><p><strong>轻量级、控制反转、面向切面、面向容器、灵活。</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">Spring特性---轻量级</span><br><span class="line">Spring特性---控制反转</span><br><span class="line">Spring特性---面向容器</span><br><span class="line">Spring特性---面向切面</span><br><span class="line">Spring特性---灵活</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol><li>轻量级<ul><li>核心Jar包小</li><li>模块化，按需引入</li></ul></li><li>控制反转<ul><li>一个对象所<strong>依赖的其他对象</strong>会自动传递给它</li><li>实现对象依赖的解耦</li></ul></li><li>面向切面<ul><li>提高系统内聚性</li><li>抽取公共的业务，只需关注核心业务</li></ul></li><li>面现容器<ul><li>实现了对象配置化生成</li><li>实现了对象生命周期管理</li></ul></li><li>框架灵活<ul><li>对象可以声明式创建</li></ul></li></ol><blockquote><p>补充：JavaBean</p><p>JavaBean是一种Java类，通过<strong>封装属性和方法</strong>成为具有某种功能，或者是处理某个业务的对象。必须有一个<strong>缺省的构造函数</strong>，每个属性都有<strong>get\set方法</strong>，<strong>可序列化</strong>。</p></blockquote><h2 id="1-2-Spring模块"><a href="#1-2-Spring模块" class="headerlink" title="1.2 Spring模块"></a>1.2 Spring模块</h2><p>Spring是模块化的，可以按需引入。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/2021022317001862.png" alt="Spring模块"></p><p>常用模块有：核心容器层Core Container，数据访问层Data Access，Web应用层Web Access。</p><h3 id="1-2-1-核心容器层"><a href="#1-2-1-核心容器层" class="headerlink" title="1.2.1 核心容器层"></a>1.2.1 核心容器层</h3><p>主要有 Srping-Beans、Spring-Core、Spring-Context、SpEL等模块组成。</p><h4 id="Spring-Beans"><a href="#Spring-Beans" class="headerlink" title="Spring-Beans *"></a>Spring-Beans *</h4><p>基于 <strong>工厂模式</strong> 实现 <strong>对象的创建</strong> 。XML或者注解实现声明式的对象管理。</p><h4 id="Spring-Core"><a href="#Spring-Core" class="headerlink" title="Spring-Core *"></a>Spring-Core *</h4><p>Spring<strong>核心功能</strong>实现，包括<strong>控制反转IOC</strong>和<strong>依赖注入DI</strong>。</p><p>控制反转模式/思想是通过依赖注入方法来实现的。在某个实例中引用另一个Bean实例的时候，Spring会自动将此实例传入。</p><h4 id="Spring-Context"><a href="#Spring-Context" class="headerlink" title="Spring-Context"></a>Spring-Context</h4><p>继承自Spring-Beans，实现国际化、上下文、事件传播、第三方库集成等等功能。</p><h4 id="SpEL"><a href="#SpEL" class="headerlink" title="SpEL"></a>SpEL</h4><p>Spring 表达式语言，Spring  Expression Language。</p><p>用于在运行过程中查询和操作对象实例。</p><h3 id="1-2-2-数据访问层"><a href="#1-2-2-数据访问层" class="headerlink" title="1.2.2 数据访问层"></a>1.2.2 数据访问层</h3><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210223171500114.png" alt="术语"></p><h4 id="1-JDBC"><a href="#1-JDBC" class="headerlink" title="1. JDBC *"></a>1. JDBC *</h4><p>Spring持久化层基于JDBC抽象层实现了在不同数据库之间灵活切换，而不用担心不同数据库之间SQL语法的不兼容。</p><h4 id="2-ORM"><a href="#2-ORM" class="headerlink" title="2.ORM *"></a>2.ORM *</h4><p>对象\关系映射。</p><p><strong>对象属性与关系型数据库中的字段进行映射。</strong></p><p>ORM模块提供了对象关系映射API的集成，包括JPA（Java Persistence API）、JDO（Java DataObject）和Hibernate等。基于该模块，ORM框架能很容易地和Spring的其他功能（例如事务管理）整合。</p><h4 id="3-OXM"><a href="#3-OXM" class="headerlink" title="3.OXM"></a>3.OXM</h4><p>OXM模块提供了对OXM实现的支持，比如JAXB、Castor、XML Beans、JiBX、XStream等。</p><h4 id="4-JMS"><a href="#4-JMS" class="headerlink" title="4.JMS *"></a>4.JMS *</h4><p>JMS模块包含消息的生产（Produce）和消费（Consume）功能。从Spring 4.1开始，Spring集成了Spring-Messaging模块，用于实现对<strong>消息队列的支持</strong>。</p><h4 id="5-事务处理"><a href="#5-事务处理" class="headerlink" title="5. **事务处理 ***"></a>5. **事务处理 ***</h4><p>Spring声明式事务只需要<strong>通过注解或配置</strong>即可实现事务的管理，具体的事务管理工作由<strong>Spring自动处理</strong>，应用程序不需要关心事务的提交（Commit）和回滚（Rollback）。</p><h3 id="1-2-3-Web应用层"><a href="#1-2-3-Web应用层" class="headerlink" title="1.2.3 Web应用层"></a>1.2.3 Web应用层</h3><p><strong>Web交互和数据传输功能。</strong></p><p>主要包含Web、Web-MVC、Web-Socket、Web-Portlet。</p><h4 id="Web"><a href="#Web" class="headerlink" title="Web *"></a>Web *</h4><p>Web应用基本功能，HTTP客户端及Spring远程调用中与Web相关的部分。</p><p><strong>Web模块基于Servlet监听器初始化IoC容器。</strong></p><h4 id="Web-MVC"><a href="#Web-MVC" class="headerlink" title="Web-MVC *"></a>Web-MVC *</h4><p>Web-MVC模块为Web应用提供了<strong>MVC和REST API服务的实现</strong>。</p><p>Spring的MVC框架使数据模型和视图分离，数据模型负责数据的业务逻辑，视图负责数据的展示。</p><p>同时，Web-MVC可与Spring框架的其他模块方便地集成。</p><h4 id="Web-Socket"><a href="#Web-Socket" class="headerlink" title="Web-Socket"></a>Web-Socket</h4><p>Web-Socket模块提供了对<strong>WebSocket-Base的支持，</strong>用于实现在Web应用程序中<strong>服务端和客户端实时双向通信</strong>，尤其在实时消息推送中应用广泛。</p><h4 id="Web-Portlet-没用过"><a href="#Web-Portlet-没用过" class="headerlink" title="Web-Portlet(没用过)"></a>Web-Portlet(没用过)</h4><p>Web-Portlet模块提供了基于Portlet环境的MVC实现，并提供了与Spring Web-MVC模块相关的功能。</p><h2 id="1-3核心Jar包"><a href="#1-3核心Jar包" class="headerlink" title="1.3核心Jar包"></a>1.3核心Jar包</h2><p>其实就是上面说的各种模块的Jar包。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210223172309936.png" alt="JAR包1"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210223172322807.png" alt="JAR包2"></p><h2 id="1-4-Spring注解"><a href="#1-4-Spring注解" class="headerlink" title="1.4 Spring注解"></a>1.4 Spring注解</h2><h3 id="1-4-1注解配置"><a href="#1-4-1注解配置" class="headerlink" title="1.4.1注解配置"></a>1.4.1注解配置</h3><p>SpringBoot自动配置，使用XML的就不看了</p><h3 id="1-4-2-常用注解"><a href="#1-4-2-常用注解" class="headerlink" title="1.4.2 常用注解"></a>1.4.2 常用注解</h3><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210224184801412.png" alt="img"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210224184815705.png" alt="img"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210224184828461.png" alt="img"></p><p>整理一下自己常用的，或者说应该知道的</p><table><thead><tr><th>类别</th><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>Bean声明</td><td>@Component</td><td>组件，没有明确定义的角色</td></tr><tr><td></td><td>@Service</td><td>服务</td></tr><tr><td></td><td>@Controller</td><td>控制器</td></tr><tr><td>Bean注入</td><td>@Autowired</td><td>服务依赖注入</td></tr><tr><td>配置类注解</td><td>@Configuration</td><td>声明此类为配置类，包含Value属性可以直接指定属性值</td></tr><tr><td></td><td>@Bean</td><td>注解在方法上，声明该方法返回值注入容器中</td></tr><tr><td></td><td>@ComponentScan</td><td>对组件进行扫描</td></tr><tr><td>AOP注解</td><td>@Aspect</td><td>声明一个切面，使用@After等注解定义通知，可将拦截规则（切点）作为参数</td></tr><tr><td></td><td>@After</td><td>在方法后执行</td></tr><tr><td></td><td>@Before</td><td>在方法前执行</td></tr><tr><td></td><td>@Around</td><td>在方法前和后执行</td></tr><tr><td></td><td>@PonitCut</td><td>声明切点</td></tr><tr><td>SpringMVC注解</td><td>@Controller</td><td>控制器</td></tr><tr><td></td><td>@RequestMapping</td><td>映射Web请求的地址和参数，包括访问路径和参数</td></tr><tr><td></td><td>@ResponseBody</td><td>可以返回JSON到前端</td></tr><tr><td></td><td>@RequestBody</td><td>可以将Request参数放入Request Body体中</td></tr><tr><td></td><td>@RestController</td><td>@Controller和@ResponseBody的结合，可以返回消息的一个Controller</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h2 id="1-5-IOC原理"><a href="#1-5-IOC原理" class="headerlink" title="1.5 IOC原理"></a>1.5 IOC原理</h2><h3 id="1-5-1-IOC简介"><a href="#1-5-1-IOC简介" class="headerlink" title="1.5.1 IOC简介"></a>1.5.1 IOC简介</h3><p>Spring通过一个配置文件描述Bean和Bean之间的<strong>依赖关系</strong>，利用Java的<strong>反射功能</strong>实例化Bean并建立Bean之间的依赖关系。</p><hr><p>抽象工厂+反射。</p><p>先读取配置文件，后生成实例。</p><p>根据类名动态生成对象：<code>f = (类名) class.forName(类名字符串).newInstance()</code> </p><h3 id="1-5-2-Bean装配流程"><a href="#1-5-2-Bean装配流程" class="headerlink" title="1.5.2 Bean装配流程"></a>1.5.2 Bean装配流程</h3><ol><li>读取配置、注解信息</li><li>读取Bean配置信息：Spring在启动时会从XML配置文件或注解中<strong>读取</strong>应用程序提供的Bean<strong>配置信息</strong></li><li>并在Spring容器中生成一份相应的<strong>Bean配置注册表</strong>；</li><li>然后根据这张注册表<strong>实例化Bean</strong>，装配好Bean之间的依赖关系，为上层业务提供基础的运行环境。</li></ol><p>其中Bean缓存池为HashMap实现。Spring Bean的装配流程如图。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210224192524135.png" alt="Bean装配流程"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/19ea23b5b90d631f35d375e20448a519.png" alt="具体流程"></p><h3 id="1-5-3-Bean作用域"><a href="#1-5-3-Bean作用域" class="headerlink" title="1.5.3 Bean作用域"></a>1.5.3 Bean作用域</h3><p>五种作用域，分别为：</p><ul><li>Singleton，单例</li><li>Prototype，原型</li><li>Request，请求级别</li><li>Session，会话级别</li><li>Global Session，全局</li></ul><p>作用域就是用来形容Bean容器中的一个Bean的作用范围。类似于public等修饰符。</p><h4 id="1-Singleton"><a href="#1-Singleton" class="headerlink" title="1. Singleton"></a>1. Singleton</h4><p>单例模式。IoC容器中，只会存在一个Bean对象，其他所有Bean引用的依赖都指向这一个Bean。</p><p>多线程下不安全。</p><p><strong>Spring中默认的就是Singleton作用域。</strong></p><h4 id="2-Prototype"><a href="#2-Prototype" class="headerlink" title="2. Prototype"></a>2. Prototype</h4><p>原型模式。</p><p><strong>每次通过Bean容器获取</strong>一个Prototype的Bean时，都会创建一个新的实例，每个Bean实例都有<strong>自己的属性和状态</strong>。</p><h4 id="3-Request"><a href="#3-Request" class="headerlink" title="3. Request"></a>3. Request</h4><p>HTTP请求范围。</p><p><strong>一次HTTP请求</strong>中是同一个Bean，而不同的HTTP请求则是不同的Bean。</p><p>当前请求结束后，这个Bean也会被销毁。</p><h4 id="4-Session"><a href="#4-Session" class="headerlink" title="4. Session"></a>4. Session</h4><p><strong>一次HTTP Session中</strong>是同一个Bean，仅在当前Session中有效。</p><p>不共享数据，Session结束后销毁。</p><h4 id="5-Global-Session"><a href="#5-Global-Session" class="headerlink" title="5. Global Session"></a>5. Global Session</h4><p><strong>全局的HTTP Session中</strong>返回同一个Bean。</p><p>尽在使用Porlet Context时有效。</p><blockquote><p><a href="https://blog.csdn.net/jimsonhappy/article/details/54707694">Connection连接与Session会话的理解</a></p><p>通俗来讲，会话(Session) 是通信双方从开始通信到通信结束期间的一个上下文（Context）。这个上下文是一段位于服务器端的内存：记录了本次连接的客户端机器、通过哪个应用程序、哪个用户登录等信息.</p><p>连接（Connection）：连接是从客户端到ORACLE实例的一条物理路径。连接可以在网络上建立，或者在本机通过IPC机制建立。通常会在客户端进程与一个专用服务器或一个调度器之间建立连接。</p><p>会话(Session) 是和连接(Connection)是同时建立的，两者是对同一件事情不同层次的描述。简单讲，连接(Connection)是物理上的客户端同服务器的通信链路，会话(Session)是逻辑上的用户同服务器的通信交互。</p></blockquote><h3 id="1-5-4-Bean生命周期"><a href="#1-5-4-Bean生命周期" class="headerlink" title="1.5.4 Bean生命周期"></a>1.5.4 Bean生命周期</h3><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210224193041984.png" alt="SpringBean生命周期"></p><blockquote><p><a href="https://blog.csdn.net/riemann_/article/details/118500805">一文读懂 Spring Bean 的生命周期_riemann_的博客-CSDN博客</a></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210710134349143.png" alt="SpringBean生命周期2"></p><ul><li><p>Bean 自身的方法</p><p>比如构造函数、getter/setter 以及 init-method 和 destory-method 所指定的方法等，也就对应着上文说的实例化 -&gt; 属性赋值 -&gt; 初始化 -&gt; 销毁四个阶段。</p></li><li><p>容器级的方法（BeanPostProcessor 一系列接口）<br>主要是后处理器方法。比如 InstantiationAwareBeanPostProcessor、BeanPostProcessor 接口方法。这些接口的实现类是独立于 Bean 的，并且会注册到 Spring 容器中。在 Spring 容器创建任何 Bean 的时候，这些后处理器都会发生作用。</p></li><li><p>Bean 级生命周期方法<br>可以理解为 Bean 类直接实现接口的方法，比如 BeanNameAware、BeanFactoryAware、ApplicationContextAware、InitializingBean、DisposableBean 等方法，这些方法只对当前 Bean 生效。</p></li></ul><p>三级方法是一级一级进行扩展的：</p><p>首先是最基本的Bean自身方法，进行最基本的创建：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210707002134280.png" alt="Bean自身方法"></p><p>之后是容器级处理方法，主要是后置处理方法，在各个阶段前后进行额外的处理：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210707225212729.png" alt="容器级方法扩展"></p><p>最后是Bean级方法，只对当前Bean生效，进行额外属性的赋值：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210710134349143.png" alt="SpringBean生命周期2"></p><hr><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/e8a473640bcd06e544c86fa729133ac3.png" alt="对应过程"></p><hr><p>日后需要去看看这个视频讲的不错：<a href="https://www.bilibili.com/video/BV1rt4y1v7HD?share_source=copy_web">Spring之Bean的生命周期详解_哔哩哔哩_bilibili</a></p><iframe src="//player.bilibili.com/player.html?aid=627385128&amp;bvid=BV1rt4y1v7HD&amp;cid=244295797&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></blockquote><h3 id="1-5-5-四种依赖注入"><a href="#1-5-5-四种依赖注入" class="headerlink" title="1.5.5 四种依赖注入"></a>1.5.5 四种依赖注入</h3><blockquote><p>这一块建议阅读<a href="https://www.zhihu.com/question/23277575/answer/169698662">Spring IoC有什么好处呢？ - 知乎 (zhihu.com)</a>，可以弄清楚到底为啥要用这四种注入方法。</p></blockquote><ul><li>构造器注入</li><li>set方法注入</li><li>静态工厂注入</li><li>实例工厂注入</li></ul><h4 id="1-构造器注入"><a href="#1-构造器注入" class="headerlink" title="1. 构造器注入"></a>1. 构造器注入</h4><p>构造器注入指通过在类的<strong>构造函数</strong>中注入属性或对象来实现依赖注入。</p><p>构造方法传入参数：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在构造函数中注入message属性</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">PersionDaoImpl</span><span class="params">(String message)</span></span>{</span><br><span class="line"><span class="keyword">this</span>.message = message;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>xml配置文件：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义Bean实例并在构造函数constructor-arg中注入message属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"persionDaoImpl"</span> <span class="attr">class</span>=<span class="string">"com.PersionDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="2-set方法注入"><a href="#2-set方法注入" class="headerlink" title="2. set方法注入"></a>2. set方法注入</h4><p>set方法注入是通过在类中实现<strong>get、set方法</strong>来实现属性或对象的依赖注入的。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">PersionDaoImpl</span><span class="params">(String message)</span></span>{</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;<span class="comment">//定义属性及其set get方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>{<span class="keyword">return</span> id;}</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{<span class="keyword">this</span>.id=id}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>xml配置文件</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义Bean实例并通过property注入id为123的属性值--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"persionDaoImpl"</span> <span class="attr">class</span>=<span class="string">"com.PersionDaoImpl"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"id"</span> <span class="attr">value</span>=<span class="string">"123"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="3-静态工厂注入"><a href="#3-静态工厂注入" class="headerlink" title="3. 静态工厂注入"></a>3. 静态工厂注入</h4><blockquote><p><a href="https://www.jianshu.com/p/ceb5ec8f1174">啥是静态工厂方法</a></p></blockquote><p>静态工厂注入是<strong>通过调用工厂类中定义的静态方法</strong>来获取需要的对象的。</p><p>为了让Spring管理所有对象，应用程序<strong>不能直接通过“工厂类.静态方法（）”的方式获取对象，而需要通过Spring注入（XML配置）的方式获取</strong>。代码如下。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.定义静态工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoFactory</span></span>{</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> FactoryDao <span class="title">getStaticFactoryDaoImpl</span><span class="params">()</span></span>{</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> StaticFactoryDaoImpl();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> SpringAction{</span><br><span class="line"><span class="comment">//2.定义工厂对象</span></span><br><span class="line"><span class="keyword">private</span> FactoryDao staticFactoryDao;</span><br><span class="line"><span class="comment">//3.注入工厂对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setStaticFactoryDaoImpl</span><span class="params">(FactoryDao staticFactoryDao)</span></span>{</span><br><span class="line"><span class="keyword">this</span>.staticFactoryDao = staticFactoryDao;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上述代码定义了一个<code>DaoFactory</code>工厂类和<code>getStaticFactoryDaoImpl（）</code>静态工厂方法，该方法实例化并返回一个<code>StaticFactoryDaoImpl</code>实例；<br>同时定义了一个SpringAction类，并通过<code>setStaticFactoryDao</code>获取注入的<code>FactoryDao</code>。</p><p>具体的XML注入语法如下。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.定义获取工厂对象的静态方法--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--factory-method用于指定调用哪个工厂方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"staticFactoryDao"</span> <span class="attr">class</span>=<span class="string">"DaoFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getStaticFactoryDaoImpl"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2.注入静态工厂实例 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"springAction"</span> <span class="attr">class</span>=<span class="string">"SpringAction"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"StaticFactoryDao"</span> <span class="attr">ref</span>=<span class="string">"staticFactoryDao"</span>&gt;</span>&lt;/property &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>上述代码中，第一个bean用来获取工厂及工厂方法，第二个bean用来实际注入。</p><h4 id="4-实例工厂注入"><a href="#4-实例工厂注入" class="headerlink" title="4. 实例工厂注入"></a>4. 实例工厂注入</h4><p>实例工厂注入指的是<strong>获取对象实例的方法是非静态的</strong>，因此首先需要实例化一个工厂类对象，然后调用对象的实例化方法来实例化对象。具体代码如下。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoFactory</span></span>{ <span class="comment">//1.实例工厂</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FactoryDao <span class="title">getStaticFactoryDaoImpl</span><span class="params">()</span></span>{  <span class="comment">//工厂方法不是静态的</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> FactoryDaoImpl();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">public</span> SpringAction{</span><br><span class="line"><span class="keyword">private</span> FactoryDao factoryDao; <span class="comment">//2.注入对象</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFactoryDaoImpl</span><span class="params">(FactoryDao factoryDao)</span></span>{</span><br><span class="line"><span class="keyword">this</span>.factoryDao= factoryDao;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"springAction"</span> <span class="attr">class</span>=<span class="string">"SpringAction"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--1.使用实例工厂的方式注入对象--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--ref属性是写的下面的beanName--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"factoryDao"</span> <span class="attr">ref</span>=<span class="string">"factoryDao"</span>&gt;</span>&lt;/property &gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--2.获取对象的方式是从工厂类中获取实例--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"daoFactory"</span> <span class="attr">class</span>=<span class="string">"com.DaoFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--先实例化工厂类，再从工厂对象中调用工厂方法得到对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">"factoryDao"</span> <span class="attr">factory-bean</span>=<span class="string">"daoFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getFactoryDaoImple"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>上述代码定义了一个name为factoryDao的工厂类，并通过factory-method定义了实例化对象的方法，这里实例化对象的方法是一个名为getFactoryDaoImpl的方法。该方法返回一个工厂类，在springAction中通过标签注入工厂实例。</p><h3 id="1-5-6-自动装配的5种方式"><a href="#1-5-6-自动装配的5种方式" class="headerlink" title="1.5.6 自动装配的5种方式"></a>1.5.6 自动装配的5种方式</h3><ul><li>手动装配<ul><li>基于XML配置</li><li>基于注解</li></ul></li><li>自动装配<ol><li>no：不启用自动装配，通过显式设置ref属性来进行对象装配。</li><li>byName：通过<strong>参数名</strong>自动装配，<strong>Bean的autowire</strong>被设置为byName后，Spring容器试图匹配并装配与该Bean的属性具有相同名字的Bean。</li><li>byType：通过<strong>参数类型</strong>自动装配，<strong>Bean的autowire</strong>被设置为byType后，Spring容器试图匹配并装配与该Bean的属性具有相同类型的Bean。</li><li>constructor：通过设置<strong>构造器参数</strong>的方式来装配对象，如果没有匹配到带参数的构造器参数类型，则Spring会抛出异常。</li><li>autodetect：<strong>首先尝试</strong>使用constructor来自动装配，如果<strong>无法完成</strong>自动装配，则使用byType方式进行装配。</li></ol></li></ul><h2 id="1-6-Spring-AOP原理"><a href="#1-6-Spring-AOP原理" class="headerlink" title="1.6 Spring AOP原理"></a>1.6 Spring AOP原理</h2><h3 id="1-6-1-AOP简介"><a href="#1-6-1-AOP简介" class="headerlink" title="1.6.1 AOP简介"></a>1.6.1 AOP简介</h3><p>AOP，面向切面编程。将公共的与核心业务无关的部分提取出来，<strong>提高代码复用率，降低耦合度。</strong></p><ul><li>核心关注点：业务核心</li><li>横切关注点：公共部分，比如日志、事务、权限认证。</li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210301175351325.png" alt="AOP常见应用场景"></p><h3 id="1-6-2-AOP核心概念"><a href="#1-6-2-AOP核心概念" class="headerlink" title="1.6.2 AOP核心概念"></a>1.6.2 AOP核心概念</h3><ul><li>切面，Aspect：切面类，在这里面写抽取的额外公共逻辑。</li><li>连接点，<strong>JoinPoint</strong>：被拦截的方法，也就是原方法，需要在这前面或者后面执行公共逻辑。</li><li>切入点，<strong>Pointcut</strong>：切面中的某个方法，在这前面或者后面执行公共逻辑。@Pointcut注解写切点表达式后跟一个函数，代表原来的方法。</li><li>通知，<strong>Advice</strong>：也就是公共逻辑执行的位置，对应Before、After那几个注解。前置通知，后置通知，成功通知，异常通知，环绕通知五类。</li><li>目标对象：原来的对象，也就是代理的目标对象。</li><li>织入，<strong>weaving</strong> ：将<strong>切面应用</strong>到目标对象并<strong>执行代理对象创建</strong>的过程。</li></ul><p>这些观念可以结合下面的具体例子来看。</p><blockquote><h4 id="具体例子：Spring-AOP-SpringBoot集成-柠檬五个半-博客园-cnblogs-com"><a href="#具体例子：Spring-AOP-SpringBoot集成-柠檬五个半-博客园-cnblogs-com" class="headerlink" title="具体例子：Spring AOP SpringBoot集成 - 柠檬五个半 - 博客园 (cnblogs.com)"></a>具体例子：<a href="https://www.cnblogs.com/LemonFive/p/10983875.html">Spring AOP SpringBoot集成 - 柠檬五个半 - 博客园 (cnblogs.com)</a></h4><p>1.编写业务类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.aop;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@desc</span>: 核心业务模块</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span>: CSH</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/aopController")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AopController</span> </span>{</span><br><span class="line">    <span class="meta">@RequestMapping(value = "/Curry")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Curry</span><span class="params">()</span></span>{ System.out.println(<span class="string">"库里上场打球了！！"</span>); }</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(value = "/Harden")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Harden</span><span class="params">()</span></span>{ System.out.println(<span class="string">"哈登上场打球了！！"</span>); }</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@RequestMapping(value = "/Durant/{point}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Durant</span><span class="params">(<span class="meta">@PathVariable("point")</span>  <span class="keyword">int</span> point)</span></span>{ System.out.println(<span class="string">"杜兰特上场打球了！！"</span>); }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>2.定义切面类：在类上添加@Aspect 和@Component 注解即可将一个类定义为切面类。 </p><ul><li><code>@Aspect</code> 注解 使之成为切面类</li><li><code>@Component</code> 注解 把切面类加入到IOC容器中</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.aop;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@desc</span>: 经纪人切面</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span>: CSH</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrokerAspect</span> </span>{</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义切入点，切入点为com.example.demo.aop.AopController中的所有函数</span></span><br><span class="line"><span class="comment">     *通过<span class="doctag">@Pointcut</span>注解声明频繁使用的切点表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut("execution(public * com.example.demo.aop.AopController.*(..)))</span><span class="string">")</span></span><br><span class="line"><span class="string">    public void BrokerAspect(){}</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    /** * @description  在连接点执行之前执行的通知 */</span></span><br><span class="line"><span class="string">    @Before("</span>BrokerAspect()<span class="string">")</span></span><br><span class="line"><span class="string">    public void doBeforeGame(){</span></span><br><span class="line"><span class="string">        System.out.println("</span>经纪人正在处理球星赛前事务！<span class="string">");</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    /** * @description  在连接点执行之后执行的通知（返回通知和异常通知的异常） */</span></span><br><span class="line"><span class="string">    @After("</span>BrokerAspect()<span class="string">")</span></span><br><span class="line"><span class="string">    public void doAfterGame(){ System.out.println("</span>经纪人为球星表现疯狂鼓掌！<span class="string">"); }</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    /** * @description  在连接点执行之后执行的通知（返回通知） */</span></span><br><span class="line"><span class="string">    @AfterReturning("</span>BrokerAspect()<span class="string">")</span></span><br><span class="line"><span class="string">    public void doAfterReturningGame(){ System.out.println("</span>返回通知：经纪人为球星表现疯狂鼓掌！<span class="string">"); }</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    /** * @description  在连接点执行之后执行的通知（异常通知） */</span></span><br><span class="line"><span class="string">    @AfterThrowing("</span>BrokerAspect()<span class="string">")</span></span><br><span class="line"><span class="string">    public void doAfterThrowingGame(){ System.out.println("</span>异常通知：球迷要求退票！<span class="string">"); }</span></span><br><span class="line"><span class="string">}</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>@Pointcut("execution(public * com.example.demo.aop.AopController.*(..)))")</code> ，AOP切点表达式，表示要在哪里切入（在这个方法前后执行切入的函数）<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210804170414308.png" alt="切点表达式"></li><li>@Before(“BrokerAspect()”) ：其中的函数名是 <code>@Pointcut</code> 注解之中的，也就是切点之前执行。</li><li>@After：在连接点执行之后执行的通知（返回通知和异常通知的异常）</li><li>@AfterReturning：在连接点执行之后执行的通知（返回通知）</li><li>@AfterThrowing：在连接点执行之后执行的通知（异常通知）</li></ul><p><strong>可以看到，原业务类无任何更改，只是新写了这么一个Aspect类，就做到了在原方法之前或者之后执行额外方法。所以说做到了低耦合</strong></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210804172435852.png" alt="输出结果"></p><p>最后，Around注解可以在方法前和后执行：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** * <span class="doctag">@description</span>  使用环绕通知 */</span></span><br><span class="line"><span class="meta">@Around("BrokerAspect()")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAroundGame</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>{</span><br><span class="line">    <span class="keyword">try</span>{</span><br><span class="line">        System.out.println(<span class="string">"经纪人正在处理球星赛前事务！"</span>);</span><br><span class="line">        pjp.proceed();</span><br><span class="line">        System.out.println(<span class="string">"返回通知：经纪人为球星表现疯狂鼓掌！"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">catch</span>(Throwable e){</span><br><span class="line">        System.out.println(<span class="string">"异常通知：球迷要求退票！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里主要是<code>ProceedingJoinPoint pjp</code>这个参数，表示切入点的方法。</p><p><code>pjp.proceed();</code>就表示执行原方法，在这一行的前后进行切面逻辑的编写即可。</p><p>以及，带参数的方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.aop;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@desc</span>:技术统计</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span>: CSH</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameDataAspect</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定义切入点，切入点为com.example.demo.aop.AopController中的所有函数</span></span><br><span class="line"><span class="comment">     *通过<span class="doctag">@Pointcut</span>注解声明频繁使用的切点表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Pointcut("execution(public * com.example.demo.aop.AopController.Durant(int)) &amp;&amp; args(point))</span><span class="string">")</span></span><br><span class="line"><span class="string">    public void GameDataAspect(int point){ }</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    /** * @description  使用环绕通知 */</span></span><br><span class="line"><span class="string">    @Around("</span>GameDataAspect(point)<span class="string">")</span></span><br><span class="line"><span class="string">    public void doAroundGameData(ProceedingJoinPoint pjp,int point) throws Throwable {</span></span><br><span class="line"><span class="string">        try{</span></span><br><span class="line"><span class="string">            System.out.println("</span>球星上场前热身！<span class="string">");</span></span><br><span class="line"><span class="string">            pjp.proceed();</span></span><br><span class="line"><span class="string">            System.out.println("</span>球星本场得到<span class="string">" + point + "</span>分<span class="string">" );</span></span><br><span class="line"><span class="string">        }</span></span><br><span class="line"><span class="string">        catch(Throwable e){</span></span><br><span class="line"><span class="string">            System.out.println("</span>异常通知：球迷要求退票！<span class="string">");</span></span><br><span class="line"><span class="string">        }</span></span><br><span class="line"><span class="string">    }</span></span><br><span class="line"><span class="string">}</span></span><br></pre></td></tr></tbody></table></figure><p>修改切点表达式，传入参数即可。</p></blockquote><h3 id="1-6-3-AOP代理的两种方式"><a href="#1-6-3-AOP代理的两种方式" class="headerlink" title="1.6.3 AOP代理的两种方式"></a>1.6.3 AOP代理的两种方式</h3><p>两种方式：CGLib动态代理和JDK动态代理。</p><p>Spring默认的策略：</p><ul><li>如果是目标类接口，使用JDK动态代理；</li><li>否则使用CGLib动态代理。</li></ul><blockquote><p><a href="https://mp.weixin.qq.com/s/NXZp8a3n-ssnC6Y1Hy9lzw">漫画:AOP 面试造火箭事件始末 (qq.com)</a></p><p>代理模式。</p><p>代理分为静态代理和动态代理：</p><ul><li>静态代理：就是我们自己手写的，在<strong>编译前定义好</strong>代理类/接口。</li><li>动态代理：通过<strong>JDK反射机制</strong>在<strong>程序运行后创建</strong></li></ul><p>动态代理又分为JDK代理和CGLib代理：</p><ul><li>JDK动态代理：委托类（原来的目标类）必须<strong>实现接口</strong>，代理类和委托类实现同样的接口，然后代理类对其增强。</li><li>CGLib动态代理：委托类不需要实现接口，而是代理类来<strong>继承委托类</strong>。</li></ul><p>底层源码就先不深挖了。。。</p><ul><li><p>JDK动态代理通过<strong>反射机制</strong>来实现，有一定的性能问题。</p></li><li><p>CGLib性能稍高，是通过一个叫<strong>FastClass的机制</strong>来实现的，简单来说就是对类中的方法进行一个索引。</p></li></ul><p>CGLib不能代理 <strong>final 的方法\类</strong>，因为final修饰不能被继承/重写。</p></blockquote><h3 id="1-6-4-AOP的5种通知类型"><a href="#1-6-4-AOP的5种通知类型" class="headerlink" title="1.6.4 AOP的5种通知类型"></a>1.6.4 AOP的5种通知类型</h3><p>也就是Advice，那几个位置。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210301175940812.png" alt="AOP五种通知类型"></p><h3 id="1-6-5-AOP的代码实例"><a href="#1-6-5-AOP的代码实例" class="headerlink" title="1.6.5 AOP的代码实例"></a>1.6.5 AOP的代码实例</h3><p>（上面已经举过例子了）</p><p>在Spring中，AOP的使用比较简单，如下代码通过@Aspect注解声明一个切面，通过@Pointcut定义需要拦截的方法，然后用@Before、@AfterReturning、@Around分别实现前置通知、后置通知和环绕通知要执行的方法。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210301180042561.png" alt="AOP实例"></p><h2 id="1-7-Spring-MVC原理"><a href="#1-7-Spring-MVC原理" class="headerlink" title="1.7 Spring MVC原理"></a>1.7 Spring MVC原理</h2><p>MVC，模型-视图-控制器。</p><p>围绕一个DispatcherServlet，分发请求。</p><p><img src="https://img-blog.csdnimg.cn/20210301180234481.png" alt="SpringMVC流程"></p><h2 id="1-8-事务"><a href="#1-8-事务" class="headerlink" title="1.8 事务"></a>1.8 事务</h2><p>事务的特性：ACID，原子性，一致性，隔离性，持久性。</p><h3 id="1-8-1-本地事务"><a href="#1-8-1-本地事务" class="headerlink" title="1.8.1 本地事务"></a>1.8.1 本地事务</h3><p>JDBC的本地事务：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210301181354691.png" alt="img"></p><h3 id="1-8-2-分布式事务"><a href="#1-8-2-分布式事务" class="headerlink" title="1.8.2 分布式事务"></a>1.8.2 分布式事务</h3><p>跨数据库，分布式事务操作</p><ul><li>跨数据库<ul><li>同一类型数据库，多个数据源</li><li>不同数据库</li></ul></li></ul><p>Java事务编程接口JTA，和Java事务服务JTS，提供了分布式事务服务。</p><ul><li>事务管理器：负责所有事务参与单元的协调与控制。</li><li>XA协议的资源管理器：XA协议定义了事务管理器与资源管理器之间的接口；资源管理器负责不同数据库具体的事务执行操作。</li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210301182140598.png" alt="UserTransaction操作两个数据库"></p><h3 id="1-8-3-两阶段提交协议"><a href="#1-8-3-两阶段提交协议" class="headerlink" title="1.8.3 两阶段提交协议"></a>1.8.3 两阶段提交协议</h3><p>二阶段提交协议，Two-phase Commit，简写为2PC。一般也称为XA方案。</p><p><strong>两阶段提交协议用于保证分布式事务的原子性。 即所有数据库，要么都执行要么都不执行。</strong></p><p><strong>两个阶段：1.准备阶段；2.提交阶段。</strong></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210301182735105.png" alt="两个阶段"></p><p>我们需要引入一个<strong>协调者来管理所有的节点</strong>，负责各个本地资源的提交和回滚，并确保这些节点正确提交操作结果，若提交失败则放弃事务。</p><p>这里事务管理器是指事务协调者，资源管理器是事务参与者。</p><ol><li><p>准备阶段</p><ol><li><p>为每个参与者都发送Prepare消息。</p></li><li><p>返回消息</p><ul><li><p>返回失败（例如权限验证不通过）</p></li><li><p>返回成功：每个参与者在本地执行事务，写本地的undo和redo日志，但不提交，返回成功消息。</p></li></ul></li><li><p>等所有参与者都返回结果之后，进入提交阶段。</p></li></ol></li><li><p>提交阶段</p><ol><li>所有的都OK了，那么就提交；</li><li>只要有一个不OK或者超时的，就给全部参与者发送回滚消息。</li></ol></li></ol><p>事务的执行和释放是<strong>在JPA中基于锁</strong>来实现控制的。</p><blockquote><p><a href="https://www.jianshu.com/p/1aa944f44b7b">分布式事务理论-二阶段提交（Two-phase Commit） - 简书 (jianshu.com)</a></p><p><a href="https://zhuanlan.zhihu.com/p/35616810">分布式一致性之两阶段提交协议、三阶提交协议 - 知乎 (zhihu.com)</a></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/9793627-a71a27fddfabfa2b.png" alt="2PC"></p><p>同样还有改进的3PC，三阶段提交协议。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/9793627-f90ffe49d3ce34a9.png" alt="三阶段提交协议"></p><p>优缺点总结。</p><ul><li><p>数据不一致问题：</p><ul><li>只有一部分参与者接收到了提交请求并执行提交操作，但其他未接到提交请求的那部分参与者则无法执行事务提交。于是整个分布式系统便出现了数据不一致的问题。</li><li>协调者再发出DoCommit 消息之后宕机，而唯一接收到这条消息的参与者同时也宕机了。那么即使协调者通过选举协议产生了新的协调者，这条事务的状态也是不确定的，没人知道事务是否被已经提交。</li></ul></li><li><p>同步阻塞问题：当本地资源管理器占有临界资源时，其他资源管理器如果要访问同一临界资源，会处于阻塞状态。</p></li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/9793627-f61ad7165e8ac269.jpg" alt="优缺点"></p></blockquote><p>==严重依赖于数据库层面来搞定复杂的事务，效率很低，绝对不适合高并发的场景。==</p><p>在微服务中，一般来说某个系统内部如果出现跨多个库的这么一个操作，是不合规的。每个服务只能连自己的库。操作别人的库，必须通过别的服务来接口调用，不能直接操作。</p><h2 id="1-9-Mybatis缓存"><a href="#1-9-Mybatis缓存" class="headerlink" title="1.9 Mybatis缓存"></a>1.9 Mybatis缓存</h2><blockquote><p><a href="https://tech.meituan.com/2018/01/19/mybatis-cache.html">聊聊MyBatis缓存机制 - 美团技术团队 (meituan.com)</a><br>美团技术团队NB</p></blockquote><p>MyBatis缓存分为<strong>一级缓存和二级缓存</strong>。 </p><p>一级缓存默认开启，而且是不能被关闭的。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/2021030118292044.png" alt="Mybatis两级缓存"></p><h3 id="1-9-1-一级缓存"><a href="#1-9-1-一级缓存" class="headerlink" title="1.9.1 一级缓存"></a>1.9.1 一级缓存</h3><p><strong>缓存到SqlSession中。</strong></p><p>缓存的<strong>数据结构是用的Map</strong>，key为MapperId + Offset + Limit + SQL +所有入参。</p><p>如果相同SQL的两次查询中间出现了Commit操作（增删改），则会清空SqlSession一级缓存，再重新查询进行缓存。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/6e38df6a.jpg" alt="一级缓存"></p><p>每个SqlSession中持有了Executor，每个Executor中有一个LocalCache。</p><h4 id="一级缓存总结"><a href="#一级缓存总结" class="headerlink" title="一级缓存总结"></a>一级缓存总结</h4><ol><li>MyBatis一级缓存的<strong>生命周期和SqlSession一致</strong>。</li><li>MyBatis一级缓存内部设计简单，<strong>只是一个没有容量限定的HashMap</strong>，在缓存的功能性上有所欠缺。</li><li>MyBatis的一级缓存最大范围是SqlSession内部，<strong>有多个SqlSession或者分布式的环境下，数据库写操作会引起脏数据，建议设定缓存级别为Statement。</strong></li></ol><h3 id="1-9-2-二级缓存"><a href="#1-9-2-二级缓存" class="headerlink" title="1.9.2 二级缓存"></a>1.9.2 二级缓存</h3><blockquote><p> 简单来说，二级缓存就是全局变量，一级缓存就是局部变量；不过这里是先全局后局部的。</p></blockquote><p>二级缓存是可以跨SqlSession的，多个SqlSession共享一个缓存。</p><p>进入一级缓存的查询流程前，先在CachingExecutor进行二级缓存的查询</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/28399eba.png" alt="img"></p><h4 id="二级缓存总结"><a href="#二级缓存总结" class="headerlink" title="二级缓存总结"></a>二级缓存总结</h4><ol><li>MyBatis的二级缓存相对于一级缓存来说，实现了 ** <code>SqlSession</code>之间缓存数据的共享 **，同时粒度更加的细，能够到<code>namespace</code>级别，通过Cache接口实现类不同的组合，对Cache的可控性也更强。</li><li>MyBatis<strong>在多表查询时，极大可能会出现脏数据</strong>，有设计上的缺陷，安全使用二级缓存的条件比较苛刻。</li><li>在分布式环境下，由于<strong>默认的MyBatis Cache实现都是基于本地的，分布式环境下必然会出现读取到脏数据</strong>，需要<strong>使用集中式缓存将MyBatis的Cache接口实现，有一定的开发成本</strong>，==直接使用Redis、Memcached等分布式缓存可能成本更低，安全性也更高。==</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java常见线程池</title>
      <link href="2021/07/24/Java%E7%BA%BF%E7%A8%8B%E6%B1%A02/"/>
      <url>2021/07/24/Java%E7%BA%BF%E7%A8%8B%E6%B1%A02/</url>
      
        <content type="html"><![CDATA[<h1 id="Java线程池创建"><a href="#Java线程池创建" class="headerlink" title="Java线程池创建"></a>Java线程池创建</h1><h2 id="0-回顾"><a href="#0-回顾" class="headerlink" title="0.回顾"></a>0.回顾</h2><p>之前一篇讲的比较乱，主要整理自别人的。这次自己记一下想要说的问题。</p><p>想要理解的就是，常用线程池，手动创建线程池，关于核心线程和工作线程。</p><p>以及补充一下阻塞队列，还有拒绝策略。</p><h2 id="1-常用线程池"><a href="#1-常用线程池" class="headerlink" title="1.常用线程池"></a>1.常用线程池</h2><ul><li><code>newCachedThreadPool</code> ：<strong>Cached，可缓存线程池</strong>，如果线程池长度超过处理需要，可灵活回收空闲线程，若无可回收，则新建线程。</li><li><code>newFixedThreadPool</code> ：<strong>Fixed，定长线程池</strong>，可控制线程最大并发数，超出的线程会在队列中等待。</li><li><code>newSceduledThreadPool</code> ：<strong>Scheduled，定长线程池</strong>，支持定时及周期性任务执行。</li><li><code>newSingleThreadExecutor</code> ：<strong>Single，单线程化的线程池</strong>，它只会用唯一的工作线程来执行任务，保证所有任务按照指定顺序(FIFO, LIFO, 优先级)执行。</li></ul><h2 id="2-详细参数"><a href="#2-详细参数" class="headerlink" title="2.详细参数"></a>2.详细参数</h2><p>其实主要就是看一下他们的创建方式。</p><h3 id="2-0-手动创建线程池"><a href="#2-0-手动创建线程池" class="headerlink" title="2.0 手动创建线程池"></a>2.0 手动创建线程池</h3><p>首先回忆一下手动创建线程池的重要参数：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用给定的初始参数创建一个新的ThreadPoolExecutor。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,//线程池的核心线程数量</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,//线程池的最大线程数</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,//当线程数大于核心线程数时，多余的空闲线程存活的最长时间</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,//时间单位</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,//任务队列，用来储存等待执行任务的队列</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,//线程工厂，用来创建线程，一般默认即可</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务</span></span></span><br><span class="line"><span class="function"><span class="params">                           )</span></span></span><br></pre></td></tr></tbody></table></figure><ul><li>核心线程数</li><li>最大线程数</li><li>存活时间，时间单位</li><li>阻塞队列</li><li>线程工厂（可忽略）：用来设置<strong>线程名字</strong>的，默认为 <code>pool-线程池数-thread-线程数</code></li><li>拒绝策略（可忽略）：默认拒绝策略为<code>AbortPolicy</code>，即 <strong>丢弃任务并抛出异常</strong> <code>RejectedExecutionException</code></li></ul><hr><h4 id="2-0-1-拒绝策略"><a href="#2-0-1-拒绝策略" class="headerlink" title="2.0.1 拒绝策略"></a>2.0.1 拒绝策略</h4><p>拒绝策略有四种，简单提一下：</p><ol><li><p><code>AbortPolicy</code> ：丢弃任务，<strong>抛出异常</strong></p></li><li><p><code>DiscardPolicy</code> ：丢弃任务，<strong>静默</strong>丢弃</p></li><li><p><code>DiscardOledestPolicy</code> ：<strong>丢弃队列中最老的未处理请求</strong>，然后再次尝试提交新任务。</p></li><li><p><code>CallerRunsPolicy</code> ：在调用者线程中，运行当前被丢弃的任务。</p></li></ol><p>也就是说，两个丢弃当前任务（不管新任务）；<br>一个丢弃队列中最老任务（新任务重要老任务可以不管）；<br>一个让别人执行任务（调用当前线程的线程）；</p><h4 id="2-0-2-阻塞队列"><a href="#2-0-2-阻塞队列" class="headerlink" title="2.0.2 阻塞队列"></a>2.0.2 阻塞队列</h4><p>阻塞队列中的<strong>有界无界</strong>就是说最大存储容量，但是是理想的。无界一般都是指 <code>Integer.MAX_VALUE</code> ，int的最大值个数。有界就是自己来指定容量。</p><h5 id="1-SynchronousQueue"><a href="#1-SynchronousQueue" class="headerlink" title="1.SynchronousQueue"></a>1.SynchronousQueue</h5><p><code>SynchronousQueue</code> 是一个<strong>没有数据缓冲</strong>的同步队列，不存储元素。</p><p>每一个put操作必须等待一个take操作，否则不能继续添加元素。</p><p>常用于<strong>生产者消费者</strong>问题，负责把生产者线程处理的数据直接传递给消费者线程。</p><h5 id="2-LinkedBlockingQueue"><a href="#2-LinkedBlockingQueue" class="headerlink" title="2. LinkedBlockingQueue"></a>2. LinkedBlockingQueue</h5><p><code>LinkedBlockingQueue</code> ，基于链表（linked nodes）的可选界（optionally-bounded）的双向阻塞队列，线程安全。</p><p>可以对first、last元素进行操作，两端都可以入队出队。</p><p>默认容量为 <code>Integer.MAX_VALUE</code> ，无界队列。</p><h5 id="3-DelayedWorkQueue"><a href="#3-DelayedWorkQueue" class="headerlink" title="3.DelayedWorkQueue"></a>3.DelayedWorkQueue</h5><p><code>DelayedWorkQueue</code> ，一个定制的专门用于存储Runnable任务的队列。</p><p>优先级队列，基于堆结构的等待队列，最小堆。</p><p>最近要到达时间的节点放在堆顶，每个节点都会附带到期时间，依次作为堆调整的依据。</p><h3 id="2-1-Cached"><a href="#2-1-Cached" class="headerlink" title="2.1 Cached"></a>2.1 Cached</h3><p>Cached，缓存的；</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">0</span>, Integer.MAX_VALUE,</span><br><span class="line">                                  <span class="number">60L</span>, TimeUnit.SECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>分析一下其参数：</p><ul><li>核心线程：0个，也就是说</li><li>最大线程数：Integer的最大值，反正也是很多了</li><li>存活时间、单位：60秒</li><li>阻塞队列：<code>SynchronousQueue</code> ,同步队列，无容量</li></ul><p>这样的话，其关键在于<strong>核心线程0个</strong>和这个<strong>同步队列</strong>。</p><p>来一个线程就创建一个非核心线程，因为队列中不存储任何元素。</p><p>用完1分钟后销毁，所以说是Cached缓存一下。</p><h3 id="2-2-Fixed"><a href="#2-2-Fixed" class="headerlink" title="2.2 Fixed"></a>2.2 Fixed</h3><p>Fixed，固定的（固定数量的）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newFixedThreadPool</span><span class="params">(<span class="keyword">int</span> nThreads)</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(nThreads, nThreads,</span><br><span class="line">                                  <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                  <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>参数：</p><ul><li>核心线程：传入的n</li><li>最大线程：传入的n</li><li>存活时间、单位：0毫秒</li><li>阻塞队列：<code>LindedBlockingQueue</code> ，链表双向阻塞队列</li></ul><p>这个的关键是在 <code>核心线程数==最大线程数</code> ，所有的线程都是核心线程，不会销毁。</p><p>然后不考虑Integer最大值的话，是无界的，也就是说<strong>使用核心线程去处理所有任务</strong>。</p><p>其中的线程数是固定的不会销毁的，所以说是Fixed。</p><h3 id="2-3-Scheduled"><a href="#2-3-Scheduled" class="headerlink" title="2.3 Scheduled"></a>2.3 Scheduled</h3><p>Scheduled，预定的；</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ScheduledThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize)</span> </span>{</span><br><span class="line">    <span class="keyword">super</span>(corePoolSize, Integer.MAX_VALUE, <span class="number">0</span>, NANOSECONDS,</span><br><span class="line">          <span class="keyword">new</span> DelayedWorkQueue());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>参数：</p><ul><li>核心线程：传入的c</li><li>最大线程：Integer最大值</li><li>存活时间、单位：0纳秒</li><li>阻塞队列： <code>DelayedWorkQueue</code> ，延迟队列，小根堆。</li></ul><p>其关键在于这个队列，<strong>优先级队列小根堆</strong>。</p><p>这是一个可以<strong>定时、周期性执行的线程池</strong>，它继承<code>FutureTask</code>并实现了接口<code>RunnableScheduledFuture</code>。</p><p>里面有个参数time，指的是执行时间。有个函数<code>setNextRunTime()</code>，可以设置下次执行时间。</p><p><strong>小根堆的优先级就是根据时间来排序的。</strong></p><h3 id="2-4-Single"><a href="#2-4-Single" class="headerlink" title="2.4 Single"></a>2.4 Single</h3><p>Single，单例</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newSingleThreadExecutor</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> FinalizableDelegatedExecutorService</span><br><span class="line">        (<span class="keyword">new</span> ThreadPoolExecutor(<span class="number">1</span>, <span class="number">1</span>,</span><br><span class="line">                                <span class="number">0L</span>, TimeUnit.MILLISECONDS,</span><br><span class="line">                                <span class="keyword">new</span> LinkedBlockingQueue&lt;Runnable&gt;()));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>参数：</p><ul><li>核心线程：1</li><li>最大线程：1</li><li>存活时间、单位：0毫秒</li><li>阻塞队列：<code>LinkedBlockingQueue</code> </li></ul><p>其关键在于，核心线程和最大线程都是1。</p><p>而且是无界队列，也就是说<strong>只有一个线程存活并执行</strong>。其他任务都排队。</p><p>所以说是Single。</p><h2 id="3-补充"><a href="#3-补充" class="headerlink" title="3. 补充"></a>3. 补充</h2><p>有一点比较重要的，之前一直理解错了。。。</p><p>也就是说线程池中的<strong>核心线程，和非核心线程，并没有什么区别，他们都是普通线程，并没有什么参数来区分他们。</strong></p><p>在回收线程非核心线程的时候，看谁闲着并且超过存活时间了，就去回收它。</p><p>啊，就这样吧。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是数据库中的MVCC</title>
      <link href="2021/07/01/%E6%95%B0%E6%8D%AE%E5%BA%93MVVC/"/>
      <url>2021/07/01/%E6%95%B0%E6%8D%AE%E5%BA%93MVVC/</url>
      
        <content type="html"><![CDATA[<h1 id="脏读、幻读是什么，MVCC"><a href="#脏读、幻读是什么，MVCC" class="headerlink" title="脏读、幻读是什么，MVCC?"></a>脏读、幻读是什么，MVCC?</h1><h2 id="脏读-幻读"><a href="#脏读-幻读" class="headerlink" title="脏读/幻读"></a>脏读/幻读</h2><p>答：脏读，是指读到了脏数据，比方说一个事务A，执行了修改了个数据，但是还没有提交；这时候事务B来读取到了事务A修改后的这个数据，然后A发生错误回滚了，这时候这个事务B的那个数据就是脏数据。</p><p>幻读是指对表的数据，比方说插入了几条数据，这时候另一个事务来了读取了这几条数据，然后这几条数据又回滚或者删除了，另一个事务读到的数据就好像是幻影好像不存在。(不对)</p><blockquote><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210701113829078.png" alt="三种数据不一致"></p><p>幻读就是你一个事务用一样的 SQL 多次查询，结果每次查询都会发现查到一些之前没看到过的数据。注意，<strong>幻读特指的是你查询到了之前查询没看到过的数据。此时说明你是幻读了</strong></p></blockquote><h2 id="MVCC"><a href="#MVCC" class="headerlink" title="MVCC"></a>MVCC</h2><h3 id="多版本并发控制"><a href="#多版本并发控制" class="headerlink" title="多版本并发控制"></a>多版本并发控制</h3><blockquote><p><a href="https://www.zhihu.com/question/27876575">乐观锁和 MVCC 的区别？ - 知乎 (zhihu.com)</a></p><p><a href="https://www.cnblogs.com/shujiying/p/11347632.html">Mysql中MVCC的使用及原理详解 - 开顺 - 博客园 (cnblogs.com)</a></p></blockquote><p>当多个用户/进程/线程同时对数据库进行操作时，会出现3种冲突情形：</p><ol><li>读-读，不存在任何问题</li><li>读-写，有隔离性问题，可能遇到脏读（会读到未提交的数据） ，幻影读等。</li><li>写-写，可能丢失更新</li></ol><p>多版本并发控制（MVCC）是一种用来 <strong>解决读-写冲突</strong> 的无锁并发控制，<br>也就是为事务分配单向增长的时间戳，为每个修改保存一个版本，版本与事务时间戳关联，<br><strong>读操作只读该事务开始前的数据库的快照</strong>。 </p><p>这样在读操作不用阻塞写操作，写操作不用阻塞读操作的同时，避免了<strong>脏读和不可重复读</strong></p><p>（简单回顾，脏读是读到未提交事务的数据，不可重复读是两次读数据之间另一个事务修改了此数据）</p><h3 id="MVCC实现：版本链-ReadView"><a href="#MVCC实现：版本链-ReadView" class="headerlink" title="MVCC实现：版本链 + ReadView"></a><strong>MVCC实现：版本链 + ReadView</strong></h3><ul><li>版本链：由两个隐藏列实现， <code>trx_id</code> 和 <code>roll_pointer</code> <ul><li>trx_id ： 对此行数据执行操作的<strong>事务ID</strong>（事务ID是不断增长的一个ID）</li><li>roll_pointer ：一个<strong>回滚指针</strong>。每条数据修改时，<u>老版本会存在 Undo 日志中</u>。这个 roll_pointer 就是指向当前数据的老版本的位置。</li></ul></li><li>ReadView：存储当前<strong>正在执行</strong>的事务ID，也就是还<strong>未提交</strong>的事务的ID</li></ul><p>读数据过程：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取当前数据的最新trx_id</span></span><br><span class="line">TrxId currentRowTrxId = table.getRow().getTrxId();</span><br><span class="line"><span class="comment">// 如果trx_id &lt; readView中的所有 trx_id</span></span><br><span class="line"><span class="comment">// 表明这条数据的修改事务已经完成，当前正在执行的事务可以直接访问它</span></span><br><span class="line"><span class="comment">// 避免了脏读</span></span><br><span class="line"><span class="keyword">if</span>(currentRowTrxId &lt; readview.allId()){</span><br><span class="line">访问;</span><br><span class="line">}<span class="keyword">else</span>{</span><br><span class="line">    <span class="comment">// 表示当前数据的修改，是当前事务的后面的新事务修改</span></span><br><span class="line">    <span class="comment">// 这时候当前事务读到的是老的数据</span></span><br><span class="line">    RollPointer rollpointer = table.getRow().getRollPointer();</span><br><span class="line">    <span class="comment">// 读取上N个版本的</span></span><br><span class="line">    <span class="keyword">while</span>(TrxId &gt;= readView[rollPointer]){</span><br><span class="line">        rollPointer = rollPointer.getRow().getRollPointer();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>举例：</p><ul><li>当前行数据 row 的 trx_id == 10，正在执行的事务T要来读取这个row<ul><li>正在执行事务 T_ID = 11，那么 readView == [11]；<br>判断 row_trx_id 与 readView_ID : 10 &lt; 11 ；<br>说明 row 这个数据修改的已经是在事务11之前完成，可以读取最新的row。</li><li>正在执行的当前事务T_ID == 9，那么readView == [9]；<br>判断 row_trx_id 与 readView_ID : 9 &lt; 10；<br>9不能读取row最新的，而是去读取上一个版本的（或者上N个版本的）。</li></ul></li></ul><p>总结：</p><ul><li>解决了读-写的问题，避免了脏读和不可重复读</li><li>通过版本链 + ReadView实现</li><li>版本链通过 隐藏行（trx_id 和 roll_pointer) 和 Undo 日志实现<ul><li>row_trx_id &lt; T_ID (ReadView_ID)：当前行为最新，可以读取</li><li>否则，去Undo日志中读取旧版本</li></ul></li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210702105224849.png" alt="举例"></p><h3 id="注意：InnoDB中的MVCC"><a href="#注意：InnoDB中的MVCC" class="headerlink" title="注意：InnoDB中的MVCC"></a>注意：InnoDB中的MVCC</h3><p>在MySQL的InnoDB引擎中，是由版本号，create_vesion，delete_version实现的。</p><blockquote><p><a href="https://www.cnblogs.com/shujiying/p/11347632.html">Mysql中MVCC的使用及原理详解 - 开顺 - 博客园 (cnblogs.com)</a></p><p>这里的版本号并不是实际的时间值，而是系统版本号。</p><p>每开始新的事务，系统版本号都会自动递增。</p><p>事务开始时刻的系统版本号会作为事务的版本号，用来和查询每行记录的版本号进行比较。</p><p>每个事务又有自己的版本号，这样事务内执行CRUD操作时，就通过版本号的比较来达到数据版本控制的目的。</p></blockquote><ol><li>插入：设定 <code>create_version</code> ；</li><li>删除：设定 <code>delete_version</code> ；</li><li>更新：新纪录设定 <code>craete_version</code>，旧记录保存并设定 <code>delete_version = current_version</code> ；</li><li>读取：比较当前版本号和 <code>create_version</code> 大小，然后根据 <code>delete_version</code> 去查找旧记录：<ol><li> <code>create_version</code>，保证当前事务所在的版本读取不到新的数据（即事务id为2的事务只能读取到create version&lt;=2的已提交的事务的数据集）</li><li> <code>delete_version</code>，保证当前事务读取的，在当前事务版本未被删除（即上述事务id为2的事务查询时，依然能读取到事务id为3所删除的数据行）</li></ol></li></ol><p><a href="https://www.cnblogs.com/liulvzhong/articles/9242299.html">MVCC简介 - 绿洲2017 - 博客园 (cnblogs.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Lamda表达式简单了解</title>
      <link href="2021/06/26/JavaKuangshenLamda%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2021/06/26/JavaKuangshenLamda%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h1><blockquote><p><a href="https://www.bilibili.com/video/BV1V4411p7EF?p=10">【狂神说Java】多线程详解_哔哩哔哩_bilibili</a></p></blockquote><h2 id="1-啥东西"><a href="#1-啥东西" class="headerlink" title="1.啥东西"></a>1.啥东西</h2><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210623160203671.png" alt="Lamda表达式"></p><ul><li>为什么要使用lambda表达式<ul><li>避免匿名内部类定义过多</li><li>可以让你的代码看起来很简洁</li><li>去掉了一堆没有意义的代码，只留下核心的逻辑。</li></ul></li></ul><p>也许你会说，我看了Lambda表达式，不但不觉得简洁，反而觉得更乱，看不懂了。那是因为我们还没有习惯，用的多了，看习惯了，就好了。</p><h2 id="1-函数式接口"><a href="#1-函数式接口" class="headerlink" title="1. 函数式接口"></a>1. 函数式接口</h2><ul><li><p>理解Functional Interface(函数式接口)是学习Java8 lambda表达式的关键所在。</p></li><li><p>函数式接口的定义:<br>任何接口，如果<strong>只包含唯一一个抽象方法</strong>，那么它就是一个函数式接口。<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210623160422715.png" alt="函数式接口"></p></li><li><p>对于函数式接口，我们可以<strong>通过lambda表达式来创建该接口的对象</strong>。</p></li></ul><h2 id="2-Lambda表达式优化过程"><a href="#2-Lambda表达式优化过程" class="headerlink" title="2.Lambda表达式优化过程"></a>2.Lambda表达式优化过程</h2><p>看代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 定义一个函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILike</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Like</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"2.普通的实现类"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda1</span> </span>{</span><br><span class="line">    <span class="comment">// 3.静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Like2</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>{</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>{</span><br><span class="line">            System.out.println(<span class="string">"3.放在类内部的类，使用static"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 调用函数式接口的对象</span></span><br><span class="line">        ILike like1 = <span class="keyword">new</span> Like();</span><br><span class="line">        like1.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 调用3静态内部类</span></span><br><span class="line">        ILike like2 = <span class="keyword">new</span> Like2();</span><br><span class="line">        like2.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Like3</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>{</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>{</span><br><span class="line">                System.out.println(<span class="string">"4.局部内部类，放在main方法里面"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        ILike like3 = <span class="keyword">new</span> Like3();</span><br><span class="line">        like3.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 匿名内部类，没有类名，必须借助接口或者父类</span></span><br><span class="line">        ILike like4 = <span class="keyword">new</span> ILike() {</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span> </span>{</span><br><span class="line">                System.out.println(<span class="string">"5.匿名内部类,不再需要类名，直接父类/接口的构造函数后面{}跟子类代码"</span>);</span><br><span class="line">            }</span><br><span class="line">        };</span><br><span class="line">        like4.lambda();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6. Lambda简化，只留下函数的括号还有函数内部代码</span></span><br><span class="line">        ILike like5 = ()-&gt;{</span><br><span class="line">            System.out.println(<span class="string">"6.Lambda简化后，不再需要构造方法名和函数名，根据变量类型来判断的。加个-&gt;"</span>);</span><br><span class="line">        };</span><br><span class="line">        like5.lambda();</span><br><span class="line">        </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-带参数的-Lambda表达式"><a href="#3-带参数的-Lambda表达式" class="headerlink" title="3.带参数的 Lambda表达式"></a>3.带参数的 Lambda表达式</h3><p>看代码就行了</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Printer</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">myPrint</span><span class="params">(String s)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda2</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        String a = <span class="string">"Hello World"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 带参数的Lambda实现</span></span><br><span class="line">        Printer printer1 = (String s)-&gt;{</span><br><span class="line">            System.out.println(<span class="string">"Lambda1 + "</span> + s);</span><br><span class="line">        };</span><br><span class="line">        printer1.myPrint(a);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 简化1，去掉参数类型</span></span><br><span class="line">        Printer printer2 = (s)-&gt; {</span><br><span class="line">            System.out.println(<span class="string">"去参数类型： "</span>+s);</span><br><span class="line">        };</span><br><span class="line">        printer2.myPrint(a);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 简化2，去掉参数括号(只有一个参数的时候)</span></span><br><span class="line">        Printer printer3 = s-&gt; {</span><br><span class="line">            System.out.println(<span class="string">"去小括号： "</span>+s);</span><br><span class="line">        };</span><br><span class="line">        printer3.myPrint(a);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 简化3，去掉函数的大括号(只有一行的时候)</span></span><br><span class="line">        Printer printer4 = s-&gt; System.out.println(<span class="string">"一行的时候，去大括号： "</span>+s);</span><br><span class="line">        printer4.myPrint(a);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>多线程中的 Runnable 就是一个函数式接口。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java多线程实战学习笔记</title>
      <link href="2021/06/25/JavaKuangshen%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
      <url>2021/06/25/JavaKuangshen%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="多线程学习"><a href="#多线程学习" class="headerlink" title="多线程学习"></a>多线程学习</h1><blockquote><p><a href="https://www.bilibili.com/video/BV1V4411p7EF">【狂神说Java】多线程详解_哔哩哔哩_bilibili</a></p></blockquote><p>这个只是简单的学了一下怎么用，几个小demo，没有深入的讲。</p><h2 id="1-线程简介"><a href="#1-线程简介" class="headerlink" title="1. 线程简介"></a>1. 线程简介</h2><p>线程，进程，多线程</p><ul><li>并发：同时发生，在一个时间段内执行，不一定是同一时间点</li><li>并行：同时执行，在一个时间点上有多个线程执行</li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210623091741197.png" alt="关于run()和start()"></p><ul><li>一个进程可以有多个线程</li></ul><h3 id="Process-和-Thread"><a href="#Process-和-Thread" class="headerlink" title="Process 和 Thread"></a>Process 和 Thread</h3><p>三个概念，程序、进程、线程：</p><ul><li>程序：静态代码</li><li>进程：程序的一次执行过程</li><li>线程：一个进程可以包含多个线程，<strong>线程是CPU调度和执行的单位</strong>。</li></ul><p>很多多线程是模拟出来的，真正的多线程是指有多个CPU。模拟的线程只是一个CPU切换的很快产生了多线程的错觉。其实就是并发和并行的区别。</p><h3 id="一些要点"><a href="#一些要点" class="headerlink" title="一些要点"></a>一些要点</h3><ul><li><code>main()</code> 函数就是主线程；</li><li>默认的话有主线程、GC线程等；</li><li>线程因为调度，会代来开销</li><li>资源抢夺问题，需要并发控制</li></ul><h2 id="2-线程实现（重点）"><a href="#2-线程实现（重点）" class="headerlink" title="2. 线程实现（重点）"></a>2. 线程实现（重点）</h2><h3 id="2-1-三种实现方式"><a href="#2-1-三种实现方式" class="headerlink" title="2.1 三种实现方式"></a>2.1 三种实现方式</h3><ul><li>继承Thread类</li><li>实现Runnable接口</li><li>实现Callable接口</li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210623092650621.png" alt="三种实现方式"></p><h4 id="2-1-1继承Thread类"><a href="#2-1-1继承Thread类" class="headerlink" title="2.1.1继承Thread类"></a>2.1.1继承Thread类</h4><h6 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h6><ol><li>自定义线程类，继承Thread</li><li>重写 <code>run()</code> 方法</li><li>调用 <code>start()</code> 方法启动线程</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    <span class="comment">// 重写run方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"run方法线程"</span>+i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// start启动，run不是多线程</span></span><br><span class="line">        TestThread1 testThread1 = <span class="keyword">new</span> TestThread1();</span><br><span class="line">        testThread1.start();</span><br><span class="line">        <span class="comment">// main线程</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"MMMMMMMMMMMMMM"</span>+i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>PS: 线程开启不一定立即执行，由CPU调度执行</strong></p><h5 id="实例：图片下载"><a href="#实例：图片下载" class="headerlink" title="实例：图片下载"></a>实例：图片下载</h5><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestThread2</span><span class="params">(String url, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        TestThread2 testThread1 = <span class="keyword">new</span> TestThread2(<span class="string">"https://commons.apache.org/proper/commons-io/images/commons-logo.png"</span>, <span class="string">"1.png"</span>);</span><br><span class="line">        TestThread2 testThread2 = <span class="keyword">new</span> TestThread2(<span class="string">"https://commons.apache.org/proper/commons-io/images/io-logo-white.png"</span>, <span class="string">"2.png"</span>);</span><br><span class="line">        TestThread2 testThread3 = <span class="keyword">new</span> TestThread2(<span class="string">"http://www.apache.org/events/current-event-125x125.png"</span>, <span class="string">"3.png"</span>);</span><br><span class="line"></span><br><span class="line">        testThread1.start();</span><br><span class="line">        testThread2.start();</span><br><span class="line">        testThread3.start();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// run方法负责调用下载方法</span></span><br><span class="line">        WebDownload webDownload = <span class="keyword">new</span> WebDownload();</span><br><span class="line">        webDownload.downloader(url, name);</span><br><span class="line">        System.out.println(<span class="string">"下载了文件，名为"</span> + name);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WebDownload</span> </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url, String name)</span> </span>{</span><br><span class="line">            String path = <span class="string">"F:/AWork/Project/2021/JavaDataStructure/src/com/songx64/baselearn/threadlearn/kuangThread/"</span>;</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(path+name));</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.out.println(<span class="string">"IO异常，下载出错"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>需要Apache的一个包 <code>commons-io</code> ：<a href="https://commons.apache.org/proper/commons-io/">Commons IO – Commons IO Overview (apache.org)</a>，用于文件下载</p><p>下载后Add to Library。</p><h3 id="2-2-Runnable实现线程"><a href="#2-2-Runnable实现线程" class="headerlink" title="2.2 Runnable实现线程"></a>2.2 Runnable实现线程</h3><ol><li>创建类实现 <code>Runnable</code> 接口</li><li>创建 类的对象</li><li>将对象传入 <code>Thread()</code> 构造函数中</li><li>调用 Thread 实例的 start() </li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread3</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        <span class="comment">// 下面这两行，需要将Runnable对象传入Thread类</span></span><br><span class="line">        TestThread3 testThread3 = <span class="keyword">new</span> TestThread3();</span><br><span class="line">        <span class="keyword">new</span> Thread(testThread3).start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"主线程"</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"RRRRRRRRRRRRRRRRRRRR"</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="Thread-与-Runnable-对比"><a href="#Thread-与-Runnable-对比" class="headerlink" title="Thread 与 Runnable 对比"></a>Thread 与 Runnable 对比</h4><ul><li>继承 Thread 类：<ul><li>启动线程：子类对象.start()</li><li>不推荐使用：避免单继承局限性</li></ul></li><li>实现 Runnable 接口：<ul><li>启动线程：new Thread(对象) + <code>thread.start()</code></li><li>推荐使用：没有单继承局限性，方便同一个对象被多个线程使用</li></ul></li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210623102002126.png" alt="Runnable可以被重复使用"></p><p>Thread：基于继承；Runnable：基于组合；创建Thread比一个Runnable成本要昂贵一点。/</p><h3 id="实例：初识线程并发问题"><a href="#实例：初识线程并发问题" class="headerlink" title="实例：初识线程并发问题"></a>实例：初识线程并发问题</h3><p>卖票问题</p><ul><li><code>Thread.currentThread.getName()</code> ：得到当前正在执行的线程方法</li><li><code>Thread.sleep(200)</code> ：此线程暂停200ms</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread4</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        TestThread4 t = <span class="keyword">new</span> TestThread4();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(t, <span class="string">"小明"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t, <span class="string">"Bob"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(t, <span class="string">"牛牛"</span>).start();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) {</span><br><span class="line">            <span class="keyword">if</span> (ticketNums &lt;= <span class="number">0</span>) {</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 存在并发问题，票会超卖</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"拿到了"</span> + ticketNums-- + <span class="string">"张票"</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 加锁的话可以解决并发问题</span></span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            synchronized (this){</span></span><br><span class="line"><span class="comment">                System.out.println(Thread.currentThread().getName()+"拿到了"+ticketNums--+"张票");</span></span><br><span class="line"><span class="comment">            }*/</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里还没讲怎么解决，看之后的。</p><h3 id="实例：龟兔赛跑"><a href="#实例：龟兔赛跑" class="headerlink" title="实例：龟兔赛跑"></a>实例：龟兔赛跑</h3><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210623104229483.png" alt="龟兔赛跑问题"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Race</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String winner;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">            <span class="comment">// 兔子每隔10步，睡个觉</span></span><br><span class="line">            <span class="keyword">if</span>(Thread.currentThread().getName().equals(<span class="string">"兔子"</span>) &amp;&amp; i%<span class="number">10</span>==<span class="number">0</span> ){</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    Thread.sleep(<span class="number">1</span>);</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 跑步</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"跑了--&gt;"</span>+i+<span class="string">"步"</span>);</span><br><span class="line">            <span class="keyword">if</span> (gameOver(i)){</span><br><span class="line">                System.out.println(<span class="string">"Winner is "</span> + winner);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Race race = <span class="keyword">new</span> Race();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(race,<span class="string">"兔子"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(race,<span class="string">"乌龟"</span>).start();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断，如果有人先跑到100步，那么游戏结束</span></span><br><span class="line"><span class="comment">     * **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">gameOver</span><span class="params">(<span class="keyword">int</span> steps)</span></span>{</span><br><span class="line">        <span class="keyword">if</span> (winner == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">if</span>(steps &gt;= <span class="number">99</span>){</span><br><span class="line">                winner = Thread.currentThread().getName();</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="2-3-Callable接口实现"><a href="#2-3-Callable接口实现" class="headerlink" title="2.3 Callable接口实现"></a>2.3 Callable接口实现</h3><p>Callable其实相当于一个增强的Runnable，带有返回结果。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt; </span>{</span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCallable</span><span class="params">(String url, String name)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>{</span><br><span class="line">        TestCallable tc1 = <span class="keyword">new</span> TestCallable(<span class="string">"https://commons.apache.org/proper/commons-io/images/commons-logo.png"</span>, <span class="string">"1.png"</span>);</span><br><span class="line">        TestCallable tc2 = <span class="keyword">new</span> TestCallable(<span class="string">"https://commons.apache.org/proper/commons-io/images/io-logo-white.png"</span>, <span class="string">"2.png"</span>);</span><br><span class="line">        TestCallable tc3 = <span class="keyword">new</span> TestCallable(<span class="string">"http://www.apache.org/events/current-event-125x125.png"</span>, <span class="string">"3.png"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 主要就是这块，提交到线程池，然后使用Future获取返回结果并get</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">1</span>);</span><br><span class="line">        Future&lt;Boolean&gt; result1 = service.submit(tc1);</span><br><span class="line">        Future&lt;Boolean&gt; result2 = service.submit(tc2);</span><br><span class="line">        Future&lt;Boolean&gt; result3 = service.submit(tc3);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"result1 == "</span> +result1.get());</span><br><span class="line">        System.out.println(<span class="string">"result2 == "</span> +result2.get());</span><br><span class="line">        System.out.println(<span class="string">"result3 == "</span> +result3.get());</span><br><span class="line">        <span class="comment">// 最后需要关闭服务</span></span><br><span class="line">        service.shutdownNow();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// run方法负责调用下载方法</span></span><br><span class="line">        WebDownload webDownload = <span class="keyword">new</span> WebDownload();</span><br><span class="line">        webDownload.downloader(url, name);</span><br><span class="line">        System.out.println(<span class="string">"下载了文件，名为"</span> + name);</span><br><span class="line">        <span class="keyword">if</span>(name == <span class="keyword">null</span>){</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">WebDownload</span> </span>{</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url, String name)</span> </span>{</span><br><span class="line">            String path = <span class="string">"F:/AWork/Project/2021/JavaDataStructure/src/com/songx64/baselearn/threadlearn/kuangThread/"</span>;</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                FileUtils.copyURLToFile(<span class="keyword">new</span> URL(url), <span class="keyword">new</span> File(path+name));</span><br><span class="line">            } <span class="keyword">catch</span> (IOException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">                System.out.println(<span class="string">"IO异常，下载出错"</span>);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>继承Callable的时候会有个泛型，指定返回值的类型。</p><p>然后实现的是 <code>call()</code> 方法，带有返回值。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210623114458832.png" alt="Callable步骤"></p><h3 id="2-4-静态代理模式"><a href="#2-4-静态代理模式" class="headerlink" title="2.4 静态代理模式"></a>2.4 静态代理模式</h3><p>多线程的 Thread 和 Runnable 就是静态代理模式。</p><blockquote><p><a href="https://www.runoob.com/design-pattern/proxy-pattern.html">代理模式 | 菜鸟教程 (runoob.com)</a></p><p>在代理模式（Proxy Pattern）中，<strong>一个类代表另一个类的功能</strong>。这种类型的设计模式属于结构型模式。</p><p><strong>主要解决：</strong>在直接访问对象时带来的问题</p><p><strong>何时使用：</strong>想在访问一个类时做一些控制。</p><p><strong>如何解决：</strong>增加中间层。</p><p><strong>关键代码：</strong>实现与被代理类组合。</p></blockquote><p>这里举个例子：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210623152348219.png" alt="image-20210623152348219"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 静态代理模式总结;</span></span><br><span class="line"><span class="comment">// 真实对象和代理对象都要实现同一个接口</span></span><br><span class="line"><span class="comment">// 代理对象要代理真实角色</span></span><br><span class="line"><span class="comment">// 好处:</span></span><br><span class="line">    <span class="comment">// 代理对象可以做很多真实对象做不了的事情</span></span><br><span class="line">    <span class="comment">// 真实对象专注做自已的事情</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        WeddingCompany weddingCompany = <span class="keyword">new</span> WeddingCompany(<span class="keyword">new</span> You());</span><br><span class="line">        weddingCompany.HappyMarry();</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对比这个静态代理模式，和多线程的格式，可以看到多线程其实也是一样的</span></span><br><span class="line">        <span class="comment">// Thread 继承了 Runnable接口</span></span><br><span class="line">        <span class="keyword">new</span> WeddingCompany(<span class="keyword">new</span> You()).HappyMarry();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TestRunnable()).start();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//结婚接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Marry</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//你来结婚</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"结婚，Happy"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 婚庆公司，代理你做一些事情</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeddingCompany</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Marry target;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeddingCompany</span><span class="params">(Marry target)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span> </span>{</span><br><span class="line">        before();</span><br><span class="line">        <span class="comment">// 调用真实对象的方法</span></span><br><span class="line">        <span class="keyword">this</span>.target.HappyMarry();</span><br><span class="line">        after();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"结婚之前，布置现场"</span>);</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(<span class="string">"结婚之后，收拾残局"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="3-线程状态"><a href="#3-线程状态" class="headerlink" title="3. 线程状态"></a>3. 线程状态</h2><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210623165623780.png" alt="线程的五大状态"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210623165724644.png" alt="Java中的线程状态变化"></p><h3 id="3-1-停止线程-建议标志位"><a href="#3-1-停止线程-建议标志位" class="headerlink" title="3.1 停止线程 建议标志位"></a>3.1 停止线程 建议标志位</h3><ul><li>不推荐使用JDK提供的stop()、destroy()等方法。【已废弃】</li><li>推荐线程自己停止下来</li><li>建议使用一个标志位进行终止变量当flag=false，则终止线程运行。</li></ul><p>标志位的方式：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//测试stop</span></span><br><span class="line"><span class="comment">// 1.建议线程正常停止---&gt;利用次数,不建议死循环。</span></span><br><span class="line"><span class="comment">// 2.建议使用标志位---&gt;设置一个标志位</span></span><br><span class="line"><span class="comment">// 3.不要使用stop或者destroy等过时或者JDK不建议使用的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line">    <span class="comment">// 1.设置标志位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">// 2. 根据标志位判断，是否执行</span></span><br><span class="line">        <span class="keyword">while</span> (flag){</span><br><span class="line">            System.out.println(<span class="string">"Thread is Running --"</span> + i++);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 公共方法，修改标志位，停止线程</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myStop</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">this</span>.flag = <span class="keyword">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        TestStop t = <span class="keyword">new</span> TestStop();</span><br><span class="line">        <span class="keyword">new</span> Thread(t).start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 次数太少的话，子线程可能抢不到时间片</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Integer.MAX_VALUE/<span class="number">2</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"main--"</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(i == Integer.MAX_VALUE/<span class="number">400000</span>){</span><br><span class="line">                t.myStop();</span><br><span class="line">                System.out.println(<span class="string">"Stop At "</span> +i);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-2-线程休眠-sleep-int-ms"><a href="#3-2-线程休眠-sleep-int-ms" class="headerlink" title="3.2 线程休眠 sleep(int ms)"></a>3.2 线程休眠 sleep(int ms)</h3><p><code>sleep()</code></p><ul><li><code>sleep(1000)</code> ，休眠1000毫秒，也就是1s</li><li>会抛出 <code>InterruptedException</code></li><li>调用 sleep，线程进入阻塞状态；sleep 时间到达后，进入就绪状态</li><li>sleep 不会释放对象的锁，wait 会释放对象锁</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep</span></span>{</span><br><span class="line">    <span class="comment">// 模拟倒计时</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeCount</span><span class="params">(<span class="keyword">int</span> second)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        <span class="keyword">while</span> (second &gt; <span class="number">0</span>){</span><br><span class="line">            System.out.println(second--);</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印系统当前时间</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timePrinter</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        SimpleDateFormat dateFormat = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd hh:mm:ss"</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>){</span><br><span class="line">            System.out.println(dateFormat.format(<span class="keyword">new</span> Date(System.currentTimeMillis())));</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line"></span><br><span class="line">        TestSleep testSleep = <span class="keyword">new</span> TestSleep();</span><br><span class="line">        testSleep.timeCount(<span class="number">10</span>);</span><br><span class="line">        testSleep.timePrinter();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-3-线程礼让-yield"><a href="#3-3-线程礼让-yield" class="headerlink" title="3.3 线程礼让 yield()"></a>3.3 线程礼让 yield()</h3><ul><li>礼让线程，让当前正在执行的线程暂停，但不阻塞将线程</li><li>从运行状态转为就绪状态</li><li>让cpu重新调度，礼让不一定成功!看CPU心情</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestYield</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Runnable runnable = ()-&gt;{</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" 线程开始执行"</span>);</span><br><span class="line">            Thread.yield();</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">" 线程停止"</span>);</span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Thread(runnable,<span class="string">"线程A"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(runnable,<span class="string">"线程B"</span>).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>PS:我礼让就没成功过。。电脑的原因吗</p><h3 id="3-4-线程强制执行-join"><a href="#3-4-线程强制执行-join" class="headerlink" title="3.4 线程强制执行 join()"></a>3.4 线程强制执行 join()</h3><ul><li><code>join()</code> 合并线程，待此线程执行完之后，再执行其他线程，其他线程阻塞</li><li>可以想象成插队</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">"Join线程-------------"</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        TestJoin testJoin = <span class="keyword">new</span> TestJoin();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5000</span>; i++) {</span><br><span class="line">            <span class="comment">// 当主线程 200 的时候，让thread插队</span></span><br><span class="line">            <span class="keyword">if</span>(i == <span class="number">1000</span>){</span><br><span class="line">                thread.join();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">"Main线程 + "</span> + i);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-5-线程状态观测-getState"><a href="#3-5-线程状态观测-getState" class="headerlink" title="3.5 线程状态观测 getState()"></a>3.5 线程状态观测 getState()</h3><blockquote><p>JDK1.8文档：</p><p>public static enum Thread.State<br>extends Enum&lt;Thread.State&gt;<br>线程状态。线程可以处于以下状态之一：</p><ul><li><p>NEW<br><strong>尚未启动</strong>的线程处于此状态。</p></li><li><p>RUNNABLE<br>在Java虚拟机中<strong>执行</strong>的线程处于此状态。</p></li><li><p>BLOCKED<br>被<strong>阻塞</strong>等待监视器锁定的线程处于此状态。</p></li><li><p>WAITING<br>正在<strong>等待另一个线程</strong>执行特定动作的线程处于此状态。</p></li><li><p>TIMED_WAITING<br>正在<strong>等待另一个线程执行动作达到指定等待时间</strong>的线程处于此状态。</p></li><li><p>TERMINATED<br><strong>已退出</strong>的线程处于此状态。</p><p>一个线程可以在给定时间点处于一个状态。 这些状态是不反映任何操作系统线程状态的虚拟机状态。</p></li></ul></blockquote><p><strong><code>thread1.getState()</code> ：得到 thread1 的状态，上面的那几个值</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestState</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>{</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt;{</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) {</span><br><span class="line">                <span class="keyword">try</span> {</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                }</span><br><span class="line">                System.out.println(<span class="string">"///////"</span>);</span><br><span class="line">            }</span><br><span class="line">        });</span><br><span class="line"></span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        System.out.println(<span class="string">"start之前： "</span> + state);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(<span class="string">"start之后："</span> + state);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (state != Thread.State.TERMINATED){</span><br><span class="line">            <span class="comment">// 这里一定要更新</span></span><br><span class="line">            state = thread.getState();</span><br><span class="line">            System.out.println(state);</span><br><span class="line">            Thread.yield();</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(<span class="string">"线程死了！--"</span> + state);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 线程是一次性用品，死亡后不能再次启动</span></span><br><span class="line">        thread.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-6-线程优先级-getPriority"><a href="#3-6-线程优先级-getPriority" class="headerlink" title="3.6 线程优先级 getPriority()"></a>3.6 线程优先级 getPriority()</h3><ul><li>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。</li><li>线程的优先级用数字表示，范围从1~10.<br><code>Thread.MIN_PRIORITY = 1;</code><br><code>Thread.MAX_PRIORITY = 10;</code><br><code>Thread.NORM_PRIORITY = 5;</code></li><li>使用以下方式改变或获取优先级<ul><li><strong><code>getPriority() </code> :获取优先级</strong></li><li><strong><code>setPriority(int xxx)</code> ： 设置优先级</strong></li></ul></li></ul><p>线程执不执行还是得看CPU，优先级高的不一定先执行。但是优先级高的权重大，更可能先执行。</p><ul><li>性能倒置：优先级低只是意味着获得调度的概率低，并不是优先级低就不会被调用了，这都是看CPU的调度</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPriority</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" --&gt; "</span> + Thread.currentThread().getPriority() );</span><br><span class="line">        MyPriority myPriority = <span class="keyword">new</span> MyPriority();</span><br><span class="line"></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myPriority,<span class="string">"t1"</span>);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myPriority,<span class="string">"t2"</span>);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(myPriority,<span class="string">"t3"</span>);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(myPriority,<span class="string">"t4"</span>);</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(myPriority,<span class="string">"t5"</span>);</span><br><span class="line"></span><br><span class="line">        t1.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.setPriority(<span class="number">2</span>);</span><br><span class="line">        t3.setPriority(<span class="number">3</span>);</span><br><span class="line">        t4.setPriority(<span class="number">4</span>);</span><br><span class="line">        t5.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line"></span><br><span class="line">        t4.start();</span><br><span class="line">        t2.start();</span><br><span class="line">        t1.start();</span><br><span class="line">        t3.start();</span><br><span class="line">        t5.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPriority</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">" --&gt; "</span> + Thread.currentThread().getPriority() );</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-7-守护线程-setDaemon-boolean"><a href="#3-7-守护线程-setDaemon-boolean" class="headerlink" title="3.7 守护线程 setDaemon(boolean)"></a>3.7 守护线程 setDaemon(boolean)</h3><ul><li>线程分为用户线程和守护线程</li><li>虚拟机必须确保用户线程执行完毕：如 <code>main</code> 线程</li><li>虚拟机不用等待守护线程执行完毕：如后台记录操作日志、监控内存、垃圾回收GC线程等..</li></ul><p><strong><code>thread1.setDaemon(true)</code> ：将线程 thread1  设为守护线程</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDaemon</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Bless bless = <span class="keyword">new</span> Bless();</span><br><span class="line">        NormalT normalT = <span class="keyword">new</span> NormalT();</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(bless);</span><br><span class="line">        <span class="comment">// 默认false表示为正常线程，true表示设为守护线程</span></span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(normalT);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread.start();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 可以看到，主线程和Normal线程结束之后，程序结束。守护线程死循环也终止了</span></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bless</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>){</span><br><span class="line">            System.out.println(<span class="string">"God Bless You"</span>);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NormalT</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) {</span><br><span class="line">            System.out.println(<span class="string">"此线程存活"</span>);</span><br><span class="line">        }</span><br><span class="line">        System.out.println(<span class="string">"此线程死亡"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="4-线程同步（重点）"><a href="#4-线程同步（重点）" class="headerlink" title="4. 线程同步（重点）"></a>4. 线程同步（重点）</h2><p>并发：同一个对象被多个线程<strong>同时操作</strong></p><p>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象。这时候我们就需要线程同步。</p><p>线程同步其实就是一种<strong>等待机制</strong>，多个需要同时访问此对象的线程进入<strong>这个对象的等待池形成队列</strong>，等待前面线程使用完毕，下一个线程再使用。</p><ul><li>队列 + 锁，解决线程同步的安全性。</li></ul><p><strong>synchronized，排他锁独占资源。</strong></p><ul><li>使用锁可能会引起问题：<ul><li>一个线程持有锁会导致其他所有需要此锁的<strong>线程挂起</strong>;</li><li>在多线程竞争下,加锁﹐释放锁会导致比较多的上下文切换和调度延时,引起<strong>性能问题</strong>;</li><li>如果一个优先级高的线程等待一个优先级低的线程释放锁会导致<strong>优先级倒置</strong>﹐引起性能问题．</li></ul></li></ul><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>产生死锁的四个必要条件:<br>1．互斥条件:一个资源每次只能被一个进程使用。<br>2．请求与保持条件:一个进程因请求资源而阻塞时，对已获得的资源保持不放。3．不剥夺条件:进程已获得的资源，在末使用完之前，不能强行剥夺。<br>4.循环等待条件:若干进程之间形成一种头尾相接的循环等待资源关系。</p><p>上面列出了死锁的四个必要条件，我们只要想办法破其中的任意一个或多个条件就可以避免死锁发生</p><p>写个死锁案例：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Integer i1 = <span class="number">10</span>;</span><br><span class="line">        Integer i2 = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread(i1, i2, <span class="number">0</span>), <span class="string">"线程1"</span>);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread(i1, i2, <span class="number">1</span>), <span class="string">"线程2"</span>);</span><br><span class="line"></span><br><span class="line">        thread.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer i1;</span><br><span class="line">    <span class="keyword">private</span> Integer i2;</span><br><span class="line">    <span class="keyword">private</span> Integer choice;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyThread</span><span class="params">(Integer i1, Integer i2, Integer choice)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.i1 = i1;</span><br><span class="line">        <span class="keyword">this</span>.i2 = i2;</span><br><span class="line">        <span class="keyword">this</span>.choice = choice;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 用一个choice，分别先拿不同资源</span></span><br><span class="line">        <span class="keyword">if</span> (choice == <span class="number">0</span>) {</span><br><span class="line">            <span class="comment">// 先拿1，再拿2</span></span><br><span class="line">            <span class="keyword">synchronized</span> (i1) {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"得到了i1: "</span> + i1);</span><br><span class="line">                <span class="comment">// 将两个这个拿到外层，可以解决死锁</span></span><br><span class="line">                <span class="keyword">synchronized</span> (i2) {</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"得到了i2: "</span> + i2);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        } <span class="keyword">else</span> {</span><br><span class="line">            <span class="comment">// 先拿2，再拿1</span></span><br><span class="line">            <span class="keyword">synchronized</span> (i2) {</span><br><span class="line">                System.out.println(Thread.currentThread().getName() + <span class="string">"得到了i2: "</span> + i2);</span><br><span class="line">                <span class="keyword">synchronized</span> (i1) {</span><br><span class="line">                    System.out.println(Thread.currentThread().getName() + <span class="string">"得到了i1: "</span> + i1);</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>将最后一段的代码改为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">// 用一个choice，分别先拿不同资源</span></span><br><span class="line">    <span class="keyword">if</span> (choice == <span class="number">0</span>) {</span><br><span class="line">        <span class="comment">// 先拿1，再拿2</span></span><br><span class="line">        <span class="keyword">synchronized</span> (i1) {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"得到了i1: "</span> + i1);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">synchronized</span> (i2) {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"得到了i2: "</span> + i2);</span><br><span class="line">        }</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="comment">// 先拿2，再拿1</span></span><br><span class="line">        <span class="keyword">synchronized</span> (i2) {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"得到了i2: "</span> + i2);</span><br><span class="line">        }</span><br><span class="line">    <span class="keyword">synchronized</span> (i1) {</span><br><span class="line">            System.out.println(Thread.currentThread().getName() + <span class="string">"得到了i1: "</span> + i1);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这样就能避免死锁了。为啥呢？我自己理解的，是锁升级到重量级锁了，阻塞了其中的一个线程。</p><h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><p>JUC，就是 <code>import java.util.concurrent</code> 类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLock</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        TestLock2 testLock2 = <span class="keyword">new</span> TestLock2();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2,<span class="string">"小明"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2,<span class="string">"小二"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testLock2,<span class="string">"小王"</span>).start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLock2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock reentrantLock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> tirckNums = <span class="number">10</span>;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>){</span><br><span class="line">            <span class="comment">// 加锁</span></span><br><span class="line">            reentrantLock.lock();</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                <span class="keyword">if</span> (tirckNums &gt; <span class="number">0</span>){</span><br><span class="line">                    <span class="keyword">try</span> {</span><br><span class="line">                        Thread.sleep(<span class="number">500</span>);</span><br><span class="line">                    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    }</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;"</span>+tirckNums--);</span><br><span class="line">                }<span class="keyword">else</span> {</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                }</span><br><span class="line">            }<span class="keyword">finally</span> {</span><br><span class="line">                <span class="comment">// 解锁</span></span><br><span class="line">                reentrantLock.unlock();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>手动锁，自己调用 <code>lock</code> 和 <code>unlock</code> ，锁代码块。</p><ul><li>Lock是<strong>显式锁</strong>（手动开启和关闭锁，别忘记关闭锁) ；synchronized是<strong>隐式锁</strong>，出了作用域自动释放</li><li>Lock只有<strong>代码块锁</strong>，synchronized有<strong>代码块锁和方法锁</strong></li><li>使用Lock锁，JVM将花费较少的时间来调度线程，<strong>性能</strong>更好。并且具有更好的扩展性(提供更多的子类)</li><li>优先使用顺序：Lock &gt;同步代码块(已经进入了方法体，分配了相应资源)&gt;同步方法（在方法体之外)</li></ul><h2 id="5-线程通信问题"><a href="#5-线程通信问题" class="headerlink" title="5. 线程通信问题"></a>5. 线程通信问题</h2><h3 id="5-1-生产者消费者问题"><a href="#5-1-生产者消费者问题" class="headerlink" title="5.1  生产者消费者问题"></a>5.1  生产者消费者问题</h3><blockquote><p>可以观看：<a href="https://www.jianshu.com/p/e29632593057">一篇文章，让你彻底弄懂生产者–消费者问题 - 简书 (jianshu.com)</a> ，使用了3种不同的方法。</p></blockquote><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210625203857582.png" alt="生产者消费者问题"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210625204026475.png" alt="问题分析"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210625204128447.png" alt="Java方法"></p><ol><li><p>并发协作模型“生产者Ⅰ消费者模式”—&gt;管程法    </p><ul><li>生产者:负责生产数据的模块(可能是方法﹐对象﹐线程﹐进程);</li><li>消费者:负责处理数据的模块(可能是方法﹐对象﹐线程,进程);</li><li>缓冲区∶消费者不能直接使用生产者的数据﹐他们之间有个“缓冲区</li></ul><p> 生产者将生产好的数据<strong>放入缓冲区 <strong>，消费者从缓冲区</strong>拿出数据</strong></p></li><li><p>并发协作模型“生产者/消费者模式”—&gt;信号灯法</p><p> 就是一个标志位</p></li></ol><h3 id="5-2-管程法"><a href="#5-2-管程法" class="headerlink" title="5.2 管程法"></a>5.2 管程法</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPC</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SynContainer synContainer = <span class="keyword">new</span> SynContainer();</span><br><span class="line"></span><br><span class="line">        Producer producer = <span class="keyword">new</span> Producer(synContainer);</span><br><span class="line">        Consumer consumer =<span class="keyword">new</span> Consumer(synContainer);</span><br><span class="line"></span><br><span class="line">        producer.start();</span><br><span class="line">        consumer.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line"></span><br><span class="line">    SynContainer synContainer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer</span><span class="params">(SynContainer synContainer)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.synContainer = synContainer;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">// 生产</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">            synContainer.push(<span class="keyword">new</span> Production(i));</span><br><span class="line">            System.out.println(<span class="string">"生产者生产了--&gt; "</span>+i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    SynContainer synContainer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer</span><span class="params">(SynContainer synContainer)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.synContainer = synContainer;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) {</span><br><span class="line">            <span class="keyword">int</span> id = synContainer.pop().id;</span><br><span class="line">            System.out.println(<span class="string">"消费者消费了--&gt; "</span> + id);</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Production</span> </span>{</span><br><span class="line">    <span class="comment">// 产品编号</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Production</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓冲区</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynContainer</span> </span>{</span><br><span class="line">    <span class="comment">// 缓冲区容器，总容量</span></span><br><span class="line">    Production[] productions = <span class="keyword">new</span> Production[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">// 当前存在的容量</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生产者放入产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Production production)</span> </span>{</span><br><span class="line">        <span class="comment">// 缓冲区已满</span></span><br><span class="line">        <span class="keyword">if</span> (count == productions.length) {</span><br><span class="line">            <span class="comment">// 缓冲区已满，生产者停止生产；</span></span><br><span class="line">            <span class="comment">// 通知消费者，进行消费</span></span><br><span class="line">            <span class="keyword">try</span>{</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            }<span class="keyword">catch</span> (Exception e){</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">// 放入</span></span><br><span class="line">        productions[count] = production;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">// 生产出来了，通知消费者，可以立即消费</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费者取走产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Production <span class="title">pop</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">if</span> (count == <span class="number">0</span>){</span><br><span class="line">            <span class="comment">// 通知生产者生产</span></span><br><span class="line">            <span class="keyword">try</span>{</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            }<span class="keyword">catch</span> (InterruptedException e){</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出</span></span><br><span class="line">        count--;</span><br><span class="line">        Production production = productions[count];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 取出之后，缓冲区有空格了</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> production;</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p><a href="https://www.cnblogs.com/xidongyu/p/10891303.html">Java中的管程 - 被罚站的树 - 博客园 (cnblogs.com)</a></p><p>Java 采用的是管程技术，synchronized 关键字及 wait()、notify()、notifyAll() 这三个方法都是管程的组成部分。而<strong>管程和信号量是等价的，所谓等价指的是用管程能够实现信号量，也能用信号量实现管程</strong>。但是<strong>管程利用OOP的封装特性解决了信号量在工程实践上的复杂性问题</strong>，因此java采用管理机制。</p><p>所谓<strong>管程，指的是管理共享变量以及对其操作过程，让它们支持并发访问</strong>。翻译为 Java 领域的语言，就是管理类的成员变量和成员方法，让这个类是线程安全的。</p><p>有一点需要再次提醒，对于 MESA 管程来说，有一个编程范式，就是==需要在一个 while 循环里面调用 wait()==。<strong>这个是 MESA 管程特有的</strong>。</p></blockquote><h3 id="5-3-信号灯法"><a href="#5-3-信号灯法" class="headerlink" title="5.3 信号灯法"></a>5.3 信号灯法</h3><blockquote><p><a href="https://www.cnblogs.com/freebird92/p/6236415.html">JAVA并发框架之Semaphore实现生产者与消费者模型 - 陈峰 - 博客园 (cnblogs.com)</a></p></blockquote><p>锁和 <strong>信号量（Semaphore）</strong> 是实现多线程同步的两种常用的手段。</p><p>信号量需要初始化一个许可值，许可值可以大于0，也可以小于0，也可以等于0.</p><ul><li>如果大于0，表示，还有许可证可以发放，线程不会被阻塞；</li><li>如果小于或者等于0，表示，没有许可证可以发放了，线程被阻塞住了。   </li></ul><p>它有两个常用的操作：</p><ul><li><code>acquire()</code> 申请许可证，如果有，就可以获得，如果没有就等待了。相当于减法。</li><li><code>release()</code> 归还许可证，保证循环使用。相当于加法。</li></ul><p> 看一个例子，就会明白了，还是实现上次的那个生产者和消费者的例子。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songx64.baselearn.threadlearn.kuangThread.gaoji;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2021/6/26,上午 11:03</span></span><br><span class="line"><span class="comment"> * 信号量机制 Semaphore</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SongX64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPC2</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SynContainer2 synContainer2 = <span class="keyword">new</span> SynContainer2();</span><br><span class="line">        Thread p1 = <span class="keyword">new</span> Producer2(synContainer2);</span><br><span class="line">        Thread c1 = <span class="keyword">new</span> Consumer2(synContainer2);</span><br><span class="line">        Thread c2 = <span class="keyword">new</span> Consumer2(synContainer2);</span><br><span class="line"></span><br><span class="line">        p1.start();</span><br><span class="line">        c1.start();</span><br><span class="line">        c2.start();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 产品</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Production2</span> </span>{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Production2</span><span class="params">(<span class="keyword">int</span> id)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生产者</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    SynContainer2 synContainer2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Producer2</span><span class="params">(SynContainer2 synContainer2)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.synContainer2 = synContainer2;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) {</span><br><span class="line">            synContainer2.push(<span class="keyword">new</span> Production2(i));</span><br><span class="line">            System.out.println(<span class="string">"生产了--&gt;"</span> + i);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>{</span><br><span class="line">    SynContainer2 synContainer2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Consumer2</span><span class="params">(SynContainer2 synContainer2)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.synContainer2 = synContainer2;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) {</span><br><span class="line">            <span class="keyword">int</span> id = synContainer2.pop().id;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"消费了&lt;--"</span> + id);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 缓冲区</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynContainer2</span> </span>{</span><br><span class="line">    <span class="comment">// 容器</span></span><br><span class="line">    LinkedList&lt;Production2&gt; production2s = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">    <span class="comment">// 互斥信号量，保证安全性</span></span><br><span class="line">    Semaphore mutex = <span class="keyword">new</span> Semaphore(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 为满信号量，初始是最大容量</span></span><br><span class="line">    Semaphore isFull = <span class="keyword">new</span> Semaphore(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">// 为空信号量</span></span><br><span class="line">    Semaphore isEmpty = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 生产者生产，为满阻塞</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Production2 production2)</span> </span>{</span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            <span class="comment">//大于0，就放行</span></span><br><span class="line">            <span class="comment">//acquire，就是减操作，如果 &lt;=0，就阻塞</span></span><br><span class="line">            <span class="comment">//release，就是加操作，如果 &gt;0，就不会被阻塞</span></span><br><span class="line">            isFull.acquire();</span><br><span class="line">            <span class="comment">// 添加操作是互斥的，因为占用了缓冲区</span></span><br><span class="line">            mutex.acquire();</span><br><span class="line">            <span class="keyword">int</span> i = isFull.availablePermits();</span><br><span class="line">            production2s.add(production2);</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            <span class="comment">// 释放互斥锁</span></span><br><span class="line">            mutex.release();</span><br><span class="line">            <span class="comment">// 生产完成后，让空的增加，可以进行消费</span></span><br><span class="line">            isEmpty.release();</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 消费者消费，为空阻塞</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Production2 <span class="title">pop</span><span class="params">()</span> </span>{</span><br><span class="line">        Production2 temp = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">// 为空减少一个信号量，如果是空的0再减就阻塞了；</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> {</span><br><span class="line">            isEmpty.acquire();</span><br><span class="line">            mutex.acquire();</span><br><span class="line">            temp = production2s.removeLast();</span><br><span class="line">        } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        } <span class="keyword">finally</span> {</span><br><span class="line">            mutex.release();</span><br><span class="line">            isFull.release();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>写的有点乱。。。但是知道Semaphore的用法就行了</p><h2 id="6-高级主题"><a href="#6-高级主题" class="headerlink" title="6.高级主题"></a>6.高级主题</h2><h3 id="6-1线程池"><a href="#6-1线程池" class="headerlink" title="6.1线程池"></a>6.1线程池</h3><ul><li>背景:经常创建和销毁、使用量特别大的资源，比如并发情况下的线程，对<strong>性能</strong>影响很大。</li><li>思路:提前创建好多个线程，放入线程池中，使用时直接获取，使用完放回池中。可以避免频繁创建销毁、实现重复利用。类似生活中的公共交通工具。</li><li>好处:<ul><li>提高响应速度(减少了创建新线程的时间)</li><li>降低资源消耗（重复利用线程池中线程，不需要每次都创建)</li><li>便于线程管理(….)<ul><li>corePoolSize:核心池的大小</li><li>maximumPoolSize:最大线程数</li><li>keepAliveTime:线程没有任务时最多保持多长时间后会终止</li></ul></li></ul></li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210626121844174.png" alt="Java线程池类"></p><p>简单使用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span> </span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.1 手动创建线程池（建议），指定参数</span></span><br><span class="line">        <span class="comment">// 参数：核心线程数，最大线程数，核心线程外的工作线程存活时间，时间单位，阻塞队列</span></span><br><span class="line">        ThreadPoolExecutor executorService = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">                <span class="number">10</span>,</span><br><span class="line">                <span class="number">20</span>,</span><br><span class="line">                <span class="number">100</span>,</span><br><span class="line">                TimeUnit.SECONDS,</span><br><span class="line">                <span class="keyword">new</span> LinkedBlockingDeque&lt;&gt;());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.2 自动创建线程池（不建议），10个核心线程/最大线程</span></span><br><span class="line">        <span class="comment">//ExecutorService executorService = Executors.newFixedThreadPool(10);</span></span><br><span class="line"></span><br><span class="line">        executorService.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        executorService.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">        System.out.println(Thread.currentThread().getName());</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java单例模式</title>
      <link href="2021/06/24/Java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>2021/06/24/Java%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Java单例模式"><a href="#Java单例模式" class="headerlink" title="Java单例模式"></a>Java单例模式</h1><blockquote><p><a href="https://www.runoob.com/design-pattern/singleton-pattern.html">单例模式 | 菜鸟教程 (runoob.com)</a></p></blockquote><h2 id="单例模式介绍"><a href="#单例模式介绍" class="headerlink" title="单例模式介绍"></a>单例模式介绍</h2><ul><li>创建型模式</li><li>一个类有且只有一个对象</li></ul><p>要点：</p><ul><li>构造函数私有化</li><li>类返回静态的一个对象</li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/62576915-36E0-4B67-B078-704699CA980A.jpg" alt="单例模式的 UML 图"></p><h2 id="Java几种实现方式"><a href="#Java几种实现方式" class="headerlink" title="Java几种实现方式"></a>Java几种实现方式</h2><p>首先提一下<strong>懒汉模式</strong>与<strong>饿汉模式</strong>：</p><ul><li>懒汉：需要的时候才创建</li><li>饿汉：上来就直接创建</li></ul><p>然后就是多线程是否安全。<br>这里的线程安全是指，多线程可能创建多个单例对象。</p><h3 id="1-最简单的懒汉模式"><a href="#1-最简单的懒汉模式" class="headerlink" title="1.最简单的懒汉模式"></a>1.最简单的懒汉模式</h3><ul><li>懒汉</li><li>线程不安全</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>{</span><br><span class="line">    <span class="comment">// 静态实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="comment">// 私有化构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>{}</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 一个返回实例的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(instace == <span class="keyword">null</span>){</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-懒汉模式方法加锁"><a href="#2-懒汉模式方法加锁" class="headerlink" title="2.懒汉模式方法加锁"></a>2.懒汉模式方法加锁</h3><ul><li>懒汉</li><li>线程安全</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstace</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>){</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>直接给get方法加了锁，可能性能较低。</p><h3 id="3-双重验证"><a href="#3-双重验证" class="headerlink" title="3. 双重验证"></a>3. 双重验证</h3><p>DCL：double-check locking</p><ul><li>懒汉</li><li>线程安全</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>{</span><br><span class="line">    <span class="comment">// volatile禁止指令重排</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="comment">// 双重验证</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="keyword">null</span>){</span><br><span class="line">            <span class="comment">// 对类加锁</span></span><br><span class="line">            <span class="keyword">synchronized</span>(Singleton.class){</span><br><span class="line">                <span class="comment">// 第二层验证，防止通过第一个判断的，阻塞中的第二个线程，得到锁后再次new</span></span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="keyword">null</span>){</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                }</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-饿汉式"><a href="#4-饿汉式" class="headerlink" title="4. 饿汉式"></a>4. 饿汉式</h3><ul><li>饿汉</li><li>线程安全</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>{</span><br><span class="line">    <span class="comment">// 饿汉直接创建对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>{}</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>上来就创建，浪费内存；容易产生垃圾对象。使用了 <strong>classloader 机制</strong>来保证了线程安全。</p><h3 id="5-静态内部类"><a href="#5-静态内部类" class="headerlink" title="5.静态内部类"></a>5.静态内部类</h3><ul><li>懒汉</li><li>线程安全</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>{</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>{}</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 一个static内部类</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonHolder</span></span>{</span><br><span class="line">        <span class="comment">// final关键字，并新建</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singlton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// get函数直接返回内部类成员</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="title">getInstance</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> <strong>SingletonHolder 类没有被主动使用</strong>，只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化  instance。</p><h3 id="6-枚举"><a href="#6-枚举" class="headerlink" title="6.枚举"></a>6.枚举</h3><p>jdk1.5之后添加了enmu；</p><ul><li>饿汉</li><li>线程安全</li></ul><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> enmu Singleton{</span><br><span class="line">    INSTANCE;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>{</span><br><span class="line">        System.out.println(<span class="string">"Do Something！"</span>);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>不会被反射机制破解。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>一般直接使用饿汉式；</p><p>如要使用 <strong>懒汉式</strong> 则一般建议使用 <strong>静态内部类</strong> 的方法；</p><p>有特殊要求则使用 <strong>双重验证</strong> 方式；</p><p>如涉及 <strong>反序列化</strong> 则使用 <strong>枚举</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的锁</title>
      <link href="2021/06/17/Java%E4%B8%AD%E7%9A%84%E9%94%81/"/>
      <url>2021/06/17/Java%E4%B8%AD%E7%9A%84%E9%94%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p><a href="https://zhuanlan.zhihu.com/p/71156910">通俗易懂 悲观锁、乐观锁、可重入锁、自旋锁、偏向锁、轻量/重量级锁、读写锁、各种锁及其Java实现！ - 知乎 (zhihu.com)</a></p></blockquote><p>锁分类</p><ul><li>悲观锁，乐观锁</li><li>可重入锁</li><li>可中断锁</li><li>公平锁，非公平锁</li><li>读锁(共享锁)，写锁(排他锁/互斥锁)</li><li>自旋锁</li></ul><h2 id="一、悲观锁与乐观锁"><a href="#一、悲观锁与乐观锁" class="headerlink" title="一、悲观锁与乐观锁"></a>一、悲观锁与乐观锁</h2><ul><li><p>悲观锁：认为数据随时都可能更改，操作之前先加锁，别的人都不能获取此数据。</p></li><li><p>乐观锁：认为数据一般不会被更改，操作的时候会检查数据是否更新，发现数据变了，重新读取重新进行操作。</p></li></ul><p><strong>悲观锁阻塞事务，乐观锁回滚重试</strong></p><h2 id="二、乐观锁基础——CAS"><a href="#二、乐观锁基础——CAS" class="headerlink" title="二、乐观锁基础——CAS"></a>二、乐观锁基础——CAS</h2><p>CAS，就是比较并替换，Compare And Swap 。</p><p>每一个CAS操作过程都包含3个运算参数：一个内存地址V（当前值），一个期望的值A（旧值）和一个新值B。</p><p>CAS的基本思路就是，如果内存地址V上的值和期望的值A相等，则给其赋予新值B，否则不做任何事儿。</p><p>CAS就是在一个循环里不断的做CAS操作，直到成功为止。</p><p>比如一个基于CAS实现更新的例子（伪代码）：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>{</span><br><span class="line">    oldValue = V.get(); <span class="comment">//读取共享变量V的旧值</span></span><br><span class="line">    newValue = calculate(oldValue); <span class="comment">// 计算变量V的新值</span></span><br><span class="line">} <span class="keyword">while</span>(!compareAndSwap(V, oldValue, <span class="keyword">new</span> Value));</span><br><span class="line"><span class="comment">// 在while条件中调用更新，更新成功则true失败则重试</span></span><br></pre></td></tr></tbody></table></figure><p>CAS是一个CPU原子指令。</p><p>因为整个过程中并没有“加锁”和“解锁”操作，因此乐观锁策略也被称为无锁编程。换句话说，<strong>乐观锁其实不是“锁”，它仅仅是一个循环重试CAS的算法而已！</strong></p><h2 id="三、自旋锁"><a href="#三、自旋锁" class="headerlink" title="三、自旋锁"></a>三、自旋锁</h2><p>有一种锁叫自旋锁。所谓自旋，说白了就是一个 while(true) 无限循环。</p><p>刚刚的乐观锁就有类似的无限循环操作，那么它是自旋锁吗？</p><p>不是。尽管<strong>自旋与 while(true) 的操作是一样的，但还是应该将这两个术语分开</strong>。“自旋”这两个字，特指自旋锁的自旋。</p><h2 id="四、synchronized锁升级：偏向锁-→-轻量级锁-→-重量级锁"><a href="#四、synchronized锁升级：偏向锁-→-轻量级锁-→-重量级锁" class="headerlink" title="四、synchronized锁升级：偏向锁 → 轻量级锁 → 重量级锁"></a>四、synchronized锁升级：偏向锁 → 轻量级锁 → 重量级锁</h2><h3 id="锁升级总结"><a href="#锁升级总结" class="headerlink" title="锁升级总结"></a>锁升级总结</h3><p>自己整理了一个流程图：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210617220417629.png" alt="synchronized锁升级/锁膨胀"></p><p>synchronized锁只会升级，不会降级。</p><ul><li>无锁（即CAS操作）</li><li>偏向锁（偏向于一个进程，发生竞争则升级）</li><li>轻量级锁（自旋锁，自旋次数达到阈值默认10则升级）</li><li>重量级锁</li></ul><p>前面提到，synchronized关键字就像是汽车的自动档，现在详细讲这个过程。一脚油门踩下去，synchronized会从无锁升级为偏向锁，再升级为轻量级锁，最后升级为重量级锁，就像自动换挡一样。</p><h3 id="无锁"><a href="#无锁" class="headerlink" title="无锁"></a>无锁</h3><p>无锁的特点就是修改操作在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。也就是CAS（CAS是基于无锁机制实现的）。</p><h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。</p><p>偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。</p><h3 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h3><p>但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。</p><h3 id="重量级锁"><a href="#重量级锁" class="headerlink" title="重量级锁"></a>重量级锁</h3><p>如果发生竞争，其他竞争线程会阻塞挂起，而不是忙等，直到被唤醒。</p><h3 id="其他关于synchronized"><a href="#其他关于synchronized" class="headerlink" title="其他关于synchronized"></a>其他关于synchronized</h3><blockquote><p><a href="https://my.oschina.net/javaFamily/blog/4282524">死磕synchronized底层实现 - 敖丙 - OSCHINA - 中文开源技术交流社区</a></p></blockquote><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/007S8ZIlgy1gevjajeicqj30vv0q1784.jpg" alt="我git上的脑图我每次写完我都会重新更新，大家可以没事去看看。"></p><h2 id="五、可重入锁（递归锁）"><a href="#五、可重入锁（递归锁）" class="headerlink" title="五、可重入锁（递归锁）"></a>五、可重入锁（递归锁）</h2><p>当前线程持有锁，当前线程再次获取锁，可以得到，那就是可重入锁。</p><p>Java里只要以Reentrant开头命名的锁都是可重入锁，而且JDK提供的所有现成的Lock实现类，包括synchronized关键字锁都是可重入的。</p><p>StampedLock是不可重入锁。</p><h2 id="六、公平锁、非公平锁"><a href="#六、公平锁、非公平锁" class="headerlink" title="六、公平锁、非公平锁"></a>六、公平锁、非公平锁</h2><p>如果多个线程申请一把公平锁，那么当锁释放的时候，<strong>先申请的先得到</strong>，非常公平。</p><p>显然如果是非公平锁，<strong>后申请的线程可能先获取到锁</strong>，是随机或者按照其他优先级排序的。</p><p>ReentrantLock可以传入参数指定是否公平锁。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/v2-7a4a72fe7ace46095cd3ca2e6c5212d9_r.jpg" alt="公平锁参数"></p><p>synchronized是非公平锁。</p><h2 id="七、可中断锁"><a href="#七、可中断锁" class="headerlink" title="七、可中断锁"></a>七、可中断锁</h2><p>这里的关键是理解什么是中断。<strong>Java并没有提供任何直接中断某线程的方法，只提供了中断机制</strong>。何谓“中断机制”？线程A向线程B发出“请你停止运行”的请求（线程B也可以自己给自己发送此请求），但线程B并不会立刻停止运行，而是自行选择合适的时机以自己的方式响应中断，也可以直接忽略此中断。也就是说，<strong>Java的中断不能直接终止线程，而是需要被中断的线程自己决定怎么处理</strong>。这好比是父母叮嘱在外的子女要注意身体，但子女是否注意身体，怎么注意身体则完全取决于自己。</p><p>回到锁的话题上来，如果线程A持有锁，线程B等待获取该锁。由于线程A持有锁的时间过长，线程B不想继续等待了，我们可以让线程B中断自己或者在别的线程里中断它，这种就是可中断锁。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Lock接口 */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>; <span class="comment">// 拿不到锁就一直等，拿到马上返回。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>; <span class="comment">// 拿不到锁就一直等，如果等待时收到中断请求，则需要处理InterruptedException。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>; <span class="comment">// 无论拿不拿得到锁，都马上返回。拿到返回true，拿不到返回false。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>; <span class="comment">// 同上，可以自定义等待的时间。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Condition <span class="title">newCondition</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="八、读写锁、共享锁、互斥锁"><a href="#八、读写锁、共享锁、互斥锁" class="headerlink" title="八、读写锁、共享锁、互斥锁"></a>八、读写锁、共享锁、互斥锁</h2><ul><li>读锁，共享锁。</li><li>写锁，排他锁，互斥锁。</li></ul><p>读锁，写锁，都是悲观锁。</p><p>JDK提供的唯一一个 <code>ReadWriteLock</code> 接口实现类是 <code>ReentrantReadWriteLock</code> 。看名字就知道，它不仅提供了读写锁，而是都是可重入锁。 除了两个接口方法以外，<code>ReentrantReadWriteLock</code>还提供了一些便于外界监控其内部工作状态的方法，这里就不一一展开。</p><h2 id="九、Java悲观锁乐观锁"><a href="#九、Java悲观锁乐观锁" class="headerlink" title="九、Java悲观锁乐观锁"></a>九、Java悲观锁乐观锁</h2><p><strong>我们在Java里使用的各种锁，几乎全都是悲观锁</strong>。</p><p>synchronized从偏向锁、轻量级锁到重量级锁，全是悲观锁。</p><p>JDK提供的Lock实现类全是悲观锁。</p><p>其实只要有“锁对象”出现，那么就一定是悲观锁。因为乐观锁不是锁，而是一个在循环里尝试CAS的算法。</p><p>那JDK并发包里到底有没有乐观锁呢？</p><p>有。<code>java.util.concurrent.atomic</code>包里面的原子类都是利用乐观锁实现的。</p><p>问题：CAS与自旋的区别？也就是无锁和轻量级锁/自旋锁的区别？</p><p>答：貌似懂了，举个例子，修改变量值：CAS是不断读取变量值，并尝试操作；而自旋锁是不断检查修改值的这段代码锁是否可获取，并不去读具体的值。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联合索引与最左原则</title>
      <link href="2021/06/16/%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95%E4%B8%8E%E6%9C%80%E5%B7%A6%E5%8E%9F%E5%88%99/"/>
      <url>2021/06/16/%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95%E4%B8%8E%E6%9C%80%E5%B7%A6%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="联合索引了解不，最左侧匹配原则是啥？"><a href="#联合索引了解不，最左侧匹配原则是啥？" class="headerlink" title="联合索引了解不，最左侧匹配原则是啥？"></a>联合索引了解不，最左侧匹配原则是啥？</h1><hr><blockquote><ol><li><a href="https://www.cnblogs.com/softidea/p/5977860.html">mysql联合索引 - 沧海一滴 - 博客园 (cnblogs.com)</a></li><li><a href="https://www.cnblogs.com/-mrl/p/13230006.html">MYSQL | 最左匹配原则 - 一个人的孤独自白 - 博客园 (cnblogs.com)</a></li></ol></blockquote><h2 id="联合索引"><a href="#联合索引" class="headerlink" title="联合索引"></a>联合索引</h2><p>联合索引又叫复合索引。两个或更多个列上的索引被称作复合索引。</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `table_name` <span class="keyword">ADD</span> INDEX (`col1`,`col2`,`col3`);</span><br></pre></td></tr></tbody></table></figure><p>1、需要加索引的字段，要在where条件中<br>2、数据量少的字段不需要加索引<br>3、如果where条件中是<strong>OR</strong>关系，加索引不起作用<br>4、符合最<strong>左</strong>原则</p><h2 id="最左原则"><a href="#最左原则" class="headerlink" title="最左原则"></a>最左原则</h2><p>当创建 <code>(col1,col2,col3)</code> 联合索引时，<br>相当于创建了 <code>(col)</code> 单列索引， <code>(clo1,clo2)</code> 联合索引以及 <code>(col1,col2,col3)</code> </p><p>联合索引想要索引生效，只能使用 <code>col1</code> 和 <code>col1,col2</code> 和col1,col2,col3三种组合；</p><p>当然，<code>col1,col3</code> 组合也可以，但实际上只用到了<code>col1</code> 的索引，<code>col3</code> 并没有用到！</p><h2 id="注意事项与示例"><a href="#注意事项与示例" class="headerlink" title="注意事项与示例"></a>注意事项与示例</h2><ul><li><p>查询语句中的where、order by、group 涉及多个字段，一般需要创建多列索引</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> nick_name <span class="operator">=</span> <span class="string">'ligoudan'</span> <span class="keyword">and</span> job <span class="operator">=</span> <span class="string">'dog'</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>一般情况下，把选择性高使用频率高的字段放在前面</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> age <span class="operator">=</span> <span class="string">'20'</span> <span class="keyword">and</span> name <span class="operator">=</span> <span class="string">'zh'</span> <span class="keyword">order</span> <span class="keyword">by</span> nick_name;</span><br><span class="line"># 这时候如果建索引的话，首字段应该是age，因为age定位到的数据更少，选择性更高。</span><br><span class="line"># 但是务必注意一点，满足了某个查询场景就可能导致另外一个查询场景更慢。</span><br></pre></td></tr></tbody></table></figure></li><li><p>避免使用范围查询</p></li><li><p>尽量避免查询不需要的数据，也就是尽量写明 <code> select 列名</code> 而不是 <code>select *</code></p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># <span class="number">1.</span>将会全表遍历</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> job <span class="keyword">like</span> <span class="string">'%ligoudan%'</span>;</span><br><span class="line"># <span class="number">2.</span>可以使用覆盖索引</span><br><span class="line">explain <span class="keyword">select</span> job <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> job <span class="keyword">like</span> <span class="string">'%ligoudan%'</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>查询的数据类型要正确</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 可以使用create_date上的索引</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> create_date <span class="operator">&gt;=</span> now();</span><br><span class="line"># 数据类型错误，使用不了索引</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> <span class="keyword">user</span> <span class="keyword">where</span> create_date <span class="operator">&gt;=</span> <span class="string">'2020-05-01 00:00:00'</span>;</span><br></pre></td></tr></tbody></table></figure></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li><strong>最左原则：</strong>在 InnoDB 中联合索引只有<strong>先确定了前一个（左侧的值）后，才能确定下一个值</strong>。</li><li><strong>范围查询：</strong>如果有范围查询的话，那么联合索引中使用<strong>范围查询的字段后</strong>的索引在该条 SQL 中都不会起作用。</li><li><strong>Mysql优化器：</strong>值得注意的是，<code>in</code> 和 <code>=</code> 都<strong>可以乱序</strong>。<br>比如有索引（a,b,c），语句 <code>select * from t where c =1 and a=1 and b=1</code>，<br>这样的语句也可以用到最左匹配，因为 MySQL 中有一个<strong>优化器</strong>，他会分析 SQL 语句，将其优化成索引可以匹配的形式。<br>即 <code>select * from t where a =1 and a=1 and c=1</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里巴巴笔试题2021/06/04场</title>
      <link href="2021/06/04/20210604%E9%98%BF%E9%87%8C%E7%AC%94%E8%AF%95/"/>
      <url>2021/06/04/20210604%E9%98%BF%E9%87%8C%E7%AC%94%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里巴巴笔试题2021-06-04场"><a href="#阿里巴巴笔试题2021-06-04场" class="headerlink" title="阿里巴巴笔试题2021/06/04场"></a>阿里巴巴笔试题2021/06/04场</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>共有两道编程题。</p><p>采用牛客网，ACM模式，需要自己手写输入输出。</p><p>可以采用本地IDE，我用的IDEA。</p><p>会后台录屏，开摄像头，手机扫码监控后在小程序界面不能切屏（如果我有俩手机那他是不是也没办法……）</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210604205103607.png" alt="考试须知"></p><p>放几个官方说明，如果不了解<strong>牛客网的ACM模式</strong>的话可以先看一下：</p><blockquote><p><a href="https://www.nowcoder.com/discuss/92224">牛客在线笔试常见问题_猿生活_牛客网 (nowcoder.com)</a></p><p><a href="https://www.nowcoder.com/discuss/276">牛客网在线判题系统使用帮助_站内公告_牛客网 (nowcoder.com)</a></p><p><a href="https://www.nowcoder.com/discuss/8050">oj的java输入hasNext和hasNextLine区别_技术交流_牛客网 (nowcoder.com)</a></p><p><a href="https://www.nowcoder.com/questionTerminal/dae9959d6df7466d9a1f6d70d6a11417">a+b__ACM模式练习</a></p></blockquote><p>接下来就是2021/06/04的两道编程题复盘。</p><p>自己第一道题用例都通过了，第二道题只过了20%。总体感觉难度不算难？主要是自己太菜了。</p><ul><li>第一道题貌似是数学题/脑筋急转弯。。。或者有更高深的说法我不知道。</li><li>第二道题就是图的遍历，其中边是带权重的。</li></ul><h2 id="1-小区划分"><a href="#1-小区划分" class="headerlink" title="1. 小区划分"></a>1. 小区划分</h2><h3 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h3><p>目前没有在网上找到原题与题解。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210604204057854.png" alt="题目描述"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210604204207607.png" alt="输入输出描述"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210604204343825.png" alt="示例1"></p><h3 id="自己思路"><a href="#自己思路" class="headerlink" title="自己思路"></a>自己思路</h3><p>下面是我的解法，思路很简单，从给的示例里看出来的。</p><p>要使得俩小区平均价值最大，那么肯定找最高的鸭，排序，从大到小。</p><p>然后<strong>钱多人少</strong>的放在一个小区，<strong>钱多人也多</strong>的放在一个小区。</p><ul><li><p>钱多人少，这样平均财富值肯定高鸭，传说中的高档小区；</p></li><li><p>钱不够那就人来凑呗，勉强也能搞点财富值，算是个中档小区吧；</p></li></ul><p>总结一下核心思路如下：</p><ol><li>首先就是先排序，从大到小；</li><li>之后再选，钱最多的几个人，放在人数少的第一个小区里；</li><li>然后再选，钱很多但没有那么多的几个人，放在人数多的第二个小区里。剩下的人就可以拜拜了（没钱买房子的就是我TAT）</li></ol><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><p>代码（个人习惯把题目写道注释里了）：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 住小区问题</span></span><br><span class="line"><span class="comment">     * n个人，每个人有个财富值 a[i]</span></span><br><span class="line"><span class="comment">     * 两个小区,分别住 n1 和 n2 个人</span></span><br><span class="line"><span class="comment">     * 两个小区的平均财富值尽可能大</span></span><br><span class="line"><span class="comment">     * 小区人口财富总和 / 总人数</span></span><br><span class="line"><span class="comment">     * 第一行：n,n1,n2</span></span><br><span class="line"><span class="comment">     * 共n个人，第一个小区n1，第二个小区n2</span></span><br><span class="line"><span class="comment">     * 第二行：每个人的财富值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 例子：</span></span><br><span class="line"><span class="comment">     * 4 2 1</span></span><br><span class="line"><span class="comment">     * 1 4 2 3</span></span><br><span class="line"><span class="comment">     * out:</span></span><br><span class="line"><span class="comment">     * 6.500000 (结果保留6位有效小数)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 6.5 = (2+3)/2 + 4/1</span></span><br><span class="line"><span class="comment">     * **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (in.hasNextInt()){</span><br><span class="line">            <span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">            <span class="keyword">int</span> n1 = in.nextInt();</span><br><span class="line">            <span class="keyword">int</span> n2 = in.nextInt();</span><br><span class="line"></span><br><span class="line">            ArrayList&lt;Integer&gt; a = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) {</span><br><span class="line">                a.add(in.nextInt());</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            Collections.sort(a);</span><br><span class="line">            Collections.reverse(a);</span><br><span class="line"></span><br><span class="line">            ArrayList&lt;Integer&gt; a1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">            ArrayList&lt;Integer&gt; a2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 第一个小区</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Math.min(n1, n2); i++) {</span><br><span class="line">                a1.add(a.get(i));</span><br><span class="line">            }</span><br><span class="line">            <span class="comment">// 第二个小区</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = Math.min(n1, n2); i &lt; Math.max(n1, n2)+Math.min(n1,n2); i++) {</span><br><span class="line">                a2.add(a.get(i));</span><br><span class="line">            }</span><br><span class="line"></span><br><span class="line">            Double res = <span class="number">0.00000</span>;</span><br><span class="line">            Double tempSum = <span class="number">0.0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a1.size(); i++) {</span><br><span class="line">                tempSum += Double.valueOf(a1.get(i));</span><br><span class="line">            }</span><br><span class="line">            res = Double.valueOf(tempSum/a1.size());</span><br><span class="line">            tempSum = <span class="number">0.0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a2.size(); i++) {</span><br><span class="line">                tempSum += Double.valueOf(a2.get(i));</span><br><span class="line">            }</span><br><span class="line">            res += Double.valueOf(tempSum/a2.size());</span><br><span class="line"></span><br><span class="line">            System.out.println(<span class="string">"a1"</span>+a1.toString());</span><br><span class="line">            System.out.println(<span class="string">"a2"</span>+a2.toString());</span><br><span class="line"></span><br><span class="line">            System.out.println(res.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>最后还有个幺蛾子，就是自己打印的调试信息里，倒数两个 <code>System.out.println</code> 忘了删除，导致第一次调试没通过。。。</p><p>然后删了就可以了，直接通过全部用例。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210604204505603.png" alt="通过"></p><h2 id="2-重建网络"><a href="#2-重建网络" class="headerlink" title="2. 重建网络"></a>2. 重建网络</h2><h3 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h3><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210604204551088.png" alt="题目描述"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210604204620677.png" alt="输入输出描述"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210604204651352.png" alt="示例1"></p><blockquote><p>输入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">4 5 7</span><br><span class="line">4 1 3</span><br><span class="line">1 2 5</span><br><span class="line">2 3 8</span><br><span class="line">2 4 1</span><br><span class="line">3 4 4</span><br></pre></td></tr></tbody></table></figure></blockquote><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210604204810072.png" alt="示例2"></p><blockquote><p>输入：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">4 6 5</span><br><span class="line">1 2 1</span><br><span class="line">1 3 1</span><br><span class="line">1 4 2</span><br><span class="line">2 4 1</span><br><span class="line">4 3 1</span><br><span class="line">3 2 1</span><br></pre></td></tr></tbody></table></figure></blockquote><p>自己画了一下图：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210604225507038.png" alt="示例1"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210604225449963.png" alt="示例2"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210627121920071.png" alt="修改结果"></p><h3 id="自己思路与改进"><a href="#自己思路与改进" class="headerlink" title="自己思路与改进"></a>自己思路与改进</h3><p>图的遍历，但是不会写。</p><p>于是瞎写，用邻接矩阵数组存的。矩阵matrix这个单词也忘了怎么拼，于是瞎写了个mux。</p><p>自己最初的思路，只考虑了下面的前3步，代码只实现了前两步……果然还是太菜了。</p><ol><li>存入邻接矩阵</li><li>遍历邻接矩阵，如果两个点之间的边小于最小速度，修改其权重，并将 <code>最小速度-权重</code> 加入结果</li><li>还要进行进一步的判断，如果这两个点之间，已经存在一条路径，而且路径的权重均大于最小速度，那么这个就不需要计算了</li><li>进一步思考，如果存在<strong>多条路径</strong>，而且这几条路径上，都有几条边不满足最小速度，则要进行计算比较：<br>选择变化最小，也就是其选择 <code>最小速度*路径中的边条数 - 路径权重之和</code> 的路径，修改其每条边的值，并加入结果</li></ol><p>注意，我这里说的路径是是包含多条边的，而边只是两点之间的一条边。</p><h3 id="自己代码-错误，仅通过20-测试用例"><a href="#自己代码-错误，仅通过20-测试用例" class="headerlink" title="自己代码 (错误，仅通过20%测试用例)"></a>自己代码 (错误，仅通过20%测试用例)</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * n节点，m条边</span></span><br><span class="line"><span class="comment">     * 每条边有个网络速度 w_i</span></span><br><span class="line"><span class="comment">     * 删掉 m-(n-1) 条边</span></span><br><span class="line"><span class="comment">     * 任意两点有且仅有一条简单路径</span></span><br><span class="line"><span class="comment">     * 网络最低速度要等于k</span></span><br><span class="line"><span class="comment">     * 可以调节一些边的网络速度，每一次操作，可以把网络速度+1或者-1</span></span><br><span class="line"><span class="comment">     * 问：最少需要的操作次数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 保证给出的是连通图</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 第一行：n,m,k</span></span><br><span class="line"><span class="comment">     * n条边，m个节点，k网络速度最低</span></span><br><span class="line"><span class="comment">     * 每行：u_i, v_i , w_i</span></span><br><span class="line"><span class="comment">     * 节点 u 到 v 的一条速度为 w_i 的双向边</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 输出：</span></span><br><span class="line"><span class="comment">     * sum，最少操作次数</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * **/</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        Scanner in = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        <span class="keyword">while</span> (in.hasNextInt()){</span><br><span class="line">            <span class="keyword">int</span> n = in.nextInt();</span><br><span class="line">            <span class="keyword">int</span> m = in.nextInt();</span><br><span class="line">            <span class="keyword">int</span> k = in.nextInt();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 邻接矩阵</span></span><br><span class="line">            <span class="keyword">int</span>[][] mux = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) {</span><br><span class="line">                <span class="keyword">int</span> v1 = in.nextInt();</span><br><span class="line">                <span class="keyword">int</span> v2 = in.nextInt();</span><br><span class="line">                <span class="keyword">int</span> w = in.nextInt();</span><br><span class="line"></span><br><span class="line">                mux[v1-<span class="number">1</span>][v2-<span class="number">1</span>] = w;</span><br><span class="line">                mux[v2-<span class="number">1</span>][v1-<span class="number">1</span>] = w;</span><br><span class="line">            }</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mux.length; i++) {</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; mux[i].length; j++) {</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span>(mux[i][j] !=<span class="number">0</span>){</span><br><span class="line">                        mux[j][i] =<span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">if</span> (mux[i][j] &lt; k){</span><br><span class="line">                            res += (k-mux[i][j]);</span><br><span class="line">                            mux[i][j] = -<span class="number">1</span>;</span><br><span class="line">                        }</span><br><span class="line">                    }</span><br><span class="line"><span class="comment">//                    System.out.print(mux[i][j]+" ");</span></span><br><span class="line">                }</span><br><span class="line"><span class="comment">//                System.out.println();</span></span><br><span class="line">            }</span><br><span class="line">            System.out.println(res);</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210604222620183.png" alt="20%通过"></p><p>感觉这20%的case，应该都是多条路径中，只更改直接相连的那条边的情况，省去了我上面说的比较的步骤。</p><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><p><del>貌似可以用回溯算法解决？</del></p><p>暂时还没写出代码来。</p><hr><p>6.27：淦，这不就是最小生成树算法的改版？这里应该叫最大生成树。</p><blockquote><p><a href="https://www.cnblogs.com/wuxiangnong/p/10885129.html">图的最小生成树 - 智者侬哥 - 博客园 (cnblogs.com)</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java垃圾收集器</title>
      <link href="2021/05/31/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/"/>
      <url>2021/05/31/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>《Offer来了-Java基础篇》第1.8章</p></blockquote><h3 id="1-8垃圾收集器"><a href="#1-8垃圾收集器" class="headerlink" title="1.8垃圾收集器"></a>1.8垃圾收集器</h3><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">subgraph 新生代 </span><br><span class="line">n(新生代)---1(Serial:单线程复制算法)</span><br><span class="line">n---2(ParNew:多线程复制算法)</span><br><span class="line">n---3(Parallel Scavenge:多线程复制算法)</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">subgraph 老年代 </span><br><span class="line">老年代---CMS(CMS:多线程标记清除算法)</span><br><span class="line">老年代---SO(Serial Old:单线程标记整理算法)</span><br><span class="line">老年代---PO(Parallel Old:多线程标记整理算法)</span><br><span class="line">老年代---GI(GI:多线程表标记整理算法)</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><h4 id="1-8-1-Serial收集器"><a href="#1-8-1-Serial收集器" class="headerlink" title="1.8.1 Serial收集器"></a>1.8.1 Serial收集器</h4><p>单线程</p><p>停止所有其他线程，Stop The World（Dio表示很赞，砸瓦鲁多），只启用GC线程。</p><ul><li>新生代：复制算法</li><li>老年代：标记-整理算法</li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/46873026.png" alt=" Serial 收集器 "></p><ul><li>优点：没有线程交互开销，简单而高效</li><li>缺点：体验太差了。。。</li><li>是JVM在Client模式下新生代的默认收集器</li></ul><h4 id="1-8-2-ParNew收集器"><a href="#1-8-2-ParNew收集器" class="headerlink" title="1.8.2 ParNew收集器"></a>1.8.2 ParNew收集器</h4><p>多线程版本的Serial收集器</p><ul><li>新生代：复制算法</li><li>老年代：标记-整理算法</li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/22018368.png" alt="ParNew 收集器 "></p><ul><li>也会暂停其他所有线程</li><li>是JVM在Server模式下新生代的默认收集器</li><li>除了 Serial 收集器外，只有它能与 CMS 收集器（真正意义上的并发收集器，后面会介绍到）配合工作</li></ul><blockquote><p><strong>并行和并发概念补充：</strong></p><ul><li><strong>并行（Parallel）</strong> ：指多条垃圾收集线程并行工作，但此时用户线程仍然处于等待状态。</li><li><strong>并发（Concurrent）</strong>：指用户线程与垃圾收集线程同时执行（但不一定是并行，可能会交替执行），用户程序在继续运行，而垃圾收集器运行在另一个 CPU 上。</li></ul><p>这里补充的是说GC和用户线程的并行并发（这里说的有点模糊，没太搞清）：</p><ul><li>并行：GC并行，用户暂停；</li><li>并发：GC与用户同时发生，可能交替执行；</li></ul><p>操作系统/线程里的并行并发是如下：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1628624-20190505161932608-1136050215.jpg" alt="并行与并发"></p><p><strong>并行（Parallel）</strong>：同时做，不暂停。打个比方，一边吃饭一边打电话，你真行。</p><p><strong>并发（Concurrent）</strong>：同时发生，但是不一定同时做。打个比方，开始吃饭的时候突然来了电话，吃饭和电话同时发生，我吃一口饭说一句话，吃饭和说话不同时进行但是好像在同时进行。</p></blockquote><h4 id="1-8-3-Parallel-Scavenge收集器"><a href="#1-8-3-Parallel-Scavenge收集器" class="headerlink" title="1.8.3 Parallel Scavenge收集器"></a>1.8.3 Parallel Scavenge收集器</h4><p>与ParNew几乎一样，但是注重的是不同方面。</p><p><strong>是JDK1.8的默认收集器。</strong></p><ul><li><strong>Parallel Scavenge 收集器关注点是==吞吐量（高效率的利用 CPU）==</strong></li><li><strong>CMS 等垃圾收集器的关注点更多的是用户线程的==停顿时间（提高用户体验）==</strong></li></ul><p><strong>所谓吞吐量就是 CPU 中用于运行用户代码的时间与 CPU 总消耗时间的比值：$ CPU吞吐量 = {运行用户代码时间 \over 总消耗时间} $</strong> </p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210520174914336.png" alt="ParallelScavege"></p><ul><li>新生代：复制算法</li><li>老年代：标记-整理算法</li></ul><blockquote><p>Parallel Scavenge 收集器提供了很多参数供用户找到最合适的停顿时间或最大吞吐量，如果对于收集器运作不太了解，手工优化存在困难的时候，使用 Parallel Scavenge 收集器配合自适应调节策略，把内存管理优化交给虚拟机去完成也是一个不错的选择。</p></blockquote><h4 id="1-8-4-Serial-Old收集器"><a href="#1-8-4-Serial-Old收集器" class="headerlink" title="1.8.4 Serial Old收集器"></a>1.8.4 Serial Old收集器</h4><p>单线程Serial的老年代版本。</p><p>标记-整理算法。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/46873026.png" alt=" 和Serial 收集器相似 "></p><ul><li>JDK1.5以前版本，Serial Old + Parallel</li><li>CMS的后备方案</li></ul><h4 id="1-8-5-Parallel-Old-收集器"><a href="#1-8-5-Parallel-Old-收集器" class="headerlink" title="1.8.5 Parallel Old 收集器"></a>1.8.5 Parallel Old 收集器</h4><p>Parallel Scavenge的老年代版本。</p><p>多线程，标记-整理算法。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210520174914336.png" alt="和ParallelScavege相似"></p><p><strong>注重吞吐量和CPU资源的场景</strong>可以使用<code>Parallel Scavenge 和 Parallel Old</code>。</p><h4 id="1-8-6-CMS收集器"><a href="#1-8-6-CMS收集器" class="headerlink" title="1.8.6 CMS收集器"></a>1.8.6 CMS收集器</h4><p>针对老年代的收集器，目的是尽量缩短停顿时间。</p><blockquote><p><strong>CMS（Concurrent Mark Sweep）收集器是一种以获取最短回收停顿时间为目标的收集器。它非常符合在注重用户体验的应用上使用。</strong></p><p><strong>CMS（Concurrent Mark Sweep）收集器是 HotSpot 虚拟机第一款真正意义上的并发收集器，它第一次实现了让垃圾收集线程与用户线程（基本上）同时工作。</strong></p></blockquote><p>CMS：Concurrent Mark Sweep，<strong>并发-标记-清除</strong>，所以说是标记-清除算法。</p><p>其稍微复杂些，分为4个步骤</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210520192812031.png" alt="CMS收集器"></p><ul><li><strong>初始标记：</strong> 暂停所有的其他线程，并记录下直接与 root 相连的对象，速度很快 ；</li><li><strong>并发标记：</strong> <strong>同时开启 GC 和用户线程</strong>，用一个闭包结构去记录可达对象。但在这个阶段结束，这个闭包结构<strong>并不能保证包含当前所有的可达对象</strong>。因为用户线程可能会<strong>不断的更新引用域</strong>，所以 GC 线程无法保证可达性分析的实时性。所以这个算法里会<strong>跟踪记录这些发生引用更新的地方</strong>。</li><li><strong>重新标记：</strong> 重新标记阶段就是为了修正并发标记期间因为用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，这个阶段的停顿时间一般会比初始标记阶段的时间稍长，远远比并发标记阶段时间短</li><li><strong>并发清除：</strong> 开启用户线程，同时 GC 线程开始对GC Roots不可达对象做清扫。</li></ul><p>主要优点：<strong>并发收集、低停顿</strong>。</p><p>但是它有下面三个明显的缺点：</p><ul><li><strong>对 CPU 资源敏感；</strong></li><li><strong>无法处理浮动垃圾；</strong></li><li><strong>它使用的回收算法-“标记-清除”算法会导致收集结束时会有大量空间碎片产生。</strong></li></ul><h4 id="1-8-7-G1垃圾收集器"><a href="#1-8-7-G1垃圾收集器" class="headerlink" title="1.8.7 G1垃圾收集器"></a>1.8.7 G1垃圾收集器</h4><p><strong>G1 (Garbage-First) 是一款面向服务器的垃圾收集器,主要针对配备多颗处理器及大容量内存的机器. 以极高概率满足 GC 停顿时间要求的同时,还具备高吞吐量性能特征.</strong></p><p>首先将堆内存划分为几个独立区域，然后q后台维护一个优先级列表，首先回收优先级高的，垃圾最多的内存区域。</p><p>对CMS的主要改进：</p><ul><li>基于标记-整理算法，不会产生内存碎片</li><li>可以预测的停顿，精确控制停顿时间，不牺牲吞吐量的前提下实现短停顿。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java泛型整理</title>
      <link href="2021/05/31/Java%E6%B3%9B%E5%9E%8B%E6%95%B4%E7%90%86/"/>
      <url>2021/05/31/Java%E6%B3%9B%E5%9E%8B%E6%95%B4%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Java泛型"><a href="#Java泛型" class="headerlink" title="Java泛型"></a>Java泛型</h1><p>面试题：泛型的考点，问题我不太记得了，还是想 &lt; Integer&gt; 和 &lt; String&gt; 的对象是否相等</p><blockquote><p><a href="https://snailclimb.gitee.io/javaguide/#/docs/java/basis/Java%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86?id=java-%E6%B3%9B%E5%9E%8B%E4%BA%86%E8%A7%A3%E4%B9%88%EF%BC%9F%E4%BB%80%E4%B9%88%E6%98%AF%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4%EF%BC%9F%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8B%E5%B8%B8%E7%94%A8%E7%9A%84%E9%80%9A%E9%85%8D%E7%AC%A6%EF%BC%9F">Java 泛型了解么？什么是类型擦除？介绍一下常用的通配符？ (gitee.io)</a></p><p><a href="https://www.cnblogs.com/coprince/p/8603492.html">java 泛型详解-绝对是对泛型方法讲解最详细的，没有之一 - little fat - 博客园 (cnblogs.com)</a></p><p><a href="https://blog.csdn.net/sunxianghuang/article/details/51982979">Java泛型深入理解_void-CSDN博客_java泛型</a></p><p><a href="https://www.zhihu.com/question/20400700">Java 泛型  中 super 怎么 理解？与 extends 有何不同？ - 知乎 (zhihu.com)</a></p></blockquote><p>需要了解的：</p><ul><li>Java泛型作用，使用</li><li>类型擦除</li><li>通配符，父类子类上下边界</li></ul><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本质：<strong>参数化类型</strong>，也就是将数据类型变成一个<strong>参数</strong></p><p>Java的泛型是<strong>伪泛型</strong>，因为在编译期间所有的泛型信息都会被擦掉，也就是<strong>类型擦除</strong>。</p><h2 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h2><p><strong>泛型只在编译阶段有效</strong>。看下面的代码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; stringArrayList = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">List&lt;Integer&gt; integerArrayList = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line"></span><br><span class="line">Class classStringArrayList = stringArrayList.getClass();</span><br><span class="line">Class classIntegerArrayList = integerArrayList.getClass();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(classStringArrayList.equals(classIntegerArrayList)){</span><br><span class="line">    Log.d(<span class="string">"泛型测试"</span>,<span class="string">"类型相同"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>输出结果：<code>D/泛型测试: 类型相同</code>。</p><p>通过上面的例子可以证明，在编译之后程序会采取去泛型化的措施。也就是说Java中的泛型，只在编译阶段有效。<strong>在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦出，并且在对象进入和离开方法的边界处添加==类型检查和类型转换的方法==。</strong>也就是说，泛型信息不会进入到运行时阶段。</p><p>对此总结成一句话：<strong>泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型</strong>。</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p>一般有三种使用方式：泛型类，泛型接口，泛型方法。</p><p>泛型的类型参数只能是类类型，不能是简单类型。</p><h3 id="1-泛型类"><a href="#1-泛型类" class="headerlink" title="1. 泛型类"></a>1. 泛型类</h3><p>类声明</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// T可以使用任意标识，见下面</span></span><br><span class="line"><span class="comment">// 实例化泛型类的时候，必须指定T具体类型</span></span><br><span class="line"><span class="comment">// 类名&lt;泛型&gt;</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt;</span>{</span><br><span class="line">    <span class="keyword">private</span> T key;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造，set，get等</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>类实例化：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Generic&lt;Integer&gt; g = <span class="keyword">new</span> Generic&lt;Integer&gt;();</span><br></pre></td></tr></tbody></table></figure><h3 id="2-泛型接口"><a href="#2-泛型接口" class="headerlink" title="2. 泛型接口"></a>2. 泛型接口</h3><p>其实和泛型类差不多啦。</p><p>接口声明：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt;</span>{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">method</span><span class="params">()</span></span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接口实现，可以<strong>不指定类型</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneratorImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">T</span>&gt;</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">method</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>接口实现，<strong>指定类型</strong>：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GeneratorImpl</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Generator</span>&lt;<span class="title">String</span>&gt;</span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">method</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>注意：这里实现类中的 T，与接口中的 T 不是同一个了，原来接口中的T在这都变成 <code>String</code> 了。</p><h3 id="3-泛型方法"><a href="#3-泛型方法" class="headerlink" title="3. 泛型方法"></a>3. 泛型方法</h3><p>方法声明：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> &lt;E&gt; <span class="function"><span class="keyword">void</span> <span class="title">printArray</span><span class="params">(E[] inputArray)</span></span>{</span><br><span class="line">    <span class="keyword">for</span>(E e : inputArray){</span><br><span class="line">        System.out.printf(<span class="string">"%s"</span>,e);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>方法使用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建不同类型数组： Integer, Double 和 Character</span></span><br><span class="line">Integer[] intArray = { <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> };</span><br><span class="line">String[] stringArray = { <span class="string">"Hello"</span>, <span class="string">"World"</span> };</span><br><span class="line">printArray( intArray  );</span><br><span class="line">printArray( stringArray  );</span><br></pre></td></tr></tbody></table></figure><p>需要注意的几点：</p><ul><li>只有在返回类型之前声明了 <code>&lt;T&gt;</code> 的才是泛型方法</li><li>静态方法无法访问类上定义的泛型，如果静态方法要使用泛型的话，必须将静态方法也定义成泛型方法 </li></ul><p>举例：</p><p>只有在返回类型之前声明了 <code>&lt;T&gt;</code> 的才是泛型方法！其余的都不是。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Generic</span>&lt;<span class="title">T</span>&gt;</span>{     </span><br><span class="line">        <span class="keyword">private</span> T key;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Generic</span><span class="params">(T key)</span> </span>{</span><br><span class="line">            <span class="keyword">this</span>.key = key;</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="comment">//我想说的其实是这个，虽然在方法中使用了泛型，但是这并不是一个泛型方法。</span></span><br><span class="line">        <span class="comment">//这只是类中一个普通的成员方法，只不过他的返回值是在声明泛型类已经声明过的泛型。</span></span><br><span class="line">        <span class="comment">//所以在这个方法中才可以继续使用 T 这个泛型。</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">getKey</span><span class="params">()</span></span>{</span><br><span class="line">            <span class="keyword">return</span> key;</span><br><span class="line">        }</span><br><span class="line">        <span class="comment">//这也不是一个泛型方法，这就是一个普通的方法，只是使用了Generic&lt;Number&gt;这个泛型类做形参而已。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showKeyValue1</span><span class="params">(Generic&lt;Number&gt; obj)</span></span>{</span><br><span class="line">        Log.d(<span class="string">"泛型测试"</span>,<span class="string">"key value is "</span> + obj.getKey());</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 这才是一个真正的泛型方法。</span></span><br><span class="line"><span class="comment">     * 首先在public与返回值之间的&lt;T&gt;必不可少，这表明这是一个泛型方法，并且声明了一个泛型T</span></span><br><span class="line"><span class="comment">     * 这个T可以出现在这个泛型方法的任意位置.</span></span><br><span class="line"><span class="comment">     * 泛型的数量也可以为任意多个 </span></span><br><span class="line"><span class="comment">     *    如：public &lt;T,K&gt; K showKeyName(Generic&lt;T&gt; container){</span></span><br><span class="line"><span class="comment">     *        ...</span></span><br><span class="line"><span class="comment">     *        }</span></span><br><span class="line"><span class="comment">     */</span></span><br></pre></td></tr></tbody></table></figure><h2 id="常见通配符"><a href="#常见通配符" class="headerlink" title="常见通配符"></a>常见通配符</h2><ul><li>？ 不确定的Java类型</li><li>T (type) 具体的一个Java类型</li><li>K V (key,value) 代表Java键值中的 Key 与 Value</li><li>E (element) 代表 Element</li></ul><h3 id="泛型限定通配符-上下边界"><a href="#泛型限定通配符-上下边界" class="headerlink" title="泛型限定通配符/上下边界"></a>泛型限定通配符/上下边界</h3><ul><li>限定通配符：<ul><li>上边界：<code>&lt;? extends Number&gt;</code> ，只能是 <code>Number</code> 的子类<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210531113912914.png" alt="上边界extends"></li><li>下边界：<code>&lt;? super Integer&gt;</code>，只能是 <code>Integer</code> 的父类<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210531113836697.png" alt="下边界super"></li></ul></li><li>非限定通配符：<code>&lt;?&gt;</code> 代表所有类型</li></ul><p>举例：</p><p>为泛型添加上边界，即传入的类型实参必须是指定类型的子类型：</p><p>声明：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showKeyValue1</span><span class="params">(Generic&lt;? extends Number&gt; obj)</span></span>{</span><br><span class="line">    Log.d(<span class="string">"泛型测试"</span>,<span class="string">"key value is "</span> + obj.getKey());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>使用：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Generic&lt;String&gt; generic1 = <span class="keyword">new</span> Generic&lt;String&gt;(<span class="string">"11111"</span>);</span><br><span class="line">Generic&lt;Integer&gt; generic2 = <span class="keyword">new</span> Generic&lt;Integer&gt;(<span class="number">2222</span>);</span><br><span class="line">Generic&lt;Float&gt; generic3 = <span class="keyword">new</span> Generic&lt;Float&gt;(<span class="number">2.4f</span>);</span><br><span class="line">Generic&lt;Double&gt; generic4 = <span class="keyword">new</span> Generic&lt;Double&gt;(<span class="number">2.56</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//这一行代码编译器会提示错误，因为String类型并不是Number类型的子类</span></span><br><span class="line"><span class="comment">//showKeyValue1(generic1);</span></span><br><span class="line"></span><br><span class="line">showKeyValue1(generic2);</span><br><span class="line">showKeyValue1(generic3);</span><br><span class="line">showKeyValue1(generic4);</span><br></pre></td></tr></tbody></table></figure><p>上下边界要添加在声明上，而不是参数上：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在泛型方法中添加上下边界限制的时候，必须在权限声明与返回值之间的&lt;T&gt;上添加上下边界，即在泛型声明的时候添加</span></span><br><span class="line"><span class="comment">//public &lt;T&gt; T showKeyName(Generic&lt;T extends Number&gt; container)，编译器会报错："Unexpected bound"</span></span><br><span class="line"><span class="keyword">public</span> &lt;T extends Number&gt; <span class="function">T <span class="title">showKeyName</span><span class="params">(Generic&lt;T&gt; container)</span></span>{</span><br><span class="line">    System.out.println(<span class="string">"container key :"</span> + container.getKey());</span><br><span class="line">    T test = container.getKey();</span><br><span class="line">    <span class="keyword">return</span> test;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="泛型通配符-？"><a href="#泛型通配符-？" class="headerlink" title="泛型通配符 ？"></a>泛型通配符 <code>？</code></h3><p><code>Integer</code> 是 <code>Number</code> 的一个子类</p><p>泛型类 <code>Generic&lt;Integer&gt;</code> 是 <code>Generic&lt;Number&gt;</code> 的子类吗？能用 <code>Generic&lt;Integer&gt;</code> 传入 <code>Generic&lt;Number&gt;</code> 吗？</p><p>答案是不行的。</p><p>首先声明一个泛型方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showKeyValue1</span><span class="params">(Generic&lt;Number&gt; obj)</span></span>{</span><br><span class="line">    Log.d(<span class="string">"泛型测试"</span>,<span class="string">"key value is "</span> + obj.getKey());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p> 然后进行 Integer 与 Number 的测试：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Generic&lt;Integer&gt; gInteger = <span class="keyword">new</span> Generic&lt;Integer&gt;(<span class="number">123</span>);</span><br><span class="line">Generic&lt;Number&gt; gNumber = <span class="keyword">new</span> Generic&lt;Number&gt;(<span class="number">456</span>);</span><br><span class="line"></span><br><span class="line">showKeyValue(gNumber);</span><br><span class="line"></span><br><span class="line"><span class="comment">// showKeyValue(gInteger);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// showKeyValue(gInteger)这里编译器会为我们报错：Generic&lt;java.lang.Integer&gt; cannot be applied to Generic&lt;java.lang.Number&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>那么要怎么才能让 <code>showKeyValue(gNumber)</code> 和 <code>showKeyValue(gInteger)</code> 都不报错呢？</p><p>答案是使用通配符 <code>?</code> ，将参数改为 <code>Generic&lt;?&gt; obj</code> 即可：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showKeyValue1</span><span class="params">(Generic&lt;?&gt; obj)</span></span>{</span><br><span class="line">    Log.d(<span class="string">"泛型测试"</span>,<span class="string">"key value is "</span> + obj.getKey());</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>类型通配符一般是使用 <code>?</code> 代替具体的<strong>类型实参</strong>。</p><p>注意了，此处 <code>?</code> 是类型实参，而不是类型形参。</p><p>再直白点的意思就是，此处的 <code>？</code> 和Number、String、Integer一样<strong>都是一种实际的类型</strong>，可以把 <code>？</code> 看成所有类型的父类，是一种真实的类型。</p><h2 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h2><ol><li><p>Java中的泛型是什么 ? 使用泛型的好处是什么?<br>泛型是一种参数化类型的机制。它可以使得<strong>代码适用于各种类型</strong>，从而编写更加通用的代码，例如集合框架。</p><p>泛型是一种<strong>编译时类型确认</strong>机制。它提供了<strong>编译期的类型安全</strong>，确保在泛型类型（通常为泛型集合）上只能使用正确类型的对象，<strong>避免了在运行时出现ClassCastException</strong>。</p></li></ol><p>2、Java的泛型是如何工作的 ? 什么是类型擦除 ?</p><p>​    泛型的正常工作是依赖编译器在<strong>编译源码的时候</strong>，先进行<strong>类型检查</strong>，然后进行<strong>类型擦除</strong>并且在类型参数出现的地方<strong>插入强制转换</strong>的相关指令实现的。</p><p>​    编译器在编译时擦除了所有类型相关的信息，所以在运行时不存在任何类型相关的信息。<strong>例如 <code>List&lt;String&gt;</code> 在运行时仅用一个List类型来表示。</strong>为什么要进行擦除呢？这是为了避免类型膨胀。</p><ol start="3"><li><p>什么是泛型中的限定通配符和非限定通配符 ?<br>限定通配符对类型进行了限制。</p><ul><li>两种<strong>限定通配符</strong><ul><li><code>&lt;? extends T&gt;</code>它通过确保类型必须是T的子类来设定类型的<strong>上界</strong></li><li><code>&lt;? super T&gt;</code>它通过确保类型必须是T的父类来设定类型的<strong>下界</strong>。<br>泛型类型必须用限定内的类型来进行初始化，否则会导致编译错误。</li></ul></li><li>另一方面<code>&lt;?&gt;</code>表示了<strong>非限定通配符</strong>，因为<code>&lt;?&gt;</code>可以用<strong>任意类型</strong>来替代。</li></ul></li><li><p>List&lt;? extends T&gt;和List &lt;? super T&gt;之间有什么区别 ?</p></li><li><p>如何编写一个泛型方法，让它能接受泛型参数并返回泛型类型?</p></li><li><p>Java中如何使用泛型编写带有参数的类?</p></li><li><p>编写一段泛型程序来实现LRU缓存?</p></li><li><p>你可以把 <code>List&lt;String&gt;</code> 传递给一个接受 <code>List&lt;Object&gt;</code> 参数的方法吗？</p></li><li><p>Array中可以用泛型吗?<br><strong>Array不支持泛型，而List支持</strong>。List可以提供编译期的类型安全保证，而Array却不能。</p></li><li><p>如何阻止Java中的类型未检查的警告?<br>如果你把<strong>泛型和原始类型混合起来使用</strong>，例如下列代码，Java 5的javac编译器会产生类型未检查的警告<br>，例如 <code> List&lt;String&gt; rawList = new ArrayList()</code><br>注意: Hello.java使用了<strong>未检查或称为不安全的操作</strong>;<br>这种警告可以使用 <code>@SuppressWarnings("unchecked")</code> <strong>注解</strong>来屏蔽。</p></li><li><p>Java中 <code>List&lt;Object&gt;</code> 和原始类型 List 之间的区别?</p><ol><li>原始类型和带参数类型<code>&lt;Object&gt;</code>之间的主要区别是，在编译时编译器<strong>不会对原始类型进行类型安全检查，却会对带参数的类型进行检查</strong>，通过使用Object作为类型，可以告知编译器该方法可以接受任何类型的对象，比如String或Integer。这道题的考察点在于对泛型中原始类型的正确理解。</li><li>它们之间的第二点区别是，你可以把<strong>任何带参数的泛型类型传递给接受原始类型List的方法</strong>，但却不能把<code>List&lt;String&gt;</code>传递给接受<code>List&lt;Object&gt;</code>的方法，因为会产生编译错误。</li></ol></li><li><p><code>Java中List&lt;?&gt;</code>和 <code>List&lt;Object&gt;</code> 之间的区别是什么?<br>这道题跟上一道题看起来很像，实质上却完全不同。<br><code>List&lt;?&gt; </code>是一个<strong>所有类型的List</strong>，而<code>List&lt;Object&gt;</code>其实是<strong>Object类型的List</strong>。<br>你可以把<code>List&lt;String&gt;, List&lt;Integer&gt;</code>赋值给<code>List&lt;?&gt;</code>，却不能把<code>List&lt;String&gt;</code>赋值给<code>List&lt;Object&gt;</code>。   </p></li></ol><pre><code>`List&lt;Object&gt;` 与 `List&lt;?&gt;` 并不等同，`List&lt;Object&gt;` 是`List&lt;?&gt;`的子类。还有不能往`List&lt;?&gt; list`里添加任意对象，除了null。</code></pre><ol start="13"><li><p><code>List&lt;String&gt;</code>和原始类型List之间的区别.<br>该题类似于“11. 原始类型和带参数类型之间有什么区别”。<br><strong>带参数类型是类型安全</strong>的，而且其类型安全是由<strong>编译器保证</strong>的，但<strong>原始类型List却不是类型安全的</strong>。<br>你不能把String之外的任何其它类型的Object存入String类型的List中，而你可以把任何类型的对象存入原始List中。<br>使用泛型的带参数类型你<strong>不需要进行类型转换</strong>，但是对于原始类型，你则需要进行<strong>显式的类型转换</strong>。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">List listOfRawTypes = <span class="keyword">new</span> ArrayList();</span><br><span class="line">listOfRawTypes.add(<span class="string">"abc"</span>);</span><br><span class="line">listOfRawTypes.add(<span class="number">123</span>); <span class="comment">//编译器允许这样 - 运行时却会出现异常</span></span><br><span class="line">String item = (String) listOfRawTypes.get(<span class="number">0</span>); <span class="comment">//需要显式的类型转换</span></span><br><span class="line">item = (String) listOfRawTypes.get(<span class="number">1</span>); <span class="comment">//抛ClassCastException，因为Integer不能被转换为String</span></span><br><span class="line">      </span><br><span class="line">List&lt;String&gt; listOfString = <span class="keyword">new</span> ArrayList();</span><br><span class="line">listOfString.add(<span class="string">"abcd"</span>);</span><br><span class="line">listOfString.add(<span class="number">1234</span>); <span class="comment">//编译错误，比在运行时抛异常要好</span></span><br><span class="line">item = listOfString.get(<span class="number">0</span>); <span class="comment">//不需要显式的类型转换 - 编译器自动转换</span></span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo部署至阿里云服务器的问题</title>
      <link href="2021/05/29/Hexo%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>2021/05/29/Hexo%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>写到这里才发现我有多傻。服务器上，貌似只要安装git和Nginx就可以了？？？</p><p>写一下部署的主要步骤吧：</p><ol><li>安装NodeJS</li><li>安装Git</li><li>安装 hexo , hexo-cli, hexo-deploy-git（这里好像在服务器上没有必要？）</li><li>安装Nginx</li><li>新建空仓库，配置用户</li><li>客户端修改hexo文件夹下的配置</li><li>Nginx转发到git的静态文件夹中就可以了</li></ol><hr><p>多灾多难，瞎几把搞。</p><p>因为经历了太多所以说没能太仔细整理。简单记录一下吧。</p><blockquote><p> 参考教程：</p><p><a href="https://developer.aliyun.com/article/775005">记录Hexo部署到阿里云服务器全过程-阿里云开发者社区 (aliyun.com)</a></p><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">hexo-theme-matery/README_CN.md</a></p></blockquote><p>因为不是很会用Linux，所以说搞出了不少幺蛾子，整了大半天。。。</p><p>主要包括但不限于以下问题：</p><ul><li>NodeJS版本过低</li><li>NodeJS安装编译失败</li><li>NodeJS链接创建后仍然找不到node命令</li><li>hexo因为缺少npm组件生成失败</li><li>忘了安装hexo-deploy-git和hexo-cli</li><li>Nginx转发静态资源失败</li></ul><p>尝试过:</p><ul><li><p>安装node的未编译版本与编译版本</p><ul><li>未编译版本，升级gcc与gcc-c++从版本4到8，仍然编译失败</li><li>编译版本，开始用<code>v6.几</code>的版本，然后版本过低， <code>hexo g</code> 命令生成失败</li><li>之后改用 <code>v15</code>版本，可能是太新了？又改用稳定版本，<code>v14.17.0</code>，参考官方文档安装，终于成了<br><a href="https://github.com/nodejs/help/wiki/Installation">Installation   nodejs/help </a><br>主要就是下载，解压，然后添加export语句到 <code>/etc/profile</code> 文件下。之前一堆教程乱七八糟的不知道咋整的，编译失败，创建链接之类的都不管用。</li></ul></li><li><p>贴一下Nginx配置文件：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">user  root;</span><br><span class="line">worker_processes  <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events {</span><br><span class="line">    worker_connections  <span class="number">1024</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http {</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    server {</span><br><span class="line">        listen       <span class="number">80</span>;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">location / {</span><br><span class="line">            root /home/git/projects/blog;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">        error_page  <span class="number">404</span>              /<span class="number">404.</span>html;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        error_page   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        location = /50x.html {</span><br><span class="line">            root   html;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>开始出现了403禁止问题，于是改了第一行的<code>user root</code>就可以了。</p></li></ul><p>hexo主题安装的npm组件</p><figure class="highlight shell"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 搜索插件</span></span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line"><span class="meta">#</span><span class="bash"> 汉字链接转拼音</span></span><br><span class="line">npm i hexo-permalink-pinyin --save</span><br><span class="line"><span class="meta">#</span><span class="bash"> 字数统计</span></span><br><span class="line">npm i --save hexo-wordcount </span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>最后gcc make的编译失败问题还是没解决，我觉得也是版本的问题。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程池简单了解</title>
      <link href="2021/05/26/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
      <url>2021/05/26/Java%E7%BA%BF%E7%A8%8B%E6%B1%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="Java线程池简单了解"><a href="#Java线程池简单了解" class="headerlink" title="Java线程池简单了解"></a>Java线程池简单了解</h1><p>[TOC]</p><blockquote><p>主要查看文章：</p><p><a href="https://mp.weixin.qq.com/s/baYuX8aCwQ9PP6k7TDl2Ww">Java线程池实现原理及其在美团业务中的实践 </a></p><p><a href="https://snailclimb.gitee.io/javaguide/#/./docs/java/multi-thread/%E6%8B%BF%E6%9D%A5%E5%8D%B3%E7%94%A8%E7%9A%84%E7%BA%BF%E7%A8%8B%E6%B1%A0%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5">JavaGuide -线程池最佳实践</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg2OTA0Njk0OA==&amp;mid=2247485808&amp;idx=1&amp;sn=1013253533d73450cef673aee13267ab&amp;chksm=cea246bbf9d5cfad1c21316340a0ef1609a7457fea4113a1f8d69e8c91e7d9cd6285f5ee1490&amp;token=510053261&amp;lang=zh_CN&amp;scene=21#wechat_redirect">新手也能看懂的线程池学习总结</a></p></blockquote><h2 id="1-为什么要用线程池"><a href="#1-为什么要用线程池" class="headerlink" title="1.为什么要用线程池"></a>1.为什么要用线程池</h2><p>池化思想，比如线程池，数据库连接池，HTTP连接池等。主要是为了能够重复利用资源，提高资源的利用率。</p><p>线程池的好处:</p><ul><li>降低资源消耗：可重复利用资源</li><li>提高响应速度：任务到达时，无需等待线程创建即可立即执行</li><li>提高线程可管理性：防止线程创建过多消耗尽系统资源内存等</li></ul><p><strong>线程池解决的核心问题：资源管理问题</strong></p><h2 id="2-Java线程池使用例子"><a href="#2-Java线程池使用例子" class="headerlink" title="2 Java线程池使用例子"></a>2 Java线程池使用例子</h2><h3 id="2-1-总览"><a href="#2-1-总览" class="headerlink" title="2.1 总览"></a>2.1 总览</h3><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210527114738269.png" alt="Executor使用示意图"></p><ol><li><p>主线程首先创建实现 <code>Runnable</code> 或者 <code>Callable</code> 接口的<strong>任务对象</strong></p></li><li><p><strong>把创建完成的实现 <code>Runnable</code>/<code>Callable</code>接口的对象，直接交给 <code>ExecutorService</code> 执行</strong>: </p><ul><li><code>ExecutorService.execute（Runnable command）</code></li><li><code>ExecutorService.submit（Runnable task）</code></li><li><code>ExecutorService.submit（Callable &lt;T&gt; task）</code></li></ul><p>关于 <code>submit()</code> 与 <code>execute()</code> 区别看下面。</p></li><li><p>如果使用的submit提交，则会返回Future对象，包含执行结果。</p><p><code>FutureTask = Future + Runnable</code>，可以用它来直接提交任务与获得返回结果。</p></li><li><p>主线程<code>future.get()</code>获取返回结果，或者主线程 <code>FutureTask.cancel（boolean mayInterruptIfRunning）</code>来取消此任务的执行，参数boolean表示是否让任务完成。</p></li></ol><h4 id="submit与execute"><a href="#submit与execute" class="headerlink" title="submit与execute"></a>submit与execute</h4><ol><li><p><code>execute()</code>方法用于提交<strong>不需要返回值的任务</strong>，所以<strong>无法判断</strong>任务是否被线程池执行<strong>成功与否</strong>；</p></li><li><p><code>submit()</code>方法用于提交<strong>需要返回值的任务</strong>。</p><p>线程池会返回一个 <strong><code>Future</code> 类型的对象</strong>，通过这个 <code>Future</code> 对象可以判断任务是否执行成功</p><ul><li><p>可以通过 <code>Future</code> 的 <code>get()</code>方法来<strong>获取返回值</strong>，<code>get()</code>方法会<strong>阻塞当前线程直到任务完成</strong>；</p></li><li><p>而使用 <code>get（long timeout，TimeUnit unit）</code>方法则会<strong>阻塞当前线程一段时间后立即返回</strong>，这时候有可能任务没有执行完。</p></li></ul></li></ol><h3 id="2-2-ThreadPoolExecutor实例"><a href="#2-2-ThreadPoolExecutor实例" class="headerlink" title="2.2 ThreadPoolExecutor实例"></a>2.2 ThreadPoolExecutor实例</h3><p>==<strong>Java中的线程池：ThreadPoolExecutor</strong>==</p><p>ThreadPoolExecutor的构造函数，用它来创建线程池：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用给定的初始参数创建一个新的ThreadPoolExecutor。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize,//线程池的核心线程数量</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">int</span> maximumPoolSize,//线程池的最大线程数</span></span></span><br><span class="line"><span class="function"><span class="params">                          <span class="keyword">long</span> keepAliveTime,//当线程数大于核心线程数时，多余的空闲线程存活的最长时间</span></span></span><br><span class="line"><span class="function"><span class="params">                          TimeUnit unit,//时间单位</span></span></span><br><span class="line"><span class="function"><span class="params">                          BlockingQueue&lt;Runnable&gt; workQueue,//任务队列，用来储存等待执行任务的队列</span></span></span><br><span class="line"><span class="function"><span class="params">                          ThreadFactory threadFactory,//线程工厂，用来创建线程，一般默认即可</span></span></span><br><span class="line"><span class="function"><span class="params">                          RejectedExecutionHandler handler//拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务</span></span></span><br><span class="line"><span class="function"><span class="params">                           )</span></span></span><br></pre></td></tr></tbody></table></figure><p>这几个参数，稍微记一下：</p><ul><li>核心线程数量</li><li>最大线程数量</li><li>存活时间（当前线程数 &gt; 核心线程数，多余线程的最长存活时间）</li><li>时间单位（TimeUnit.SECONDS）</li><li>任务队列</li><li>线程工厂，一般默认不用管</li><li>拒绝策略（任务过多时，定制策略处理任务）</li></ul><p>创建例子：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 核心线程数 **/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CORE_POOL_SIZE = <span class="number">5</span>;</span><br><span class="line"><span class="comment">/** 最大线程数 **/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_POOL_SIZE = <span class="number">10</span>;</span><br><span class="line"><span class="comment">/** 队列容量 **/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> QUEUE_CAPACITY = <span class="number">100</span>;</span><br><span class="line"><span class="comment">/** 最大存活时间 **/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long KEEP_ALIVE_TIME = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用阿里巴巴推荐的创建线程池的方式</span></span><br><span class="line">    <span class="comment">//通过ThreadPoolExecutor构造函数，自定义参数创建</span></span><br><span class="line">    ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">            CORE_POOL_SIZE,</span><br><span class="line">            MAX_POOL_SIZE,</span><br><span class="line">            KEEP_ALIVE_TIME,</span><br><span class="line">            TimeUnit.SECONDS,</span><br><span class="line">            <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(QUEUE_CAPACITY),</span><br><span class="line">            <span class="keyword">new</span> ThreadPoolExecutor.CallerRunsPolicy());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环，线程池中，创建10个线程</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) {</span><br><span class="line">        <span class="comment">// Lambda表达式，调用execute的参数类型Runnable接口的构造函数，返回匿名对象并实现其中方法（大括号中）</span></span><br><span class="line">        <span class="comment">// 相当于new Runnable(){ run(){} }</span></span><br><span class="line">        executor.execute(() -&gt; {</span><br><span class="line">            <span class="keyword">try</span> {</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">            } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            }</span><br><span class="line">            System.out.println(<span class="string">"CurrentThread name:"</span> + Thread.currentThread().getName() + <span class="string">"；date："</span> + Instant.now());</span><br><span class="line">        });</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//终止线程池</span></span><br><span class="line">    executor.shutdown();</span><br><span class="line">    <span class="keyword">try</span> {</span><br><span class="line">        <span class="comment">// 等待所有任务完成</span></span><br><span class="line">        executor.awaitTermination(<span class="number">5</span>, TimeUnit.SECONDS);</span><br><span class="line">    } <span class="keyword">catch</span> (InterruptedException e) {</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    }</span><br><span class="line">    System.out.println(<span class="string">"Finished all threads"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol><li><code>ThreadPoolExecutor</code>构造函数创建线程池</li><li>线程池中运行线程 <code>executor.execute(Runnable r)</code></li><li>终止线程池 <code>exector.shutdown()</code></li></ol><blockquote><p>其中，关于Lamda表达式-&gt;：Lambda 允许把函数作为一个方法的参数（函数作为参数传递进方法中）。</p><p>下面这个例子就是调用了一个<strong>构造函数</strong>，返回了一个新建的对象，然后传入<strong>函数参数</strong>中。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">EventQueue.invokeLater(() -&gt; {</span><br><span class="line">      JFrame frame = <span class="keyword">new</span> ImageViewerFrame();</span><br><span class="line">      frame.setTitle(<span class="string">"ImageViewer"</span>);</span><br><span class="line">      frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">      frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">EventQueue.invokeLater(<span class="keyword">new</span> Runnable() {</span><br><span class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line">          JFrame frame = <span class="keyword">new</span> ImageViewerFrame();</span><br><span class="line">          frame.setTitle(<span class="string">"ImageViewer"</span>);</span><br><span class="line">          frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</span><br><span class="line">          frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">      }</span><br><span class="line">  });</span><br></pre></td></tr></tbody></table></figure></blockquote><h2 id="3-线程池核心设计与实现总览"><a href="#3-线程池核心设计与实现总览" class="headerlink" title="3.线程池核心设计与实现总览"></a>3.线程池核心设计与实现总览</h2><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210526110139152.png" alt="ThreadPoolExecutor的UML类图"></p><p>这个UML看的不是很懂。。。继续往下看</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210526110421744.png" alt="ThreadPoolExecutor运行流程"></p><h2 id="4-线程池生命周期"><a href="#4-线程池生命周期" class="headerlink" title="4. 线程池生命周期"></a>4. 线程池生命周期</h2><p>其中，线程池 <code>ThreadPoolExecutor</code>的状态有5种：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210526224430777.png" alt="ThreadPoolExecutor状态5种"></p><p>其状态转移图：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210526224536641.png" alt="5种状态的转移"></p><h2 id="5-任务执行机制"><a href="#5-任务执行机制" class="headerlink" title="5. 任务执行机制"></a>5. 任务执行机制</h2><p>线程池的本质是对<strong>任务和线程</strong>的管理，而做到这一点==最关键的思想就是将任务和线程两者解耦==，不让两者直接关联，才可以做后续的分配工作。</p><p>线程池中是以<strong>生产者消费者模式</strong>，通过一个阻塞队列来实现的。</p><p>阻塞队列缓存任务，工作线程（消费者）从阻塞队列中获取任务。</p><p>分为以下几个模块：</p><ul><li>任务调度</li><li>任务缓冲</li><li>任务申请</li><li>任务拒绝</li></ul><h3 id="5-1-任务调度"><a href="#5-1-任务调度" class="headerlink" title="5.1 任务调度"></a><strong>5.1 任务调度</strong></h3><p>一个任务提交到线程池了之后，会经过一下判断</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210526225421822.png" alt="image-20210526225421822"></p><h3 id="5-2-任务缓冲"><a href="#5-2-任务缓冲" class="headerlink" title="5.2 任务缓冲"></a><strong>5.2 任务缓冲</strong></h3><p>任务缓冲模块是线程池能够管理任务的<strong>核心部分</strong>。</p><p>线程池的本质是对<strong>任务和线程</strong>的管理，而做到这一点==最关键的思想就是将任务和线程两者解耦==，不让两者直接关联，才可以做后续的分配工作。</p><p>线程池中是以<strong>生产者消费者模式</strong>，通过一个阻塞队列来实现的。</p><p>阻塞队列缓存任务，工作线程（消费者）从阻塞队列中获取任务。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210526232913936.png" alt="阻塞队列示意"></p><blockquote><p>阻塞队列(BlockingQueue)是一个支持两个附加操作的队列。</p><p>这两个附加的操作是：</p><ul><li>在队列为空时，获取元素的线程会等待队列变为非空。</li><li>当队列满时，存储元素的线程会等待队列可用。</li></ul><p>阻塞队列常用于生产者和消费者的场景：</p><ul><li>生产者是往队列里添加元素的线程</li><li>消费者是从队列里拿元素的线程</li></ul><p>阻塞队列就是生产者存放元素的<strong>容器</strong>，而消费者也只从容器里拿元素。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210526230357982.png" alt="阻塞队列成员"></p></blockquote><h3 id="5-3-任务申请"><a href="#5-3-任务申请" class="headerlink" title="5.3 任务申请"></a>5.3 任务申请</h3><p>任务的执行有两种可能：</p><ul><li>一种是<strong>任务直接由新创建的线程执行</strong>（仅出现在线程初始创建的时候）</li><li>另一种是线程从<strong>任务队列中获取任务</strong>然后执行，执行完任务的空闲线程会再次去从队列中申请任务再去执行（线程获取任务绝大多数的情况）</li></ul><p>线程池中的<strong>线程</strong>去<strong>申请任务</strong>的步骤：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210526231424192.png" alt="线程申请任务步骤"></p><p>申请任务时，通过一个 <code>getTask()</code>去执行，经过以上判断的<strong>目的是为了防止线程池中的线程过多，控制线程数量</strong>。</p><h3 id="5-4-任务拒绝"><a href="#5-4-任务拒绝" class="headerlink" title="5.4 任务拒绝"></a>5.4 任务拒绝</h3><p>任务拒绝模块是线程池的==保护部分==。</p><p>线程池有一个<strong>最大的容量</strong>，当线程池的<strong>任务缓存队列已满</strong>，并且线程池中的<strong>线程数目达到maximumPoolSize</strong>时，就需要拒绝掉该任务，采取任务拒绝策略，保护线程池。</p><p><code>RejectedExecutionHandler</code> 是一个<strong>接口</strong>，可以自定义拒绝策略。</p><p>也可以用JDK自带的4种拒绝策略：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210526232150795.png" alt="JDK自带的4种拒绝策略"></p><h2 id="6-使用场景举例"><a href="#6-使用场景举例" class="headerlink" title="6.使用场景举例"></a>6.使用场景举例</h2><h3 id="场景1：快速响应用户请求"><a href="#场景1：快速响应用户请求" class="headerlink" title="场景1：快速响应用户请求"></a><strong>场景1：快速响应用户请求</strong></h3><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210527112123842.png" alt="并行执行任务提升任务响应速度"></p><blockquote><p><strong>描述</strong>：用户发起的实时请求，服务追求响应时间。比如说用户要查看一个商品的信息，那么我们需要将商品维度的一系列信息如商品的价格、优惠、库存、图片等等聚合起来，展示给用户。</p></blockquote><p>这种场景最重要的就是获取最大的响应速度去满足用户，</p><p>所以应该<strong>不设置队列去缓冲并发任务</strong>，<strong>调高corePoolSize和maxPoolSize</strong>去<strong>尽可能创造多的线程</strong>快速执行任务。</p><h3 id="场景2：快速处理批量任务"><a href="#场景2：快速处理批量任务" class="headerlink" title="场景2：快速处理批量任务"></a><strong>场景2：快速处理批量任务</strong></h3><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210527112403454.png" alt="并行执行任务提升批量任务执行速度"></p><blockquote><p><strong>描述</strong>：离线的大量计算任务，需要快速执行。比如说，统计某个报表，需要计算出全国各个门店中有哪些商品有某种属性，用于后续营销策略的分析，那么我们需要查询全国所有门店中的所有商品，并且记录具有某属性的商品，然后快速生成报表。</p></blockquote><p>这类场景任务量巨大，并不需要瞬时的完成，而是关注如何使用有限的资源，尽可能在单位时间内处理更多的任务，也就是吞吐量优先的问题。</p><p>设置<strong>队列去缓冲并发任务</strong>，调整合适的corePoolSize去设置处理任务的线程数</p><p>设置的<strong>线程数过多</strong>可能还会引发线程上下文切换频繁的问题，也会降低处理任务的速度，降低吞吐量。</p><h2 id="7-几个对比"><a href="#7-几个对比" class="headerlink" title="7. 几个对比"></a>7. 几个对比</h2><ul><li>Runnable 与 Callable：前者不抛异常/返回结果，后者会</li><li>execute() 与 submit()：前者不会返回结果，后者会</li><li>shutdown() 与 shutdownNow()：前者会等待队列中的任务执行完毕，后者不会</li><li>isShutdown() 与 isTeminated() ：前者是shutdown()了之后就true，后者是等全部执行完成了之后才true</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>如何回答线程池原理：</p><p>感觉只要答出，任务–线程解耦，以及阻塞队列，生产者消费者模式，就可以了，这几个是重点。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>B树与B+树简单了解</title>
      <link href="2021/05/21/B%E6%A0%91%E4%B8%8EB-%E6%A0%91%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3/"/>
      <url>2021/05/21/B%E6%A0%91%E4%B8%8EB-%E6%A0%91%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="关于B树和B-树"><a href="#关于B树和B-树" class="headerlink" title="关于B树和B+树"></a>关于B树和B+树</h4><blockquote><p>小灰算法</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&amp;mid=2653190965&amp;idx=1&amp;sn=53f78fa037386f85531832cd5322d2a0&amp;chksm=8c9909efbbee80f90512f0c36356c31cc74c388c46388dc2317d43c8f8597298f233ca9c29e9&amp;scene=21#wechat_redirect">漫画：什么是B-树？</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&amp;mid=2653191027&amp;idx=1&amp;sn=4ba22e3ec8bd149f69fc0aba72e4347e&amp;chksm=8c9909a9bbee80bfa1d8497ff0525df130414c1731b5aa5287bf16ea1cf86c8d8e6f20782184&amp;scene=21#wechat_redirect">漫画：什么是B+树？</a></p></blockquote><h5 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h5><h6 id="为什么要使用B-树"><a href="#为什么要使用B-树" class="headerlink" title="为什么要使用B-树"></a>为什么要使用B-树</h6><p>二叉查找树速度和比较次数都是最小的，但是需要考虑<strong>磁盘IO问题</strong>。</p><p><strong>数据库索引是存在磁盘上的</strong>，加载的时候不可能整个索引都加载到内存，只能逐一加载每一个磁盘页（每一个磁盘页对应一个索引树节点）。</p><p>首先假设一颗二叉查找树:</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210521202605242.png" alt="二叉查找树"></p><p>其<strong>查找次数最大为树的高度</strong>，也就是要进行4次磁盘IO。</p><p><strong>将“瘦高”的树变得“矮胖”</strong>。</p><p>B树（就是B-树）主要目的是<strong>为了解决磁盘IO次数</strong>的。其中每个节点包括k个孩子，k取决于磁盘页大小。</p><p>k最大值就是k阶B树（下面这个应该是3阶B树）</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210521202407286.png" alt="举例一个B树"></p><p>其改善的地方，就是<strong>每个节点都是一个磁盘页</strong>，每次加载会将这一整个节点加载到内存中。在内存中比较的速度比磁盘IO快多了。</p><h6 id="B-树插入"><a href="#B-树插入" class="headerlink" title="B-树插入"></a>B-树插入</h6><p><strong>B-树一大优势：自平衡</strong></p><p>插入过程比较麻烦，涉及到节点分裂。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210521203906045.png" alt="插入4"></p><p>节点3，5已经是两元素节点，无法再增加。父亲节点 2， 6 也是两元素节点，也无法再增加。根节点9是单元素节点，可以升级为两元素节点。于是<strong>拆分</strong>节点3，5与节点2，6，让根节点9升级为两元素节点4，9。节点6独立为根节点的第二个孩子。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210521203927763.png" alt="节点分裂平衡"></p><h6 id="B-树删除"><a href="#B-树删除" class="headerlink" title="B-树删除"></a>B-树删除</h6><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210521204113459.png" alt="删除11"></p><p>删除11后，节点12只有一个孩子，不符合B树规范。因此找出12,13,15三个节点的中位数13，取代节点12，而节点12自身下移成为第一个孩子。（这个过程称为<strong>左旋</strong>）</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210521204158580.png" alt="B-树左旋"></p><h5 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+树"></a>B+树</h5><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210521204828678.png" alt="B+树举例"></p><p>性质1：父节点中的元素，出现在了子节点中，而且是其中最大的；</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210521204913216.png" alt="重复元素"></p><p>性质2：因为包括父节点元素，所以说叶子节点中，包括所有元素。而且连在一起成了个链表</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210521205055673.png" alt="叶子节点"></p><p>卫星数据：卫星其实就是索引，一个指针，指向实际地址。下面图里的Data就是卫星数据。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210521205232096.png" alt="B-树中的卫星数据"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210521205255618.png" alt="B+树中的卫星数据"></p><p>在数据库的<strong>聚集索引</strong>（Clustered Index）中，叶子节点直接包含数据。MySQL中的InnoDB引擎。</p><p>在<strong>非聚集索引</strong>（NonClustered Index）中，叶子节点带有指向数据的指针。MySQL中MyISAM引擎。</p><h6 id="与B-树对比"><a href="#与B-树对比" class="headerlink" title="与B-树对比"></a>与B-树对比</h6><p>其查询：</p><p>B+树中间节点没有存储卫星数据（全在叶子节点上），所以说可以<strong>存储更多索引</strong>。IO次数更少</p><p>B+树必须查询到<strong>叶子节点</strong>，而B-树不一定。</p><p>B+树查询<strong>稳定</strong>，B-树则不是。</p><h6 id="范围查询"><a href="#范围查询" class="headerlink" title="范围查询"></a>范围查询</h6><p>查询分为单元素查询，和范围查询。</p><p>单元素查询比较容易理解；</p><p>而范围查询是指查询一个范围，比如“3到11”之间的所有数字。</p><p>B-树必须要去树的<strong>中序遍历</strong>；</p><p>而B+树在找到3之后，根据叶子节点的<strong>链表</strong>可以直接查询到。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210521211511367.png" alt="叶子节点链表遍历"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><h5 id="B树"><a href="#B树" class="headerlink" title="B树:"></a>B树:</h5><ul><li>为了解决磁盘IO问题，使用B树。一个节点就是一个磁盘页。</li><li>B树插入与删除比较麻烦，需要节点分裂与自旋，重要特性自平衡。</li><li>MongoDB和文件系统使用B-树。</li></ul><h5 id="B-树："><a href="#B-树：" class="headerlink" title="B+树："></a>B+树：</h5><ul><li>B+树只在叶子节点中存入数据，而非叶子节点中存的只是索引。<ul><li>所以说B+树一定要查到叶子节点，稳定查询。而B树则不是。</li><li>所以说一个非叶子节点存的比B树的更多，更能解决磁盘IO问题。</li></ul></li><li>B+树子节点中包括父节点的数据，所以说叶子节点包括所有数据。</li><li>而且叶子节点之间用指针相连，形成了一个链表。做范围查询非常简单。</li></ul><h5 id="数据库索引"><a href="#数据库索引" class="headerlink" title="数据库索引"></a>数据库索引</h5><p>MySQL中B+树索引与哈希索引。</p><p>B+树索引：</p><ul><li>非聚簇索引：MySQL的MyISAM引擎，B+树节点里面存储的是索引与数据地址。</li><li>聚簇索引：MySQL的InnoDB引擎<ul><li>主索引：非叶子节点存储主键，叶子节点存储数据；</li><li>辅助索引：节点中存主键，然后再根据主索引去找。</li></ul></li></ul><p>哈希索引：</p><ul><li>MyISAM不支持</li><li>InnoDB会自动在使用频繁的数据上添加，自动在B+树索引的基础上创建一个哈希索引。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 后端 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM内存区域</title>
      <link href="2021/05/20/JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/"/>
      <url>2021/05/20/JVM%E5%86%85%E5%AD%98%E5%8C%BA%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="JVM内存区域（重要！）"><a href="#JVM内存区域（重要！）" class="headerlink" title="JVM内存区域（重要！）"></a>JVM内存区域（重要！）</h3><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210520105743387.png" alt="JDK1.8之前"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210520105816189.png" alt="JDK1.8之后"></p><p>分为线程共享和线程私有的两种内存：</p><ul><li>线程私有<ul><li>程序计数器（唯一不会出现<code>OutOfMemoryError</code> 内存溢出错误的区域）</li><li>虚拟机栈</li><li>本地方法栈</li></ul></li><li>线程共享<ul><li>堆</li><li>方法区（1.8之后去掉改为本地内存内的元空间）<ul><li>运行时常量池</li></ul></li></ul></li><li>本地内存<ul><li>直接内存</li><li>元空间</li></ul></li></ul><p>下面详细解释一下：</p><h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a><strong>程序计数器</strong></h4><ul><li>唯一不会出现<code>OutOfMemoryError</code> 内存溢出错误的区域</li><li>记录线程的暂停与继续执行的<strong>指令</strong>行</li><li>分支/循环/跳转等流程控制</li></ul><h4 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a><strong>虚拟机栈</strong></h4><ul><li>传递<strong>调用方法</strong>时的数据</li><li>调用方法，栈帧入栈；方法结束（返回值/异常），栈帧出栈</li><li>局部变量表：编译期可知的数据类型/对象引用</li><li>两种错误<ul><li>StackOverFlowError：JVM虚拟机栈容量不允许动态扩展</li><li>OutOfMemoryError：JVM虚拟机栈容量允许动态扩展但是超出内存</li></ul></li></ul><h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a><strong>本地方法栈</strong></h4><ul><li><p>其实与JVM栈一样，不过调用的是Native本地方法</p></li><li><p>线程共享</p></li></ul><h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a><strong>堆</strong></h4><ul><li>最大的一块</li><li>存放几乎所有<strong>对象实例</strong>及数组（JDK1.7之后不再那么绝对因为有<em>逃逸分析</em>）</li></ul><p>因为是垃圾回收主要负责的一块，也被称为GC堆。</p><hr><p>下面内容涉及垃圾回收的东西了。</p><p>可以根据垃圾回收继续细分：</p><p>在 JDK 7 版本及 JDK 7 版本之前，堆内存被通常被分为下面三部分：</p><ol><li>新生代内存(Young Generation)</li><li>老生代(Old Generation)</li><li>永生代(Permanent Generation)</li></ol><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210520112423368.png" alt="JVM堆内存结构-JDK7"></p><p>JDK 8 版本之后方法区（HotSpot 的永久代）被彻底移除了（JDK1.7 就已经开始了），取而代之是元空间，元空间使用的是直接内存。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210520112606272.png" alt="元空间"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">b[Begin]--对象创建--&gt;Eden区 --一次新生代垃圾回收仍旧存活--&gt; age[年龄+1,进入s0/s1 ]--超过阈值--&gt;进入老年代</span><br><span class="line">b--大对象--&gt;老年代</span><br><span class="line">subgraph 新生代划分</span><br><span class="line">新生代--&gt;.Eden区</span><br><span class="line">新生代--&gt;Survivor区--&gt;s0</span><br><span class="line">Survivor区--&gt;s1</span><br><span class="line">end</span><br></pre></td></tr></tbody></table></figure><p>大部分情况，对象都会首先在 Eden 区域分配，在一次新生代垃圾回收后，如果对象还存活，则会进入 s0 或者 s1，并且对象的年龄还会加 1(Eden 区-&gt;Survivor 区后对象的初始年龄变为 1)，当它的年龄增加到一定程度（默认为 15 岁），就会被晋升到老年代中。对象晋升到老年代的年龄阈值，可以通过参数 <code>-XX:MaxTenuringThreshold</code> 来设置。</p><blockquote><p>“Hotspot 遍历所有对象时，按照年龄从小到大对其所占用的大小进行累积，当累积的某个年龄大小超过了 survivor 区的一半时，取这个年龄和 MaxTenuringThreshold 中更小的一个值，作为新的晋升年龄阈值”。</p></blockquote><ul><li>新生代<ul><li>新生代GC过程称为MinorGC，采用<strong>复制算法</strong></li></ul></li><li>老年代<ul><li>存放长生命周期对象，大对象（默认2KB~128KB)</li><li>老年代的CG过程称为MajorGC，采用<strong>标记-清除算法</strong>，不会频繁触发</li></ul></li></ul><h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>（1.8之后去掉改为本地内存内的元空间）</p><p><strong>方法区</strong>其实在<strong>Hotspot虚拟机</strong>中就是<strong>永久代</strong>（1.8之前），在1.8之后就是<strong>元空间</strong>。</p><p>方法区与 Java 堆一样，是各个线程共享的内存区域。</p><p>它用于存储已被虚拟机加载的Class类信息、常量、静态变量、即时编译器编译后的代码等数据。</p><p>方法区有JVM内存上限限制，元空间只有系统限制。</p><h4 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h4><p>JDK1.7之前，常量池全在永久代。</p><p>JDK1.7，字符串常量池在堆，运行时常量池在永久代</p><p>JDK1.8之后，字符串常量池在堆，运行时常量池在元空间。</p><h4 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h4><p><strong>直接内存并不是虚拟机运行时数据区的一部分，也不是虚拟机规范中定义的内存区域，但是这部分内存也被频繁地使用。而且也可能导致 OutOfMemoryError 错误出现。</strong></p><p>本机直接内存的分配不会受到 Java 堆的限制，但是，既然是内存就会受到本机总内存大小以及处理器寻址空间的限制。</p><p>总结一下：</p><ul><li>线程私有<ul><li>程序计数器（流程控制，线程暂停）</li><li>虚拟机栈（栈帧，方法调用）</li><li>本地方法栈（Native方法）</li></ul></li><li>线程共享<ul><li>堆（包含字符串常量池，最大的内存区域，垃圾回收主要管理区域，存储对象/数组）</li><li>方法区（永久代，后被替换为元空间）</li><li>本地内存<ul><li>元空间（包含运行时常量池）</li><li>直接内存（系统内存）</li></ul></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>依赖倒置原则</title>
      <link href="2021/05/19/%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/"/>
      <url>2021/05/19/%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="依赖倒置与控制反转"><a href="#依赖倒置与控制反转" class="headerlink" title="依赖倒置与控制反转"></a>依赖倒置与控制反转</h1><blockquote><ol><li><a href="https://www.jianshu.com/p/c3ce6762257c">六大设计原则之依赖倒置原则（DIP） - 简书 (jianshu.com)</a></li><li><a href="https://www.zhihu.com/question/23277575/answer/169698662">Spring IoC有什么好处呢？ - 知乎 (zhihu.com)</a></li></ol></blockquote><h2 id="DI依赖倒置"><a href="#DI依赖倒置" class="headerlink" title="DI依赖倒置"></a>DI依赖倒置</h2><p>首先是依赖倒置原则：</p><blockquote><p>1、上层模块不应该依赖底层模块，它们都应该依赖于抽象。<br>2、抽象不应该依赖于细节，细节应该依赖于抽象。</p></blockquote><p>举例：pizza店</p><p>无依赖倒置：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/9571610-1970cb0205d4a656.png" alt="依赖关系"></p><p>有依赖倒置：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/9571610-9917220623b99e19.png" alt="依赖倒置"></p><p>可以看出，上层的Pizza店依赖于抽象的接口Pizza，而不是直接依赖下层的细节实现对象。</p><p>总结：</p><ul><li>上层依赖抽象</li><li>细节依赖抽象</li></ul><h2 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h2><p>其次，控制反转，依赖注入是实现依赖倒置的一种方法。</p><p><img src="https://pic1.zhimg.com/v2-ee924f8693cff51785ad6637ac5b21c1_r.jpg?source=1940ef5c" alt="IOC与DI"></p><ul><li><p>依赖倒置原则，控制反转IOC，依赖注入DI</p></li><li><p>降低耦合</p></li><li><p>不用在上层类中调用下层的构造函数，而是直接将下层的对象构造好了之后传入上层类。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>{</span><br><span class="line">    <span class="keyword">private</span> Framework f;</span><br><span class="line">    Car(){</span><br><span class="line">        <span class="comment">// 如果下层的FrameWork类变动，需要传入参数，这个上层的Car类也需要改</span></span><br><span class="line">        <span class="keyword">this</span>.f = <span class="keyword">new</span> FrameWork();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>修改使用依赖倒置后，会变成：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span></span>{</span><br><span class="line"> <span class="keyword">private</span> FrameWork f;</span><br><span class="line">    <span class="comment">// 这样直接传入下层类对象过来就行了，而不需要具体关心其实现</span></span><br><span class="line">    Car(FrameWork f){</span><br><span class="line">        <span class="keyword">this</span>.f = f;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>上面是构造方法传入，还有Set传递和接口传递</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot常用注解</title>
      <link href="2021/05/15/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/"/>
      <url>2021/05/15/SpringBoot%E5%B8%B8%E7%94%A8%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-Boot常用注解"><a href="#Spring-Boot常用注解" class="headerlink" title="Spring Boot常用注解"></a>Spring Boot常用注解</h1><p>自己重新整理一下吧。</p><ol><li><p>首先是最常见的，请求路径相关的，主要就是Mapping：</p><ul><li><p>@RequestMapping：一个用来处理请求地址映射的注解，可用于<strong>类或方法</strong>上。用于类上，表示类中的所有响应请求的方法都是以该地址作为<strong>父路径</strong>；</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/notice")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysNoticeController</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>{</span><br><span class="line">    ……</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>@PostMapping：新建，insert数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AjaxResult <span class="title">add</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> SysNotice notice)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    notice.setCreateBy(SecurityUtils.getUsername());</span><br><span class="line">    <span class="keyword">return</span> toAjax(noticeService.insertNotice(notice));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>@GetMapping：获取，select数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/list")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TableDataInfo <span class="title">list</span><span class="params">(SysNotice notice)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    startPage();</span><br><span class="line">    List&lt;SysNotice&gt; list = noticeService.selectNoticeList(notice);</span><br><span class="line">    <span class="keyword">return</span> getDataTable(list);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>@PutMapping：修改，update数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AjaxResult <span class="title">edit</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> SysNotice notice)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    notice.setUpdateBy(SecurityUtils.getUsername());</span><br><span class="line">    <span class="keyword">return</span> toAjax(noticeService.updateNotice(notice));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>@DeleteMapping：删除，delete数据</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping("/{noticeIds}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> AjaxResult <span class="title">remove</span><span class="params">(<span class="meta">@PathVariable</span> Long[] noticeIds)</span></span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">return</span> toAjax(noticeService.deleteNoticeByIds(noticeIds));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul></li><li><p>其次是各个层次的，标明这个类属于什么类型的：</p><ul><li><p>@SpringBootApplication：启动类，是个组合注解，里面包括@Configuration，@EnableAutoConfiguration，@ComponentScan等</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="meta">@EnableAutoConfiguration</span></span><br><span class="line"><span class="meta">@ComponentScan(excludeFilters = { @Filter(type = FilterType.CUSTOM, classes = TypeExcludeFilter.class),</span></span><br><span class="line"><span class="meta">@Filter(type = FilterType.CUSTOM, classes = AutoConfigurationExcludeFilter.class) })</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> SpringBootApplication {……}</span><br></pre></td></tr></tbody></table></figure></li><li><p>@Controller：返回一整个页面，View</p></li><li><p>@RestController：控制层组件，包含@Controller和@ResponseBody，一般返回JSON</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target({ElementType.TYPE})</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController {……}</span><br></pre></td></tr></tbody></table></figure></li><li><p>@Service：业务层组件</p></li><li><p>@Configuration：配置类</p></li><li><p>@Component：组件类，泛指组件，组件不好归类可以使用这个</p></li></ul></li><li><p>参数注解：</p><ul><li><p>@PathVariable：路径变量。参数与大括号里的名字一样要相同</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RequestMapping(<span class="string">"user/get/mac/{macAddress}"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getByMacAddress</span><span class="params">(<span class="meta">@PathVariable</span> String macAddress)</span></span>{</span><br><span class="line">　　<span class="comment">//do something;</span></span><br><span class="line">　　}</span><br></pre></td></tr></tbody></table></figure></li><li><p>@RequestBody：返回结果直接写入HTTP response body中</p></li></ul></li><li><p>功能性注解：</p><ul><li><p>@Autowired：自动注入</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ISysNoticeService noticeService;</span><br></pre></td></tr></tbody></table></figure></li><li><p>@EnableAutoConfiguration：启用自动配置</p></li><li><p>@ComponentScan：指定路径下扫描组件，如果扫描到有@Component @Controller @Service等这些注解的类，则把</p><p>这些类注册为bean</p></li><li><p>@Bean：方法上，返回的对象注入到IOC容器中</p></li></ul></li></ol><p>这些差不多够他喝一壶了吧。。。感觉最常用的都有了。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker简单学习</title>
      <link href="2021/05/09/Docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/"/>
      <url>2021/05/09/Docker%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="Docker简单学习"><a href="#Docker简单学习" class="headerlink" title="Docker简单学习"></a>Docker简单学习</h1><p>这里没叙述安装啥的过程，Linux里面安装很简单的。而且Docker官方文档写的挺明白的。</p><blockquote><p>这个主要看的B站视频：<a href="https://www.bilibili.com/video/BV1R4411F7t9">https://www.bilibili.com/video/BV1R4411F7t9</a></p><iframe src="//player.bilibili.com/player.html?aid=58402749&amp;bvid=BV1R4411F7t9&amp;cid=101870925&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></blockquote><h2 id="Docker概念图"><a href="#Docker概念图" class="headerlink" title="Docker概念图"></a>Docker概念图</h2><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210509202234962.png" alt="image-20210509202234962"></p><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2><p>体验学习Docker的一个网站：<a href="https://labs.play-with-docker.com/%EF%BC%8C%E6%8F%90%E4%BE%9B%E4%B8%80%E4%B8%AA%E5%9C%A8%E7%BA%BF%E7%8E%AF%E5%A2%83%E7%9B%B4%E6%8E%A5%E4%BD%BF%E7%94%A8%E3%80%82">https://labs.play-with-docker.com/，提供一个在线环境直接使用。</a></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210509213624353.png" alt="image-20210509213624353"></p><p>默认给4小时的学习时间，200是指已经运行的镜像映射的服务器端口。</p><hr><h2 id="基本命令"><a href="#基本命令" class="headerlink" title="基本命令"></a>基本命令</h2><h3 id="镜像操作"><a href="#镜像操作" class="headerlink" title="镜像操作"></a>镜像操作</h3><ul><li><p>pull nginx 镜像：<code>docker pull nginx</code>（等效于nginx:latest）<br>从远程仓库下载已经有了的镜像</p></li><li><p>查看镜像列表：<code>docker images</code> （本机已有的镜像）或者 <code>docker image ls</code></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210509203714096.png" alt="image-20210509203714096"></p></li><li><p>删除镜像：docker rmi【 name】</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210509211840818.png" alt="image-20210509211840818"></p></li></ul><h3 id="容器操作"><a href="#容器操作" class="headerlink" title="容器操作"></a>容器操作</h3><ul><li>运行：<code>docker run 【-d】（后台运行不阻塞shell） 【-p 81:80】（指定容器端口映射，内部：外部） nginx（镜像名）</code><blockquote><p>端口映射是说Docker虚拟机内的端口81，映射到现在服务器的端口80。外部访问服务器端口80，然后服务器再去访问Docker虚拟机的端口81。</p></blockquote></li><li>查看正在运行的镜像（容器）：<code>docker ps</code><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210509203923649.png" alt="image-20210509203923649"></li></ul><ul><li><p>进入Docker虚拟机的镜像（容器）中的bash：docker exec -it container id(不用打全，前缀区分) bash</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210509204023115.png" alt="image-20210509204023115"></p></li><li><p>删除容器（停止运行）：docker rm -f 【container id】(不用打全，前缀区分)<br><img src="C:/Users/15220/AppData/Roaming/Typora/typora-user-images/image-20210509205659303.png" alt="image-20210509205659303"></p></li><li><p>commit镜像：docker commit  【id】(不用打全，前缀区分)  name<br>镜像修改过之后可以用这个搞一个copy的<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210509205925321.png" alt="image-20210509205925321"></p></li></ul><h3 id="DockerFile构建新镜像"><a href="#DockerFile构建新镜像" class="headerlink" title="DockerFile构建新镜像"></a>DockerFile构建新镜像</h3><p>编写DockerFile，然后从DockerFile来从已有镜像构建新镜像</p><p>比如我们这里在当前目录<code>./</code>下新建了一个<code>index.html</code>，然后复制到虚拟机中的<code>nginx/html</code>下，替换掉默认的首页。</p><figure class="highlight dockerfile"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从nginx镜像来构建</span></span><br><span class="line"><span class="keyword">From</span> nginx</span><br><span class="line"><span class="comment"># 复制./目录下所有文件，到虚拟机的html文件夹下</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> ./ /usr/share/nginx/html/</span></span><br></pre></td></tr></tbody></table></figure><p>  <img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210509210407064.png" alt="image-20210509210407064"></p><p>使用Dockerfile构建镜像：<code>docker build -t [NewImageName] [存放Dockerfile的文件夹]</code><br>如下，注意最后有个点 <code>.</code> 指的是当前目录</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210509210728371.png" alt="image-20210509210728371"></p><p> 最后通过m2的100端口运行一下可以看到新镜像的效果。</p><h3 id="tar文件"><a href="#tar文件" class="headerlink" title="tar文件"></a>tar文件</h3><p>保存为tar：docker save name  tar name</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210509211925462.png" alt="image-20210509211925462"></p><p>从tar加载：docker load &lt;  [文件名]</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210509213526053.png" alt="image-20210509213526053"></p><p>扩展命令：<code>docker run -d -p 200:80 -v $(pwd):/use/share/nginx/html/ –name test nginx:1.13</code></p><p>使用200映射内部80端口，使用当前路径$(pwd)映射到内部html文件夹下，运行时名称显示test，nginx镜像版本使用1.13</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210509212627874.png" alt="image-20210509212627874"></p><ul><li>Powershell下使用：${pwd}</li><li>Linux下使用：$(pwd)</li></ul><iframe src="//player.bilibili.com/player.html?aid=58402749&amp;bvid=BV1R4411F7t9&amp;cid=101870925&amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 运维 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>influxDB简单学习</title>
      <link href="2021/05/05/influxDB%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/05/05/influxDB%E7%AE%80%E5%8D%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>学习一下InfluxDB</p><blockquote><p><a href="http://www.linuxdaxue.com/noun-interpretation-of-influxdb.html">InfluxDB学习之InfluxDB的基本概念</a></p><p><a href="https://jasper-zhang1.gitbooks.io/influxdb/content/">InfluxDB中文文档 (gitbooks.io)</a></p></blockquote><h3 id="重要特性"><a href="#重要特性" class="headerlink" title="重要特性"></a>重要特性</h3><ul><li><strong>极简架构：</strong>单机版的InfluxDB只需要安装一个binary，即可运行使用，完全没有任何的外部依赖。</li><li><strong>极强的写入能力：</strong> 底层采用自研的TSM存储引擎，TSM也是基于LSM的思想，提供极强的写能力以及高压缩率。</li><li><strong>高效查询：</strong>对Tags会进行索引，提供高效的检索。</li><li><strong>InfluxQL</strong>：提供SQL-Like的查询语言，极大的方便了使用，数据库在易用性上演进的终极目标都是提供Query Language。</li><li><strong>Continuous Queries</strong>: 通过CQ能够支持auto-rollup和pre-aggregation，对常见的查询操作可以通过CQ来预计算加速查询。</li></ul><h3 id="1-基本概念"><a href="#1-基本概念" class="headerlink" title="1. 基本概念"></a>1. 基本概念</h3><h4 id="一、与传统数据库中的名词做比较"><a href="#一、与传统数据库中的名词做比较" class="headerlink" title="一、与传统数据库中的名词做比较"></a>一、与传统数据库中的名词做比较</h4><table><thead><tr><th>influxDB中的名词</th><th>传统数据库中的概念</th></tr></thead><tbody><tr><td>database</td><td>数据库</td></tr><tr><td>measurement</td><td>数据库中的表</td></tr><tr><td>points</td><td>表里面的一行数据</td></tr></tbody></table><h4 id="二、InfluxDB中独有的概念"><a href="#二、InfluxDB中独有的概念" class="headerlink" title="二、InfluxDB中独有的概念"></a>二、InfluxDB中独有的概念</h4><h5 id="1）Point"><a href="#1）Point" class="headerlink" title="1）Point"></a>1）Point</h5><p>==Point（一行）==由<strong>时间戳（time）、数据（field）、标签（tags）</strong>组成。  </p><p>Point相当于传统数据库里的一行数据，如下表所示：</p><table><thead><tr><th>Point属性</th><th>传统数据库中的概念</th></tr></thead><tbody><tr><td>time</td><td>每个数据记录时间，是数据库中的主索引(会==自动生成==)</td></tr><tr><td>fields</td><td>各种记录值（==没有索引==的属性）也就是记录的值：温度， 湿度</td></tr><tr><td>tags</td><td>各种==有索引==的属性：地区，海拔（相当于要通过这个进行筛选查询？）</td></tr></tbody></table><h6 id="特别提醒："><a href="#特别提醒：" class="headerlink" title="特别提醒："></a>特别提醒：</h6><ol><li><p>==time 相当于表的主键==，当一条数据的<strong>time和tags完全相同</strong>时候，<strong>新数据会替换掉旧数据，旧数据则丢失</strong>（线上环境尤其要注意）。</p></li><li><p><strong>tags 和time可以作为排序字段，field则不可以</strong>。如：<code>ORDER BY time DESC</code></p></li><li><p>fields和tags的<strong>字段类型</strong>是由存入的第一条记录值决定的。</p><blockquote><p>举例：<br>如第一条记录<code>fieldA</code>的值为2，想插入一条记录，<code>fieldA</code>字段值为3.14的值，就会报错。因为该字段已经被初始化为整型了。<br>如第一条记录<code>fieldB</code>存储的是3,想插入一条记录，<code>fieldB</code>字段值为hello,则也会报错，该字段已被初始化成整型，不能再写入字符串了。</p></blockquote></li><li><p>建议只使用字符串类型和浮点类型，把所有的整型，长整型，浮点型，双精度型统一转为小数格式的浮点类型，再写入数据库，字符串类型的不用做转换，这样就不会出现插入数据失败和丢失数据了。</p></li></ol><h5 id="2）series"><a href="#2）series" class="headerlink" title="2）series"></a>2）series</h5><p>所有在数据库中的数据，都需要通过==图表来展示==，而这个series表示这个表里面的数据，可以==在图表上画成几条线==：通过tags排列组合算出来。 </p><p>如下所示：   </p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span><span class="keyword">show</span> series <span class="keyword">from</span> cpu</span><br><span class="line">key</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu<span class="operator">-</span>total,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu<span class="operator">-</span>total,host<span class="operator">=</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu0,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu0,host<span class="operator">=</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu1,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu1,host<span class="operator">=</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu10,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu10,host<span class="operator">=</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu11,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu11,host<span class="operator">=</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu12,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu12,host<span class="operator">=</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu13,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu13,host<span class="operator">=</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu14,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu14,host<span class="operator">=</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu15,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu15,host<span class="operator">=</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu16,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu17,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu18,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu19,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu2,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu2,host<span class="operator">=</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu20,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu21,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu22,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu23,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu3,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu3,host<span class="operator">=</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu4,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu4,host<span class="operator">=</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu5,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu5,host<span class="operator">=</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu6,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu6,host<span class="operator">=</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu7,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu7,host<span class="operator">=</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu8,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu8,host<span class="operator">=</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu9,host<span class="operator">=</span>ResourcePool<span class="number">-0246</span><span class="operator">-</span>billing07</span><br><span class="line">cpu,cpu<span class="operator">=</span>cpu9,host<span class="operator">=</span>billing07</span><br></pre></td></tr></tbody></table></figure><h3 id="2-基本操作"><a href="#2-基本操作" class="headerlink" title="2.基本操作"></a>2.基本操作</h3><p>InfluxDB提供类SQL语法，如果熟悉SQL的话会非常容易上手。</p><h4 id="一、InfluxDB操作方式"><a href="#一、InfluxDB操作方式" class="headerlink" title="一、InfluxDB操作方式"></a>一、InfluxDB操作方式</h4><p>InfluxDB提供三种操作方式：</p><p>1）客户端命令行方式</p><p>2）HTTP API接口</p><p>3）各语言API库</p><p>今天主要以命令行为例，为大家介绍下InfluxDB的基本操作，HTTP API接口和各种语言API库会在以后的文章中为大家详细介绍。</p><h4 id="二、InfluxDB数据库操作"><a href="#二、InfluxDB数据库操作" class="headerlink" title="二、InfluxDB数据库操作"></a>二、InfluxDB数据库操作</h4><p>与sql一样，以下是查增删用</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="keyword">show</span> databases</span><br><span class="line"><span class="operator">&gt;</span> <span class="keyword">create</span> database test</span><br><span class="line"><span class="operator">&gt;</span> <span class="keyword">drop</span> database test</span><br><span class="line"><span class="operator">&gt;</span> use xk_name</span><br></pre></td></tr></tbody></table></figure><h4 id="三、InfluxDB数据表操作"><a href="#三、InfluxDB数据表操作" class="headerlink" title="三、InfluxDB数据表操作"></a>三、InfluxDB数据表操作</h4><p>在InfluxDB当中，并没有表（table）这个概念，取而代之的是MEASUREMENTS，MEASUREMENTS的功能与传统数据库中的表一致，因此我们<strong>也可以将MEASUREMENTS称为InfluxDB中的表</strong>。</p><p>1）显示所有表</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="keyword">SHOW</span> MEASUREMENTS</span><br></pre></td></tr></tbody></table></figure><p>2）新建表</p><p>InfluxDB中没有显式的新建表的语句，只能通过insert数据的方式来建立新表。如下所示：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> disk_free,hostname<span class="operator">=</span>server01 <span class="keyword">value</span><span class="operator">=</span><span class="number">442221834240</span>i <span class="number">1435362189575692182</span></span><br><span class="line"># <span class="keyword">insert</span> 表名,索引<span class="operator">=</span>xxx,索引<span class="number">2</span><span class="operator">=</span>xxx value1<span class="operator">=</span>记录值<span class="number">1</span>,value2<span class="operator">=</span> <span class="type">time</span></span><br></pre></td></tr></tbody></table></figure><p>其中 disk_free 就是表名，hostname是索引，value=xx是记录值，记录值可以有多个，最后是指定的时间。</p><p>执行后结果如下</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="operator">&gt;</span> <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> disk_free</span><br><span class="line">name: disk_free</span><br><span class="line"><span class="comment">---------------</span></span><br><span class="line"><span class="type">time</span>            hostname    <span class="keyword">value</span></span><br><span class="line"><span class="number">1435362189575692182</span>    server01    <span class="number">442221834240</span></span><br></pre></td></tr></tbody></table></figure><p>以我们的数据来进行类比:</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line"><span class="attr">"Serial"</span>: <span class="number">123456</span>,                      <span class="comment">// 设备编号# 索引</span></span><br><span class="line"><span class="attr">"UploadTime"</span>: <span class="string">"2021-01-10 14:24:41"</span>,   <span class="comment">// 上传时间# 索引</span></span><br><span class="line"><span class="attr">"GasType"</span>: <span class="string">"VOC"</span>,                      <span class="comment">// 气体类型# 索引</span></span><br><span class="line"><span class="attr">"DataNum"</span>: <span class="number">2</span>,                          <span class="comment">// 数据条数# ？？？</span></span><br><span class="line"><span class="attr">"Rssi"</span>: <span class="number">30</span>,                            <span class="comment">// 信号值，网络信号 # ？？？</span></span><br><span class="line"><span class="attr">"Datas"</span>: [{                            <span class="comment">// 每条数据的集合# 记录值</span></span><br><span class="line"><span class="attr">"Data"</span>: <span class="number">0</span>,                            <span class="comment">// 数据值# value</span></span><br><span class="line"><span class="attr">"DateTime"</span>: <span class="string">"2021-01-10 14:21:00"</span>,    <span class="comment">// 数据时间# time</span></span><br><span class="line"><span class="attr">"Flw"</span>: <span class="string">"㎎/m³"</span>,                        <span class="comment">// 数据单位# value</span></span><br><span class="line"><span class="attr">"State"</span>: <span class="number">1</span>,                           <span class="comment">// 状态# value</span></span><br><span class="line"><span class="attr">"StateDetail"</span>: <span class="string">"正常"</span>                   <span class="comment">// 状态名称# value</span></span><br><span class="line">}, {</span><br><span class="line"><span class="attr">"Data"</span>: <span class="number">0</span>,</span><br><span class="line"><span class="attr">"DateTime"</span>: <span class="string">"2021-01-10 14:24:00"</span>,</span><br><span class="line"><span class="attr">"Flw"</span>: <span class="string">"㎎/m³"</span>,</span><br><span class="line"><span class="attr">"State"</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">"StateDetail"</span>: <span class="string">"正常"</span></span><br><span class="line">}]</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> testiii,Serial<span class="operator">=</span><span class="number">222222</span>,GasType<span class="operator">=</span>VOC Data<span class="operator">=</span><span class="number">0.565</span>,State<span class="operator">=</span><span class="number">2</span>i,StateDetail<span class="operator">=</span>"高报",Flw<span class="operator">=</span>"mg/m3",Rssi<span class="operator">=</span><span class="number">30</span></span><br></pre></td></tr></tbody></table></figure><p>3）查询要注意时区：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> disk <span class="keyword">where</span> <span class="type">time</span> <span class="operator">&gt;=</span> <span class="string">'2018-11-23 14:30:39'</span> <span class="keyword">and</span> <span class="type">time</span> <span class="operator">&lt;=</span> <span class="string">'2018-11-23 14:32:32'</span> tz(<span class="string">'Asia/Shanghai'</span>)</span><br></pre></td></tr></tbody></table></figure><p>按照北京时间查询</p><p>Windows环境下需要安装GO语言，然后重启。</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中的HashMap原理简单了解</title>
      <link href="2021/04/15/HashMap%E4%B8%8EConcurrentMap/"/>
      <url>2021/04/15/HashMap%E4%B8%8EConcurrentMap/</url>
      
        <content type="html"><![CDATA[<h4 id="认识HashMap"><a href="#认识HashMap" class="headerlink" title="认识HashMap"></a>认识HashMap</h4><blockquote><p>首先了解一下HashMap<br><a href="https://zhuanlan.zhihu.com/p/21673805">https://zhuanlan.zhihu.com/p/21673805</a></p><p>顺便附两个《小灰漫画》，感觉讲的不错：</p><ul><li><a href="https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&amp;mid=2653191907&amp;idx=1&amp;sn=876860c5a9a6710ead5dd8de37403ffc&amp;chksm=8c990c39bbee852f71c9dfc587fd70d10b0eab1cca17123c0a68bf1e16d46d71717712b91509&amp;scene=21#wechat_redirect">什么是HashMap</a></li><li><a href="https://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&amp;mid=2653192000&amp;idx=1&amp;sn=118cee6d1c67e7b8e4f762af3e61643e&amp;chksm=8c990d9abbee848c739aeaf25893ae4382eca90642f65fc9b8eb76d58d6e7adebe65da03f80d&amp;scene=21#wechat_redirect">多线程下的HashMap</a></li></ul></blockquote><h5 id="Map接口四个常用实现类"><a href="#Map接口四个常用实现类" class="headerlink" title="Map接口四个常用实现类"></a>Map接口四个常用实现类</h5><p>Java为数据结构中的映射定义了一个接口<code>java.util.Map</code>，此接口主要有四个常用的实现类：</p><ul><li>HashMap</li><li>Hashtable</li><li>LinkedHashMap</li><li>TreeMap</li></ul><p>类继承关系如下图所示：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/26341ef9fe5caf66ba0b7c40bba264a5_r.jpg" alt="Map继承关系"></p><h5 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h5><p>根据键的 hashCode 存储数据。</p><p>访问很快，遍历顺序不确定。</p><p>键允许一个为null的，记录允许多个为null的。</p><p>==非线程安全，即任一时刻可以有<strong>多个线程同时写HashMap</strong>，可能会导致数据的不一致==</p><p>如果需要满足线程安全，</p><ul><li>可以用 <strong><code>Collections.synchronizedMap()</code>方法</strong>使HashMap具有线程安全的能力</li><li>或者使用**<code>ConcurrentHashMap</code>**类</li></ul><h5 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h5><p><strong>遗留类，不建议使用</strong>。</p><p>与<code>HashMap</code>类似，不过是继承的<code>Dirctoinary</code>类。</p><ul><li>不需要线程安全的场合，用<code>HashMap</code>替代；</li><li>需要线程安全的场合，用<code>ConcurrentHashMap</code>替代</li></ul><p><code>Hashtable</code>是线程安全的，但是并发性不如<code>ConcurrentHashMap</code>，因为<code>ConcurrentHashMap</code>引入了分段锁。</p><h5 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h5><p><code>HashMap</code>的子类，带顺序的<code>HashMap</code>，<strong>保留了插入顺序</strong>。</p><p><code>Iterator</code>遍历时候，先得到的记录肯定是先插入的。</p><h5 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h5><p>实现了<code>SortedMap</code>接口，<strong>按key排序</strong>，默认按key的升序排序。</p><p><code>Iterator</code>遍历时候，是按排过序的key遍历的。</p><h4 id="HashMap原理"><a href="#HashMap原理" class="headerlink" title="HashMap原理"></a>HashMap原理</h4><p>搞清楚HashMap，首先需要知道HashMap是什么，即它的<strong>存储结构-字段</strong>；其次弄明白它能干什么，即它的<strong>功能实现-方法</strong>。下面我们针对这两个方面详细展开讲解。</p><h5 id="存储结构-字段"><a href="#存储结构-字段" class="headerlink" title="存储结构-字段"></a>存储结构-字段</h5><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210421191347092.png" alt="image-20210421191347092"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/v2-06aa0a5efbb324a67b23029206d9d9ac_1440w.jpg" alt="HashMap存储结构"></p><p>每一个<strong>下标</strong>位置被称为==桶==</p><ul><li>JDK1.8之前：数组 + 链表</li><li>JDK1.8之后：数组 + 链表 + 红黑树<ul><li>链表长度大于8，转换为红黑树</li></ul></li></ul><p>哈希表解决冲突方法：</p><ul><li>开放地址法</li><li>链地址法</li></ul><p>JDK中就是用的链地址法。简单来说，就是数组加链表的结合。</p><h5 id="功能实现-方法"><a href="#功能实现-方法" class="headerlink" title="功能实现-方法"></a>功能实现-方法</h5><p>一个Hash存储的 过程</p><blockquote><p>map.put(“美团”,”小美”);</p></blockquote><p>首先使用hashcode()方法，对key得到其HashCode值，然后Hash算法的后两步（高位运算和取模）定位该key对应的存储位置索引值。</p><p>可能定位到相同位置，就是发生了<strong>Hash碰撞</strong>。</p><ul><li>Hash算法越好，越不容易发生哈希碰撞。</li><li>当然如果Hash桶足够大，即使差的Hash算法也不容易碰撞。</li></ul><p>所以说要在<strong>空间（Hash桶）</strong>和<strong>时间（Hash散列算法）</strong>成本之间进行衡量。</p><p>==要做到碰撞概率小且空间少，好的Hash算法和扩容机制。==</p><h6 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h6><p>如何扩容：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> threshold;             <span class="comment">// 所能容纳的key-value对极限 </span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;    <span class="comment">// 负载因子</span></span><br><span class="line"><span class="keyword">int</span> modCount;  <span class="comment">// hashmap内部结构变化的次数(不包含key对应value被覆盖的情况)</span></span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">// 实际存储的数量</span></span><br></pre></td></tr></tbody></table></figure><ul><li><code>Node[] table</code> 的默认length为16</li><li><code>loadFactor</code> ，负载因子，默认为0.75（一般不要改）<ul><li>当空间不大，不要求时间的时候：<code>loadFactor</code> 可以增大，可以设为大于1</li><li>当空间足够，要求时间效率高，<code>loadFactor</code> 可以适当减小</li></ul></li><li>threshold = length * Load factor</li><li>当超出threshold时候，就进行扩容</li></ul><p>==Hash算法本质上就是三步：取key的hashCode值、高位运算、取模运算==</p><h6 id="JDK1-7扩容"><a href="#JDK1-7扩容" class="headerlink" title="JDK1.7扩容"></a>JDK1.7扩容</h6><p>扩容机制使用JDK1.7版本的来解释一下，因为它比较简单：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/e5aa99e811d1814e010afa7779b759d4_r.jpg" alt="扩容"></p><p>这里是使用key % size，来确定放入哪个哈希桶的。比如第一个中，3%2=1，所以说放到索引为1的桶中。</p><p>这里假设<code>LoadFactor = 1</code> , 那么<strong>当k-v的size大于桶的size的时候</strong>就扩容。所以说当<code>k_v.size() = 3</code>的时候，进行扩容，边为原来的<strong>两倍</strong>。</p><p><strong>JDK1.7中扩容之后需要重新Hash</strong>，即1.2.3的过程。</p><h6 id="JDK1-8扩容"><a href="#JDK1-8扩容" class="headerlink" title="JDK1.8扩容"></a>JDK1.8扩容</h6><p><strong>JDK1.8改进了，不需要再ReHash</strong>。（下面这一块关于位运算的没能看太懂）</p><p>使用了<strong>位运算</strong>的特点：<br>元素在重新计算hash之后，因为n变为2倍，那么n-1的mask范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/b2cb057773e3d67976c535d6ef547d51_r.jpg" alt="位运算"></p><p>因此，我们在扩充HashMap的时候，不需要像JDK1.7的实现那样重新计算hash，<strong>只需要看看原来的hash值新增的那个bit是1还是0就好了</strong>，是<strong>0的话索引没变</strong>，是<strong>1的话索引变成“原索引+oldCap”</strong>，可以看看下图为16扩充为32的resize示意图：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/544caeb82a329fa49cc99842818ed1ba_r.jpg" alt="JDK1.8扩容"></p><h6 id="HashMap-put-方法过程"><a href="#HashMap-put-方法过程" class="headerlink" title="HashMap.put()方法过程"></a>HashMap.put()方法过程</h6><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/58e67eae921e4b431782c07444af824e_r.jpg" alt="img"></p><h6 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h6><p>(1) 扩容是一个特别耗性能的操作，所以当程序员在使用HashMap的时候，估算map的大小，初始化的时候给一个大致的数值，避免map进行频繁的扩容。</p><p>(2) 负载因子是可以修改的，也可以大于1，但是建议不要轻易修改，除非情况非常特殊。</p><p>(3) HashMap是线程不安全的，不要在并发的环境中同时操作HashMap，建议使用ConcurrentHashMap。</p><p>(4) JDK1.8引入红黑树大程度优化了HashMap的性能。</p><p>(5) 还没升级JDK1.8的，现在开始升级吧。HashMap的性能提升仅仅是JDK1.8的冰山一角。</p><h4 id="线程安全的ConcurrentHashMap"><a href="#线程安全的ConcurrentHashMap" class="headerlink" title="线程安全的ConcurrentHashMap"></a>线程安全的ConcurrentHashMap</h4><blockquote><p><a href="https://mp.weixin.qq.com/s/AHWzboztt53ZfFZmsSnMSw">还不懂 ConcurrentHashMap ？这份源码分析了解一下 (qq.com)</a></p><p><a href="https://blog.csdn.net/weixin_44460333/article/details/86770169">HashMap？ConcurrentHashMap？相信看完这篇没人能难住你！_Java团长的博客-CSDN博客</a></p></blockquote><p>前面提过的Hashtable和这里的ConcurrentHashMap，都是线程安全的。</p><p>怎么保证线程安全呢，答案就是==加锁==。</p><p>Hashtable中，直接使用了<code>synchronized</code>关键字来对<code>put()</code>和<code>get()</code>方法加锁。但是在竞争强烈的情况下，其效率非常低下。</p><p>而ConcurrenHashMap中，使用了一个“分段锁”的东西。</p><p>简单来说，JDK1.7使用Segment分段锁，结构是segemtn数组加HashEntiy；JDK8采用 <code>synchronized</code> 加 CAS锁的方式，结构是Node数组加链表/红黑树。 </p><h5 id="JDK1-7中的ConcurrentHashMap"><a href="#JDK1-7中的ConcurrentHashMap" class="headerlink" title="JDK1.7中的ConcurrentHashMap"></a>JDK1.7中的ConcurrentHashMap</h5><p><img src="https://ss.csdn.net/p?https://mmbiz.qpic.cn/mmbiz_png/QCu849YTaIPf1sDCN5zcDdGsibZwyzy9rmnTSzibQ6VEBXUhicBWHFae47ShkNzCRB7SZibuUN6gDmGkfeB5saAMQQ/640?wx_fmt=png" alt="JDK1.7的ConcurrentHashMap结构图"></p><p>如图所示，<strong>是由 Segment 数组、HashEntry 组成</strong>，和 HashMap 一样，仍然是数组加链表。</p><p>ConcurrentHashMap的核心成员变量，主要就是这里的segments数组：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*&nbsp;Segment&nbsp;数组，存放数据时首先需要定位到具体的&nbsp;Segment&nbsp;中。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">final</span>&nbsp;Segment&lt;K,V&gt;[]&nbsp;segments;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span>&nbsp;Set&lt;K&gt;&nbsp;keySet;</span><br><span class="line"><span class="keyword">transient</span>&nbsp;Set&lt;Map.Entry&lt;K,V&gt;&gt;&nbsp;entrySet;</span><br></pre></td></tr></tbody></table></figure><p>然后去看Segment对象，ConcurrentMap的内部类，主要是table数组：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>&nbsp;<span class="keyword">final</span>&nbsp;<span class="class"><span class="keyword">class</span>&nbsp;<span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;&nbsp;<span class="keyword">extends</span>&nbsp;<span class="title">ReentrantLock</span>&nbsp;<span class="keyword">implements</span>&nbsp;<span class="title">Serializable</span>&nbsp;</span>{</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>&nbsp;<span class="keyword">static</span>&nbsp;<span class="keyword">final</span>&nbsp;<span class="keyword">long</span>&nbsp;serialVersionUID&nbsp;=&nbsp;<span class="number">2249069246763182397L</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//&nbsp;和&nbsp;HashMap&nbsp;中的&nbsp;HashEntry&nbsp;作用一样，真正存放数据的桶</span></span><br><span class="line"> <span class="keyword">transient</span>&nbsp;<span class="keyword">volatile</span>&nbsp;HashEntry&lt;K,V&gt;[]&nbsp;table;</span><br><span class="line"></span><br><span class="line"><span class="keyword">transient</span>&nbsp;<span class="keyword">int</span>&nbsp;count;</span><br><span class="line"><span class="keyword">transient</span>&nbsp;<span class="keyword">int</span>&nbsp;modCount;</span><br><span class="line"><span class="keyword">transient</span>&nbsp;<span class="keyword">int</span>&nbsp;threshold;</span><br><span class="line"><span class="keyword">final</span>&nbsp;<span class="keyword">float</span>&nbsp;loadFactor;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后看一下HashEntry的组成：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210618110453148.png" alt="image-20210618110453148"></p><p>HashEntry跟HashMap差不多的，但是不同点是，他使用 <strong>volatile</strong> 去修饰了他的数据 <strong>Value 还有下一个节点 next</strong>，保证了获取时的可见性。</p><h6 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h6><p>分为无参构造和有参构造，主要设置以下三个参数：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认初始化容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认负载因子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认并发级别</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</span><br></pre></td></tr></tbody></table></figure><h6 id="put方法"><a href="#put方法" class="headerlink" title="put方法"></a>put方法</h6><p>尝试获取锁，如果获取失败就表明有其他线程在竞争，利用自旋获取锁。自旋达到一定次数则阻塞。</p><h6 id="get方法"><a href="#get方法" class="headerlink" title="get方法"></a>get方法</h6><p>直接将 <code>key</code> 进行hash之后，定位到Segment上，再Hash一次定位到具体元素上。</p><p>因为 value 是通过 <code>volatile</code> 修饰的，保证了内存的可见性，所以说每次获取都是新值。</p><h5 id="JDK1-8中的ConcurrentHashMap"><a href="#JDK1-8中的ConcurrentHashMap" class="headerlink" title="JDK1.8中的ConcurrentHashMap"></a>JDK1.8中的ConcurrentHashMap</h5><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/java8_concurrenthashmap.png" alt="Java8 ConcurrentHashMap 存储结构（图片来自 javadoop）"></p><h6 id="put方法-1"><a href="#put方法-1" class="headerlink" title="put方法"></a>put方法</h6><ol><li><strong>Hash</strong>：根据 key 计算出 hashcode 。</li><li>判断是否需要进行<strong>初始化</strong></li><li>即为当前 key 定位出的 Node，如果为空表示当前位置可以写入数据，利用 CAS 尝试写入，失败则自旋保证成功。</li><li>如果当前位置的 hashcode == MOVED == -1,则需要进行扩容。</li><li>如果都不满足，则利用 synchronized 锁写入数据。如果数量大于 TREEIFY_THRESHOLD 则要转换为红黑树。</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">hashcode = Hash(Key);</span><br><span class="line"><span class="keyword">for</span>(遍历Node数组){</span><br><span class="line">    <span class="keyword">if</span>(Node数组为空){</span><br><span class="line">        初始化(Node数组);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( key 对应的 Node[hashcode] 的 value 为空){</span><br><span class="line">        <span class="keyword">if</span>( CAS写入(Node[hashcode]) ) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> 自旋；</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>( Node[hashcode] 不存在){</span><br><span class="line">    扩容；</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span>{</span><br><span class="line">        <span class="keyword">synchronized</span>锁写入;</span><br><span class="line">        <span class="keyword">if</span>(判断链表长度)</span><br><span class="line">            是否要转换为红黑树;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20210304170631489.png" alt="JDK1.8的ConcurrentMap.put()"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java垃圾收集算法初步了解</title>
      <link href="2021/04/13/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/"/>
      <url>2021/04/13/Java%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="Java垃圾收集算法初步了解"><a href="#Java垃圾收集算法初步了解" class="headerlink" title="Java垃圾收集算法初步了解"></a>Java垃圾收集算法初步了解</h1><p>GC算法，也就是Garbage Collected，垃圾回收算法。</p><ul><li>标记-清除算法</li><li>复制算法</li><li>标记-整理算法</li><li>分代收集算法</li></ul><h2 id="标记-清除算法"><a href="#标记-清除算法" class="headerlink" title="标记-清除算法"></a>标记-清除算法</h2><p>基础的垃圾回收算法，后面几个算法都是在这个基础上进行的改进。</p><p>就是进行最简单的，先对所有<strong>要回收的对象</strong>进行==标记==，<strong>标记完成之后</strong>直接统一==回收==。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210421160631263.png" alt="标记-回收算法"></p><p>问题：</p><ul><li>效率问题</li><li>空间问题（太多碎片）</li></ul><h2 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h2><p>这种方法是对标记-清除算法的改进，为了==<strong>改进其效率问题</strong>==</p><p>将内存分为两块，保持其中一块的空白。每次操作，比如新建对象什么的，只是其中的一块内存。</p><p>然后在进行垃圾回收时，首先还是对要回收的对象进行标记。<del>但是将剩余的仍然存活的对象，复制到另一块内存中并进行整理。</del> </p><p>然后在这块<strong>内存用完</strong>之后，将其中仍然存活的对象复制到另一块内存内，然后将用完的这一整块内存<strong>直接全部回收</strong>。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210421161713796.png" alt="复制算法"></p><h2 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h2><p>针对老年代特点（每次都有很多对象幸存）。</p><p>仍然是先进行<strong>标记</strong>，与标记-清除算法一样。</p><p>然后不是直接回收已标记内存，而是让所有<strong>存活对象向前移动</strong>，然后将<strong>边界以外</strong>的内存全部清除掉。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210421162026245.png" alt="标记-整理算法"></p><h2 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h2><p>没有啥新思想，只是根据不同的内存区域，也就是<strong>不同的“代”来采用不同的垃圾回收算法</strong>。</p><p>现在JVM都是用分代收集算法。</p><p>一般分为新生代和老年代。</p><ul><li>新生代：==每次收集都有大量对象死去==；所以说复制幸存的对象的成本低，可以采用<strong>复制算法</strong></li><li>老年代：==对象存活几率较高==；没有多余的内存空间可以使用，所以说采用<strong>标记-清除算法</strong>或者是<strong>标记-整理算法。</strong></li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java内存初探</title>
      <link href="2021/04/10/Java%E5%86%85%E5%AD%98%E5%88%9D%E6%8E%A2/"/>
      <url>2021/04/10/Java%E5%86%85%E5%AD%98%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="JVM的内存区域都有哪些"><a href="#JVM的内存区域都有哪些" class="headerlink" title="JVM的内存区域都有哪些"></a>JVM的内存区域都有哪些</h1><blockquote><p>主要内容整理自JavaGuide;</p></blockquote><p>JDK1.8与之前的是有些区别的。</p><p><img src="C:/Users/15220/AppData/Roaming/Typora/typora-user-images/image-20210419101239137.png" alt="JDK1.6"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210419101315248.png" alt="JDK1.8"></p><h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>可以分两类：</p><ul><li>线程私有的<ul><li>虚拟机栈</li><li>本地方法栈</li><li>程序计数器</li></ul></li><li>线程共享的<ul><li>堆</li><li>方法区</li><li>直接内存（非运行时数据区的一部分）</li></ul></li></ul><h2 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h2><p>自己理解，一句话概括：</p><p>同单片机/计组等一样，存储<strong>程序执行的指令/字节码位置</strong>；<br><strong>多线程</strong>下每个线程都各自有一个<strong>私有的</strong>，存储线程<strong>切换时的位置</strong>方便切换回来<strong>继续执行</strong>。</p><hr><p>简单理解可以认为是存储当前程序执行的行号的一个比较小的内存区域。</p><p>也就是指示<strong>当前执行指令</strong>的计数器。<strong>字节码解释器</strong>通过改变程序计数器中的值，选取<strong>下一条要执行的指令</strong>，控制指令的执行顺序，用于顺序、循环、判断、异常处理。</p><p>还有就是<strong>多线程</strong>情况下，每个线程都会有一个<strong>私有的程序计数器</strong>，当进行线程切换时记录当前线程执行到的位置，等切换回来之后再从这个地方继续执行。</p><blockquote><p>从上面的介绍中我们知道程序计数器主要有两个作用:<br>1．字节码解释器通过改变程序计数器来==依次读取指令==，从而实现代码的流程控制，如︰顺序执行、选择、循环、异常处理。<br>2．在多线程的情况下，程序计数器用于==记录当前线程执行的位置==，从而当线程被切换回来的时候能<br>够知道该线程上次运行到哪儿了。</p></blockquote><p>==<strong>程序计数器生命周期和线程一样</strong>==，随着线程创建而创建，随着线程结束而死亡。</p><p>程序计数器是唯一一个不会出现OutOfMemoryError 的内存区域。</p><h2 id="Java虚拟机栈"><a href="#Java虚拟机栈" class="headerlink" title="Java虚拟机栈"></a>Java虚拟机栈</h2><p>同样是线程私有的，同样是生命周期同线程。</p><p>Java方法执行的内存模型，方法调用传递的数据都是通过栈传递。</p><p>Java内存粗糙区分：</p><ul><li>栈内存，Stack指得就是Java虚拟机栈，或者说Java虚拟机栈中的局部变量表。<ul><li>局部变量表<ul><li>编译器可知的数据类型（基本数据类型）</li><li>对象引用（是引用，而不是对象）</li></ul></li></ul></li><li>堆内存，Heap。</li></ul><p>Java虚拟机栈会出现的两种异常：</p><ul><li>Java虚拟机栈，<strong>不允许动态扩展</strong>：线程请求栈深度，超过<strong>最大深度</strong>，就会报<code>StackOverFlowError</code>；</li><li>Java虚拟机栈，<strong>允许动态扩展</strong>：线程请求栈深度，内存用完了，<strong>没法再扩展</strong>了，就会报<code>OutOfMemoryError</code>;</li></ul><p>方法/函数调用过程中，每次<strong>方法调用</strong>就会<strong>压入</strong>Java虚拟机栈一个<strong>栈帧</strong>；每次<strong>方法返回</strong>就会<strong>弹出一个栈帧</strong>（正常return或者抛出异常）</p><h2 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h2><p>作用和Java虚拟机栈一毛一样，但是是用与Native方法的一个栈。</p><p>简单来说，<strong>Native方法</strong>是指Java调用非Java代码（如C++）方法。</p><p>在<strong>HotSpot虚拟机</strong>中这两个栈合为一个了。</p><blockquote><p><a href="https://ask.csdn.net/questions/235010">https://ask.csdn.net/questions/235010</a></p><p>JVM是虚拟机，总的来说是一种标准规范，虚拟机有很多实现版本。主要作用就是运行java的类文件的。</p><p>而HotSpot是虚拟机的一种实现，它是sun公司开发的，是sun jdk和open jdk中自带的虚拟机，同时也是目前使用范围最广的虚拟机。</p><p>HotSpot，顾名思义，它是基于热点代码探测的，有JIT即时编译功能，能提供更高质量的本地代码。</p><p>二者区别是一个是标准，一个是实现方式。</p></blockquote><ul><li>Java字节码方法：Java虚拟机栈</li><li>Native方法（非Java方法）：本地方法栈</li></ul><h2 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h2><ul><li>线程共享的</li><li>虚拟机启动时创建</li><li>最大的一块内存</li><li>存放对象实例及数组</li></ul><p>Java堆是<strong>垃圾收集器管理</strong>的主要区域，所以说也被称为GC堆（Garbage Collected Heap）。</p><p>垃圾回收的角度看，现在收集器基本采用<strong>分代垃圾收集算法</strong></p><ul><li>分代垃圾收集算法，细分为：<ul><li>新生代</li><li>老年代</li></ul></li><li>进一步细分<ul><li>Eden 空间</li><li>From Survivor 空间</li><li>To Survivor 空间</li></ul></li><li>细分目的<ul><li>更好的回收内存</li><li>更快的分配内存</li></ul></li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210419223201995.png" alt="image-20210419223201995"></p><p><code>eden , s0 , s1 </code>是新生代，tentired为老年代。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">graph </span><br><span class="line">在eden区新建对象 --1次新生代垃圾回收--&gt; 对象存活进入s0/s1,年龄增加1 --年龄到达阈值,默认为15--&gt; 晋升到老年代中</span><br></pre></td></tr></tbody></table></figure><p>其中阈值可以通过 <code>-XX:MaxTenuringThreshold</code> 来设置。</p><h2 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h2><p>主要用来存储：</p><p>已被虚拟机加载的：</p><ul><li>类信息</li><li>常量</li><li>静态变量</li><li>即时编译器编译后的代码等</li></ul><h3 id="方法区与永久代"><a href="#方法区与永久代" class="headerlink" title="方法区与永久代"></a>方法区与永久代</h3><p>方法区是Java规范中的说法。</p><p>而在HotSpot虚拟机中，实现是永久代。</p><p>JDK1.8之前是永久代(PermGen)，JDK1.8之后是元空间(MetaSpace)。</p><h3 id="为什么要将永久代换为元空间？"><a href="#为什么要将永久代换为元空间？" class="headerlink" title="为什么要将永久代换为元空间？"></a>为什么要将永久代换为元空间？</h3><p>永久代有一个JVM本身设置的固定大小的上限，超出它之后会报OutOfMemoryError</p><p>而元空间使用的是直接内存，不会报OutOfMemoryError。</p><p>这是其中原因之一，其他还有很多底层原因。</p><h3 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h3><blockquote><p><a href="https://blog.csdn.net/wangbiao007/article/details/78545189">https://blog.csdn.net/wangbiao007/article/details/78545189</a></p></blockquote><p>运行时常量池中存放的东西：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210419232528196.png" alt="image-20210419232528196"></p><p>运行时常量池</p><ul><li>在JDK1.7之前是在方法区内</li><li>在JDK1.7之后就放到堆Heap中了</li></ul><h2 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h2><p>不是JVM运行时数据区的一部分</p><p>也不是JVM规范中定义的内存区域</p><p>直接内存是在Java堆外的、直接向系统申请的内存区间</p><p>被频繁使用，也有可能导致OutOfMemoryError异常。</p><p>优点：<br>通过DirectByteBuffer对象操作Native内存通常，访问直接内存的速度会优于Java堆。即读写性能高。</p><p>缺点</p><ul><li>分配回收成本高</li><li>不受JVM内存管理回收</li></ul>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用于推荐系统的知识图卷积网络</title>
      <link href="2021/04/01/0401%E5%B0%86%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%8D%B7%E7%A7%AF%E7%BD%91%E7%BB%9C%E7%94%A8%E4%BA%8E%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/"/>
      <url>2021/04/01/0401%E5%B0%86%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1%E5%8D%B7%E7%A7%AF%E7%BD%91%E7%BB%9C%E7%94%A8%E4%BA%8E%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="用于推荐系统的知识图卷积网络"><a href="#用于推荐系统的知识图卷积网络" class="headerlink" title="用于推荐系统的知识图卷积网络"></a>用于推荐系统的知识图卷积网络</h1><h2 id="论文信息"><a href="#论文信息" class="headerlink" title="论文信息"></a>论文信息</h2><p>arXiv:1904.12575v1 [cs.IR] 18 Mar 2019</p><p>WWW ‘19: The Web Conference San Francisco CA USA May, 2019, pp. 3307-3313, 2019.</p><p>2019年WWW会议，国际万维网会议，A类交叉会议</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>为了==减轻基于协作过滤的稀疏和冷启动问题==，研究人员和工程师通常收集==用户和项目的属性==，并设计精细算法以利用这些附加信息。通常，该属性不是相互隔绝的而是彼此连接的，这可以从知识图（KG）中得到。</p><p>在本文中，我们提出了==知识图形卷积网络（KGCN）==，一个端到端框架，通过在KG上挖掘它们的关联属性有效地捕获项目间的相关性。</p><p>为了自动发现KG的==高阶结构信息和语义信息==，我们对<strong>KG中每个实体的邻居</strong>进行取样得到其表示，然后使用偏重bias结合邻近信息来进行计算一个给定实体的表示。</p><p>可以将接收领域扩展到距离频率的多个跳跃，以模拟高阶邻近信息并捕获用户的潜在的长距离兴趣。</p><p>此外，我们以小批次方式实现提出的KGCN，这使我们的模型能够在大型数据集和KG上运行。</p><p>我们将拟议的模型应用于关于电影，书籍和音乐推荐的三个数据集，实验结果表明我们的方法优于强大的推荐基线。</p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><ul><li>推荐系统</li><li>知识图谱</li><li>图卷积网络</li></ul><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><h3 id="推荐问题"><a href="#推荐问题" class="headerlink" title="推荐问题"></a>推荐问题</h3><p>随着互联网技术的推进，人们可以访问大量的在线内容，如新闻[25]，电影[5]和商品[26]。</p><p>在线平台的一个臭名昭着的问题是，物品的数量可以压倒用户。为了减轻信息过多的影响，可以用<strong>推荐系统（RS）</strong>来搜索并推荐一小部分物品以满足用户的个性化兴趣。</p><p>传统推荐技术是协作滤波（CF），其分配用户和项目的基于ID的表示向量，然后通过特定操作（如内部产品[16]或神经网络）进行模拟它们的交互[8]。</p><p>然而，==基于CF的方法通常遭受用户项目交互的稀疏性和冷启动问题==。为了解决这些限制，研究人员通常转向具有丰富的功能，其中==用户和物品的属性==用于补偿稀疏性并提高建议的性能[3,17]。</p><h3 id="知识图谱用于推荐"><a href="#知识图谱用于推荐" class="headerlink" title="知识图谱用于推荐"></a>知识图谱用于推荐</h3><p>最近的一些研究[9,18,19,22-24]比简单地使用属性进一步走了一步：</p><p>它们指出了该==属性不是被隔绝的，而是彼此联系，这形成了知识图（kg）==。</p><p>通常，kg是指向的异构图，其中节点对应于实体（项目或项目属性）和边缘对应于关系。</p><p>与无功的方法相比，==将KG纳入推荐中的提议==，其中三种方式有利于结果[18]：</p><ol><li>KG项目中的丰富语义相关性可以帮助探索其潜在的连接并提高结果的精度; </li><li>KG各种关系对于合理地扩展用户的兴趣以及增加推荐物品的多样性有助于扩展用户的兴趣; </li><li>kg连接用户的历史上最受欢迎和推荐的项目，从而为推荐系统带来可解释性。</li></ol><p>尽管有上述好处，但由于其高维度和异质性，利用KG在RS中是相当挑战。</p><h3 id="知识图片嵌入方法"><a href="#知识图片嵌入方法" class="headerlink" title="知识图片嵌入方法"></a>知识图片嵌入方法</h3><p>一种可行的方式是通过==知识图形嵌入（KGE）方法[20]预处理KG==，将其映射实体和与低维表示向量的关系[9,19,23]。</p><p>然而，普通使用的KGE方法侧重于建模严格的语义相关性（例如，Transe [1]和Transr [12]假设头+关系=尾部），其更适合于图形应用程序，例如KG完成和链接预测比推荐。</p><h3 id="知识图谱结构图形算法"><a href="#知识图谱结构图形算法" class="headerlink" title="知识图谱结构图形算法"></a>知识图谱结构图形算法</h3><p>一种更自然和直观的方式是==利用KG结构直接设计图形算法==。</p><p>1.FMG</p><p>例如，每个[22]和FMG [24]将kg作为异构信息网络，并提取基于元路径/元图的潜在特征，以表示用户和项目之间的连接沿不同类型的关系路径/图形。</p><p>然而，每次和FMG严重依赖于手动设计的元路径或元图，这几乎不会在现实中最佳。 </p><p>2.RippleNet</p><p>Ripplenet [18]是一种类似的内存网络型模型，可在KG中传播用户的潜在偏好，并探讨其分层兴趣。但注意，关系的重要性在突破平板上略微表征，因为关系R的嵌入矩阵几乎不能接受训练，以捕获二次形式的$V^⊤Rh$（v和h是两个实体的嵌入矢量）的重要特征。另外，Ripple集合的大小可以随着KG大小的增加而不可预测的，这引起了巨大的计算和存储开销。</p><h3 id="本文提出KGCN"><a href="#本文提出KGCN" class="headerlink" title="本文提出KGCN"></a>本文提出KGCN</h3><p>在本文中，我们调查了KG结合推荐的问题。</p><p>我们的设计目标是在KG中自动捕获高阶结构和语义信息。</p><p>灵感来自图卷积网络（GCN）1，尝试将卷积概括为图形域，我们向推荐系统提出<strong>知识图形卷积网络（KGCN）</strong>。</p><p>当计算KG中给定实体的表示时，==KGCN的关键概念是聚合和合并邻居信息==。</p><p>这种设计具有两个<strong>优点</strong>：</p><p>（1）通过邻域聚合的操作，成功捕获<strong>本地接近结构</strong>并将其存储在每个实体中。</p><p>（2）邻居被依赖于<strong>连接关系</strong>和特定用户的<strong>分数加权</strong>，其特征在于KG和用户的个性化兴趣的语义信息。</p><p>请注意，在最坏情况下，一个实体的邻居size可能会非常非常的大。因此，我们将==每个节点的<strong>固定尺寸邻域</strong>==作为接收领域进行采样，这使得kgcn的成本可预测。</p><p>给定实体的<strong>邻域定义</strong>也可以分层扩展到多跳（多个跳跃？就是多走几次节点？）之外，以建模<strong>高阶实体依赖关系</strong>并捕捉用户的潜在<strong>远程兴趣</strong>。</p><h3 id="数据集及结果"><a href="#数据集及结果" class="headerlink" title="数据集及结果"></a>数据集及结果</h3><p>根据实验，我们将KGCN应用于三个数据集:MovieLens-20M(电影)、Book-Crossing (书籍)和Last.FM(音乐)。<br>实验结果表明，与最先进的推荐基准相比，KGCN在电影、书籍和音乐推荐中的平均AUC增益分别为4.4%、8.1%和6.2%。</p><h3 id="本文贡献"><a href="#本文贡献" class="headerlink" title="本文贡献"></a>本文贡献</h3><p>我们在本文中的贡献总结如下:</p><ul><li>我们提出了知识图卷积网络，这是一个端到端的框架，用于为推荐系统探索用户对知识图的偏好。通过扩展KG中每个实体的接受域，KGCN能够捕捉用户的高阶个性化兴趣。</li><li>我们在三个真实世界的推荐场景中进行实验。结果证明了KGCN最小二乘法在最先进的基线上的有效性。</li><li>我们向研究人员发布KGCN代码和数据集(知识图)，以验证报告的结果并进行进一步的研究。代码和数据可在<a href="https://github.com/hwwang55/KGCN%E8%8E%B7%E5%BE%97">https://github.com/hwwang55/KGCN获得</a>  (<a href="F:\AWork\2021论文\Demo\KGCN-master">本地文件夹在这</a>)</li></ul><h2 id="2-相关工作"><a href="#2-相关工作" class="headerlink" title="2. 相关工作"></a>2. 相关工作</h2><h3 id="本文方法"><a href="#本文方法" class="headerlink" title="本文方法"></a>本文方法</h3><p>我们的方法在概念上受到GCN（图卷积网络）的启发。</p><p>一般来说，GCN可以分为==光谱方法和非光谱方法==。</p><p>谱方法表示图形，并在谱空间中执行卷积。</p><p>例如，布鲁纳等人[2]定义了傅立叶域中的卷积，并计算了图拉普拉斯的特征分解，</p><p>德费拉德等人[4]通过图拉普拉斯的切比雪夫展开来近似卷积滤波器，</p><p>Kipf等人[10]通过谱图卷积的局部一阶近似提出了卷积结构。</p><p>相比之下，非谱方法直接对原始图进行操作，并为节点组定义卷积。</p><p>为了处理不同大小的邻域并保持CNN的权重共享特性，研究人员建议为每个节点度学习一个权重矩阵[6]，从图中提取局部连通区域[13]，或者采样一组固定大小的邻域作为支持大小[7]。</p><p>我们的工作可以看作是一种==特殊类型图(即知识图)的非谱方法==。</p><p>我们的方法也连接到PinSage [21]和GAT [15]。</p><p>但是请注意，PinSage和GAT都是为同构图设计的。</p><p>我们的工作与文献的主要区别在于，我们借助==异构知识图==为推荐系统提供了一个新的视角。</p><hr><h3 id="相关知识：关于图卷积网络"><a href="#相关知识：关于图卷积网络" class="headerlink" title="相关知识：关于图卷积网络"></a>相关知识：关于图卷积网络</h3><p>GCN的概念首次提出于ICLR2017（成文于2016年）</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>回忆一下，我们做图像识别，对象是图片，是一个二维的结构，于是人们发明了<strong>CNN这种神奇的模型来提取图片的特征</strong>。<br>CNN的核心在于它的kernel，kernel是一个个小窗口，<strong>在图片上平移，通过卷积的方式来提取特征</strong>。<br>这里的关键在于<strong>图片结构上的平移不变性</strong>：一个小窗口无论移动到图片的哪一个位置，其内部的结构都是一模一样的，因此CNN可以实现参数共享。<br>这就是CNN的精髓所在。</p><p>再回忆一下RNN系列，它的对象是<strong>自然语言这样的序列信息</strong>，是一个<strong>一维的结构</strong>，RNN就是专门针对这些序列的结构而设计的，通过各种门的操作，使得<strong>序列前后的信息互相影响</strong>，从而很好地捕捉序列的特征。</p><p>图（这里应该是数据结构图Graph）的结构一般来说是十分不规则的，可以认为是无限维的一种数据，所以它没有平移不变性。<br><strong>每一个节点的周围结构可能都是独一无二的</strong>，这种结构的数据，就让传统的CNN、RNN瞬间失效。所以很多学者从上个世纪就开始研究怎么处理这类数据了。这里涌现出了很多方法，例如GNN、DeepWalk、node2vec等等，GCN只是其中一种，这里只讲GCN，其他的后面有空再讨论。</p><p>==GCN，图卷积神经网络，实际上跟CNN的作用一样，就是一个<strong>特征提取器</strong>，只不过它的对象是图数据==。<br>GCN精妙地设计了一种从图数据中提取特征的方法，从而让我们可以使用这些特征去对图数据进行<br>==节点分类（node classification）、图分类（graph classification）、边预测（link prediction），还可以顺便得到图的嵌入表示（graph embedding）==，可见用途广泛。<br>因此现在人们脑洞大开，让GCN到各个领域中发光发热。</p><h4 id="数学表示"><a href="#数学表示" class="headerlink" title="数学表示"></a>数学表示</h4><p>假设我们手头有一批图数据，其中有<strong>N个节点（node）</strong>，每个节点都有自己的<strong>特征</strong>，我们设这些<strong>节点的特征</strong>组成一个<strong>N×D维的矩阵X</strong>，然后各个<strong>节点之间的关系</strong>也会形成一个<strong>N×N维的矩阵A</strong>，也称为邻接矩阵（adjacency matrix）。X和A便是我们模型的输入。</p><ul><li>N个节点</li><li>节点特征矩阵：$N \times D$ 维矩阵 X</li><li>节点关系矩阵：$N \times N$ 维矩阵A，邻接矩阵</li><li>输入：节点特征矩阵X，节点关系矩阵A</li></ul><p>GCN也是一个神经网络层，它的层与层之间的传播方式是：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/d6fffc4911a546698c9b031c04fa314a.png" alt="img"></p><p>这个公式中：</p><ul><li>$\tilde A = A + I$，I是单位矩阵</li><li>$\tilde D$是$\tilde A$的度矩阵（degree matrix），公式为</li><li>H是每一层的特征，对于输入层的话，H就是X</li><li>σ是非线性激活函数</li></ul><p>我们先不用考虑为什么要这样去设计一个公式。我们现在只用知道：</p><p>这个部分，是可以事先算好的，因为D波浪由A计算而来，而A是我们的输入之一。==A输入可以计算得到D，在第一层时H就是X，σ 是给出的激活函数，W是参数矩阵==</p><p>所以对于不需要去了解数学原理、只想应用GCN来解决实际问题的人来说，你只用知道：哦，这个GCN设计了一个牛逼的公式，用这个公式就可以很好地提取图的特征。这就够了，毕竟不是什么事情都需要知道内部原理，这是根据需求决定的。</p><h4 id="直观例子"><a href="#直观例子" class="headerlink" title="直观例子"></a>直观例子</h4><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/b63b19781f1b4b118feec2888a228fee.jpeg" alt="img"></p><p>上图中的GCN输入一个图，通过若干层GCN每个node的特征从X变成了Z，但是，无论中间有多少层，node之间的连接关系，即A，都是共享的。</p><p>假设我们构造一个两层的GCN，激活函数分别采用ReLU和Softmax，则整体的<strong>正向传播的公式</strong>为：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/672cc909cfe348a7a4ae55cdf7dcaafe.png" alt="img"></p><p>最后，我们针对所有带标签的节点计算cross entropy损失函数：</p><p><img src="http://5b0988e595225.cdn.sohucs.com/images/20190922/c76fc77cc22142e5892f9975e4f2084a.png" alt="img"></p><p>就可以训练一个node classification的模型了。由于即使只有很少的node有标签也能训练，作者称他们的方法为==半监督分类==。</p><p>当然，==你也可以用这个方法去做graph classification、link prediction，只是把损失函数给变化一下即可==。</p><p>公式中的与对称归一化拉普拉斯矩阵十分类似，而在谱图卷积的核心就是使用对称归一化拉普拉斯矩阵，这也是GCN的卷积叫法的来历。</p><h4 id="GCN-有多牛"><a href="#GCN-有多牛" class="headerlink" title="GCN 有多牛"></a>GCN 有多牛</h4><p>在看了上面的公式以及训练方法之后，我并没有觉得GCN有多么特别，无非就是一个设计巧妙的公式嘛，也许我不用这么复杂的公式，多加一点训练数据或者把模型做深，也可能达到媲美的效果呢。</p><p>但是一直到我读到了论文的附录部分，我才顿时发现：GCN原来这么牛啊！</p><p>为啥呢？</p><p>因为即使不训练，==完全使用随机初始化的参数W==，GCN提取出来的特征就以及十分优秀了！这跟CNN不训练是完全不一样的，后者不训练是根本得不到什么有效特征的。</p><p>还没训练就已经效果这么好，那给==少量的标注信息==，GCN的效果就会更加出色。</p><ol><li>对于很多网络，我们可能==没有节点的特征==，这个时候可以使用GCN吗？答案是可以的，如论文中作者对那个俱乐部网络，采用的方法就是<strong>用单位矩阵 I 替换特征矩阵 X</strong>。</li><li>我==没有任何的节点类别的标注==，或者什么其他的标注信息，可以使用GCN吗？当然，就如前面讲的，<strong>不训练的GCN，也可以用来提取graph embedding，而且效果还不错</strong>。</li><li>GCN网络的层数多少比较好？论文的作者做过GCN网络深度的对比研究，在他们的实验中发现，==GCN层数不宜多，2-3层的效果就很好了==。</li></ol><hr><h2 id="3-知识图卷积网络"><a href="#3-知识图卷积网络" class="headerlink" title="3. 知识图卷积网络"></a>3. 知识图卷积网络</h2><p>在这一节中，我们介绍提出的KGCN模型。</p><ol><li>我们首先提出了知识图感知推荐问题。</li><li>然后我们展示了单层KGCN的设计。</li><li>最后，我们介绍了完整的KGCN学习算法，以及它的具体实现。</li></ol><h3 id="3-1-问题提出"><a href="#3-1-问题提出" class="headerlink" title="3.1 问题提出"></a>3.1 问题提出</h3><p>我们将知识图感知推荐问题公式化如下。</p><p>在一个典型的推荐场景中，我们有一组==M个用户==U = {u1，u2，…，uM}和一组==N项==V = {v1，v2，…，vN}。</p><p>根据用户的==隐反馈==定义的==用户-项目交互矩阵==Y ∈ RM×Nis，其中yuv= 1表示用户u参与项目v，如点击、浏览或购买；otherwiseyuv= 0。</p><p>此外，我们还有一个==知识图G==，它由实体-关系-实体三元组(h，r，t)组成。这里h ∈ E，r ∈ R，t ∈ E表示知识三元组的头，关系，尾，E和R分别是知识图中实体和关系的集合。</p><p>例如，三部曲(冰与火之歌，书.书.作者，乔治·马丁)陈述了乔治·马丁写《冰与火之歌》这本书的事实。</p><p>在很多推荐场景中，一个item v ∈ V对应一个实体e ∈ E，比如在书籍推荐中，“冰与火之歌”这一项也作为同名实体出现在知识图中。</p><ul><li>用户user，物品item</li><li>隐反馈矩阵Y，1是交互，0是无交互</li><li>知识图G，其中的三元组(h,r,t)</li><li>一个item就对应一个知识图G中的实体e</li></ul><p>给定用户-项目交互矩阵Y和知识图G，我们旨在预测用户u是否对他以前没有交互过的项目有潜在兴趣。</p><p>我们的目标是学习一个预测函数$\hat y _{uv} = \mathcal F(u,v | \Theta,Y,G) $，其中$\hat y _{uv}$表示用户u将参与项目v的概率，θ表示函数F的模型参数。</p><ul><li>输入：隐反馈矩阵Y，知识图G</li><li>目标：$\hat y _{uv} = \mathcal F(u,v | \Theta,Y,G) $<ul><li>$\hat y _{uv}$表示用户 u 将参与项目 v 的==概率==</li><li>θ表示函数F的==模型参数==</li></ul></li></ul><h3 id="3-2-KGCN层"><a href="#3-2-KGCN层" class="headerlink" title="3.2 KGCN层"></a>3.2 KGCN层</h3><p>KGCN被用来在知识图中捕捉实体之间的高阶结构邻近性。</p><p>在这一小节中，我们首先描述==单个KGCN层==。</p><p>考虑用户u和项目(实体)v的候选对。</p><p>我们用N (v)来表示直接连接到实体v的其他实体集合，和$r_{e_i,e_j}$来表示 实体$e_i$和$e_j$之间的关系。</p><ul><li>用户u，实体v</li><li>N(v)：实体v的邻居实体集合</li><li>$r_{e_i,e_j}$ ：实体$e_i$和$e_j$之间的关系</li></ul><p>我们还使用函数$\mathcal g : \mathbb R^d \times \mathbb R ^d \rightarrow \mathbb R$​ (例如内积)来计算==用户和关系之间的分数==：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210402172958608.png" alt="image-20210402172958608"></p><p>其中$u ∈ \mathbb R^d$和$r ∈ \mathbb R^d$分别表示用户u和关系R，d是表示的维数。一般来说，$\pi _r ^u$表征关系对用户的重要性。</p><p><strong>例如，一个用户可能对与他历史上喜欢的电影共享同一“明星”的电影有更多的潜在兴趣，而另一个用户可能更关心电影的“流派”。</strong></p><ul><li>$\pi _r ^u$：代表关系对于用户的重要性（比如“actor_is”、“type_is”）关系</li><li>u：用户，$u ∈ \mathbb R^d$，d维数</li><li>r：关系，$r ∈ \mathbb R^d$，d维数</li></ul><p>为了==刻画物品v的拓扑邻近结构==，我们计算了==v的邻域的线性组合==:</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210402201234277.png" alt="image-20210402201234277"></p><p>其中，$\tilde \pi <em>{r</em>{v,e}} ^u$是==标准化的用户关系得分==：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210402201405937.png" alt="image-20210402201405937"></p><p>当计算一个实体的邻域表示时，<strong>用户-关系分数充当个性化过滤器</strong>，因为我们聚集带有偏差的邻居来代表那些特定用户的分数。</p><ul><li>e为实体v的邻域中的实体；</li><li>r是实体v与邻居e的关系</li><li></li></ul><p>在现实世界的知识图中，N (e)的大小在所有实体中可能有很大的不同。</p><p>为了保持每批的计算模式固定和更高效，我们为==每个实体统一采样一组固定大小的邻居==，而不是使用它的全部邻居。</p><p>具体来说，我们将==实体的邻域==表示计算为$v^u _{S(v)}$ ，其中$S(v) = {e | e \sim N(v)}$ 且$|S(v)| = K $ 是一个可配置的常量。</p><p>在KGCN，S(v)也被称为实体v的(单层)感受野，因为v的最终表征对这些位置很敏感。</p><p>图1a给出了给定实体的两层感受野的说明性例子，其中K被设置为2。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210402204045871.png" alt="image-20210402204045871"><br>(A)KG中蓝色实体的两层感受野(绿色实体)</p><p>KGCN层的最后一步是将实体表示 v 及其邻域表示$v^u_{s(v)}$ ==聚合成单个向量==。</p><p>我们在KGCN中实现了三种类型的聚合器agg：$\mathbb R ^d \times \mathbb R ^d \rightarrow \mathbb R ^d $ ：</p><ul><li>Sum（求和）聚合器取两个表示向量之和，然后进行非线性变换<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210402204501093.png" alt="image-20210402204501093"><br>其中W和b分别是变换权重和偏置，σ是像ReLU这样的非线性函数。</li><li>Concat（连接）聚合器[7]在应用非线性变换之前首先连接两个表示向量：<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210402204622757.png" alt="image-20210402204622757"></li><li>Neighbor（邻居）聚合器[15]直接将实体v的邻域表示作为输出表示：<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210402204724792.png" alt="image-20210402204724792"></li></ul><p>聚合是KGCN中的关键步骤，因为==项目的表示通过聚合与其邻居绑定在一起==。我们将在实验中对这三个聚合器进行评估。</p><h3 id="3-3-学习算法"><a href="#3-3-学习算法" class="headerlink" title="3.3 学习算法"></a>3.3 学习算法</h3><p>通过==单个KGCN层==，<strong>实体的最终表示依赖于其自身及其直接邻居</strong>，我们将其命名为<strong>1阶实体表示</strong>。</p><p>将KGCN从一层扩展到多层，以更广、更深的方式合理挖掘用户的潜在兴趣，这是理所当然的。</p><p>该技术是直观的：将每个实体的初始表示(0阶表示)传播给它的邻居，得到1阶实体表示，然后我们可以重复这个过程，即进一步传播和聚合1阶表示，得到2阶表示。</p><p>一般而言，<strong>实体的h阶表示是其自身及其邻居的初始表示的混合，最远可达h跳</strong>。</p><p>这是KGCN的一个重要属性，我们将在下一小节中讨论。</p><p>上述步骤的形式描述在算法1中给出。</p><p>h表示接受场的最大深度(或者等效地，聚合迭代的次数)，由表示向量附加的后缀[h]表示h阶。</p><p>对于给定的用户-项目对(u，v)(第2行)，</p><p>我们首先以逐层迭代的方式计算感受野(第3行，13-19行)。</p><p>然后将聚合重复H次(第5行)：</p><p>在迭代h中，我们计算每个实体e∈M[h]的邻域表示(第7行)，</p><p>然后将其与其自己的表示EU[h−1]聚合，</p><p>以获得要在下一次迭代中使用的表示(第8行)。</p><p>最终的H阶实体表示被表示为vu(行9)，</p><p>它与用于预测概率的用户表示u一起被馈送到函数f：rd×rd→R中：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210402210950370.png" alt="image-20210402210950370"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210402214108717.png" alt="image-20210402214108717"></p><hr><p>算法1：KGCN算法</p><hr><ul><li>输入：<ul><li>交互矩阵Y；</li><li>知识图谱G(E,R)；</li><li>邻域抽样图S：$S:e \rightarrow 2^\xi $ ;</li><li>可训练参数：${u}<em>{u \in \mathcal U},{e}</em>{e \in \mathcal E},{r}<em>{r \in \mathcal R},{W_i,b_i}</em>{i=1}^H $ ；</li><li>超参数：H，d，g(·)，f(·)，σ(·)，agg(·)</li></ul></li><li>输出：<ul><li>预测函数 $\hat y _{uv} = \mathcal F(u,v | \Theta,Y,G) $</li></ul></li></ul><hr><p>while (KGCN 不收敛时) do<br>    for (u,v) in Y do<br>        ${M[i]}^H_{i=0} \leftarrow $ 获取感受野(v)；</p><p>​        $e^u[0] \leftarrow e , \forall e \in M[0]$</p><hr><p>图1B示出了一次迭代中的KGCN算法，其中给定节点的实体表示Vu[h]和邻域表示(绿色节点)混合以形成其用于下一迭代(蓝色节点)的表示。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210402211024736.png" alt="image-20210402211024736"></p><p>(B)KGCN的框架</p><p>注意，算法1遍历所有可能的用户项对（第2行）。为了使计算更有效，我们在训练期间使用负面采样策略。完整的损失函数如下：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210402214229685.png" alt="image-20210402214229685"></p><p>其中$\mathcal L$是交叉熵损失函数(cross-entropy loss)，P是负的采样分布，$T^u$为用户u的负样本数。</p><p>在本文中，$T^u = |{v:y_{uv}=1}|$并且P遵循均匀分布。最后一个块是L2正则化矩阵。</p><h2 id="4-实验"><a href="#4-实验" class="headerlink" title="4. 实验"></a>4. 实验</h2><h3 id="4-1-数据集"><a href="#4-1-数据集" class="headerlink" title="4.1 数据集"></a>4.1 数据集</h3><p>我们在我们的电影，书籍和音乐推荐的实验中使用以下三个数据集：</p><ul><li><a href="https://grouplens.org/datasets/movielens/">MOVIELENS-20M</a>：一个在电影推荐中广泛使用的基准数据集，其中MOVIELENS网站上的大约2000万只显式评级（从1到5）组成。</li><li><a href="http://www2.informatik.uni-freiburg.de/~cziegler/BX/">Book-Crossing</a>：含有100万条书籍评级（从0到10），来自于Book-Crossing社区</li><li><a href="https://grouplens.org/datasets/hetrec-2011/">Last.FM</a>：包含来自Last.fm在线音乐系统的一组2,000个用户的听音乐信息。</li></ul><p>由于三个数据集是显反馈，我们将它们==转换为隐反馈==，其中每个条目被标记为1表示用户积极评分，标记为0的表示用户消极评分。</p><p>对于Movielens-20m的积极评分的==阈值==为4，而由于其稀疏性没有为BookCrossing和Last.fm设置阈值。</p><p>我们使用<a href="https://searchengineland.com/library/bing/bing-satori">Microsoft Satori</a>来构建每个数据集的知识图谱。</p><p>我们首先从整个KG选择一个三元组，置信水平大于0.9。</p><p>给出Sub-KG，我们收集所有有效电影/书籍/音乐的的StaoriID，什么是有效呢，就是通过书籍/电影/音乐的名字与三元组的尾相匹配，比如(head，film.film.name,tail)，(head,book.book.title,tail)，(head,type.object.name,tail)。</p><p>具有多个匹配或没有匹配实体的项目被排除，因为其过于简单。</p><p>然后，我们将项目ID与所有三元组匹配，并从Sub-kg中选择所有匹配的三元组。</p><p>三个数据集的基本统计信息如表1所示。</p><p>表1：三个数据集的基本统计和超参数设置(K:邻居采样大小，d:嵌入维数，H:感受野深度，λ: L2正则化权重，η:学习率)。<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210407111819265.png" alt="image-20210407111819265"></p><h3 id="4-2-Baselines"><a href="#4-2-Baselines" class="headerlink" title="4.2 Baselines"></a>4.2 Baselines</h3><p>我们将建议的KGCN与以下基线进行比较，其中前两个基线是无KG的，而其余的都是有KG使用的方法。基线的超参数设置将在下一小节中介绍。</p><ul><li>SVD[11]：是一个经典的基于CF的模型，使用内积来建模用户-项目交互。（我们尝试过NCF [8]，即用神经网络代替内积，但结果不如SVD。由于SVD和NCF相似，我们在这里只呈现更好的一个。）</li><li>LibFM [14]：是CTR场景中基于特征的分解模型。我们连接 user ID 和 item ID 作为LibFM的输入。</li><li>LibFM + TransE：通过将TransE [1]学习的实体表示，附加到每个用户-项目对，来扩展LibFM</li><li>PER [22]：将KG视为异构信息网络，并提取基于元路径的特征，来表示用户和项目之间的连通性</li><li>CKE [23]将CF与结构、文本和视觉知识结合在一个统一的推荐框架中。在本文中，我们将CKE实现为CF加上一个结构知识模块。</li><li>RippleNet [18]是一种类似内存网络的方法，它将用户的偏好传播到KG上进行推荐。</li></ul><h3 id="4-3-实验设置"><a href="#4-3-实验设置" class="headerlink" title="4.3 实验设置"></a>4.3 实验设置</h3><p>在KGCN，我们设置函数 g 和 f 为内积，σ在不是最后一层的时候用ReLU，在最后一层的时候用tanh。</p><p>表1提供了其他超参数设置。</p><p>超参数是通过在验证集上优化AUC（<a href="https://blog.csdn.net/liweibin1994/article/details/79462554">模型评估指标</a>）来确定的。</p><p>对于每个数据集，训练集、评估集和测试集的比例为6 : 2 : 2。</p><p>每个实验重复3次，并报告平均性能。</p><p>我们在两个实验场景中评估了我们的方法:</p><p>(1)在点击率预测中，我们应用训练好的模型来预测测试集中的每个交互。我们使用UC和F1来评估CTR预测。</p><p>(2)在top-K推荐中，我们使用训练好的模型为测试集中的每个用户选择预测点击概率最高的K个项目，选择Recall@K对推荐集进行评价。</p><p>所有可训练参数均采用亚当算法优化。</p><blockquote><p>Adam算法：</p><p><a href="https://blog.csdn.net/luoxuexiong/article/details/90412213">什么是Adam算法</a></p><p><a href="https://www.zhihu.com/question/323747423">Adam算法详解</a></p></blockquote><p>KGCN-LS的代码是在Python 3.6、TensorFlow 1.12.0和NumPy 1.14.3下实现的</p><p>基线的超参数设置如下。</p><ul><li><p>对于SVD，我们使用无偏版本(即，预测评级被建模为$r_{pq}= p^⊤q$).</p><ul><li>四个数据集的维数和学习率分别设置为:<ul><li>对于MovieLens-20M和Book-Crossing，d = 8，η = 0.5；</li><li>对于Last.FM，d = 8，η = 0.1；</li><li>对于LibFM，维数为{1，1，8}，训练批次数epochs为50。TransE的维度是32。</li></ul></li></ul></li><li><p>对于PER，我们使用手动设计的<code>user-item-attribute-item</code>路径作为特征</p><ul><li>MovieLens-20M<ul><li>“user-movie-director-movie”</li><li>“user-movie-genre-movie”</li><li>“user-movie-star-movie” </li></ul></li><li>Book-Crossing<ul><li>“user-book-author-book” </li><li>“user-book-genrebook” </li></ul></li><li>Last.FM</li><li>“user-musician-date_of_birth-musician”(date of birth is 离散化的)</li><li>“user-musician-country-musician”,</li><li>“user-musician-genre-musician” </li></ul></li><li><p>对于CKE</p><ul><li>三个数据集的维数分别为64、128、64。</li><li>对于所有数据集，KG部分的训练权重为0.1</li><li>学习率和SVD一样。</li></ul></li><li><p>对于RippleNet</p></li><li><p>MovieLens-20M：d = 8，H = 2，λ1 = 106，λ2= 0.01，η= 0.01；</p></li><li><p>Last.FM：d = 16，H = 3，λ1 = 105，λ2= 0.02，η = 0.005。</p></li><li><p>其他超参数与他们在原始论文中报告的相同，或在他们的代码中默认。</p></li></ul><h3 id="4-4-结果"><a href="#4-4-结果" class="headerlink" title="4.4 结果"></a>4.4 结果</h3><h4 id="对比结果"><a href="#对比结果" class="headerlink" title="对比结果"></a>对比结果</h4><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210408170732277.png" alt="image-20210408170732277"></p><p>CTR预测和top-K推荐的结果分别显示在表2和图2中(为了清楚起见，图2中没有绘制SVD、LibFM和KGCN的其他变量)。我们观察到以下情况:</p><ul><li>总的来说，我们发现KGCN在书籍和音乐方面的进步高于电影。这表明，KGCN可以很好地解决稀疏的场景，因为BookCrossing和Last.FM比MovieLens20M要稀疏得多。</li><li>无KG基线(SVD和LibFM)的性能实际上优于两个KG感知基线(PER和CKE)，这表明PER和CKE不能充分利用具有手动设计的元路径和TransRlike正则化的KG。</li><li>LibFM + TransE在大多数情况下都比LibFM好，说明KG的引入总体上对推荐是有帮助的。</li><li>在所有基线中，PER表现最差，因为很难在现实中定义最佳元路径。</li><li>与其他基线相比，RippleNet显示出强大的性能。请注意，RippleNet还使用多跳邻域结构，有趣的是，这表明在KG中捕获邻近信息对于推荐至关重要。</li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210408170704265.png" alt="image-20210408170704265"></p><h4 id="三种KGCN聚合器"><a href="#三种KGCN聚合器" class="headerlink" title="三种KGCN聚合器"></a>三种KGCN聚合器</h4><p>表2中的最后四行总结了KGCN变体的性能。</p><p>前三个(和、串联、相邻)对应于前面部分介绍的不同聚合器，而最后一个变体KGCN-avg是KGCN-sum的简化情况，其中邻域表示被直接平均而没有用户关系分数(即vu N(v)=˝ e∈N(v)e而不是Eq)。(2)).</p><p>因此，KGCN-平均用于检验“注意机制”的功效。从结果中我们发现:</p><ul><li>KGCN的表现明显优于所有基线，但它们的表现略有不同:==KGCN-sum总体表现最好==，而KGCNneighbor的表现在Book-Crossing和Last.FM上有明显差距。这可能是因为邻居聚合器仅使用邻域表示，因此从实体本身丢失了有用的信息。</li><li>KGCN-avg的表现比KGCN-sum差，尤其是在Bookcross和最Last.fm稀少的。这表明捕捉用户的个性化偏好和KG的语义信息确实有利于推荐。</li></ul><h4 id="邻居采样大小影响"><a href="#邻居采样大小影响" class="headerlink" title="邻居采样大小影响"></a>邻居采样大小影响</h4><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210408170836586.png" alt="image-20210408170836586"><br>表3不同相邻样本大小KGCN曲线的AUC结果</p><p>4.4.1==邻居采样大小==的影响。我们通过改变样本邻居的大小来研究KG的使用效果。从表3中，我们观察到==当K = 4或8时，KGCN达到最佳性能==。这是因为太小的K没有足够的容量来合并邻域信息，而太大的K容易被噪声误导。</p><h4 id="感受野深度影响"><a href="#感受野深度影响" class="headerlink" title="感受野深度影响"></a>感受野深度影响</h4><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210408170922909.png" alt="image-20210408170922909"></p><p>4.4.2==感受野深度==的影响。我们研究了KGCN感受野深度的影响。结果如表4所示，==表明与k相比，KGCN对H更敏感。当H = 3或4时，我们观察到严重的模型崩溃的发生==，因为较大的H会给模型带来大量噪声。这也符合我们的直觉，因为当推断项目间相似性时，过长的关系链没有什么意义。根据实验结果，==1或2的H对于真实情况是足够的==。</p><h4 id="嵌入维度影响"><a href="#嵌入维度影响" class="headerlink" title="嵌入维度影响"></a>嵌入维度影响</h4><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210408171052321.png" alt="image-20210408171052321"></p><p>4.4.3==嵌入维度==的影响。最后，我们检验了嵌入维度对KGCN绩效的影响。表5中的结果相当直观:==最初增加d可以提高性能==，因为较大的d可以编码更多的用户和实体信息，而==过大的d==会受到==过度拟合==的不利影响。</p><h2 id="5-总结展望"><a href="#5-总结展望" class="headerlink" title="5. 总结展望"></a>5. 总结展望</h2><p>提出了一种用于推荐系统的知识图卷积网络。</p><p>KGCN将非谱GCN方法扩展到知识图，有选择地、有偏见地聚集邻域信息，不仅能学习知识图的结构信息和语义信息，还能学习用户的个性化和潜在兴趣。</p><p>我们还以小批量方式实现了所提出的方法，该方法能够在大数据集和知识图上操作。</p><p>通过在真实数据集上的大量实验，KGCN在电影、书籍和音乐推荐方面的表现一直优于最先进的基线。</p><p>我们指出了未来工作的三条途径。</p><ul><li>(1)在这项工作中，我们从一个实体的邻居那里==统一取样==，以构建其感受野。探索==非均匀采样==(如重要性采样)是未来工作的一个重要方向。</li><li>(2)本文(和所有文献)集中于建模==item-end的KGs==。未来工作的一个有趣的方向是研究利用==user-edn的KGs==是否有助于提高推荐的性能。</li><li>(3)设计一种算法来很好地==结合两端的KGs==也是一个很有前途的方向。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
            <tag> Knowledge Graph </tag>
            
            <tag> 论文翻译 </tag>
            
            <tag> Recommendation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>嵌入推荐系统的协作知识库</title>
      <link href="2021/03/19/0319%E5%B5%8C%E5%85%A5%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8D%8F%E4%BD%9C%E7%9F%A5%E8%AF%86%E5%BA%93/"/>
      <url>2021/03/19/0319%E5%B5%8C%E5%85%A5%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8D%8F%E4%BD%9C%E7%9F%A5%E8%AF%86%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="嵌入推荐系统的协作知识库"><a href="#嵌入推荐系统的协作知识库" class="headerlink" title="嵌入推荐系统的协作知识库"></a>嵌入推荐系统的协作知识库</h1><h2 id="论文信息"><a href="#论文信息" class="headerlink" title="论文信息"></a>论文信息</h2><p>2016年</p><p>会议：<strong>ACM SIGKDD</strong>（知识发现与数据挖掘会议）<br>第22届ACM SIGKDD国际知识发现和数据挖掘会议论文集</p><h2 id="补充知识"><a href="#补充知识" class="headerlink" title="补充知识"></a>补充知识</h2><h3 id="1-异构图"><a href="#1-异构图" class="headerlink" title="1. 异构图"></a>1. 异构图</h3><p>同构图：在图里面，节点的类型和边的类型只有一种的图，举个例子，像社交网络中只存在一种节点类型，用户节点和一种边的类型，用户-用户之间的连边。</p><p>异构图：在图里面，节点的类型+边的类型&gt;2的一种图，举个例子，论文引用网络中，存在着作者节点和paper节点，边的关系有作者-作者之间的共同创作关系连边，作者-论文之间的从属关系，论文-论文之间的引用关系。</p><h3 id="2-TransR"><a href="#2-TransR" class="headerlink" title="2.TransR"></a>2.TransR</h3><p>知识图谱嵌入的Translate模型汇总（TransE，TransH，TransR，TransD）：<a href="https://zhuanlan.zhihu.com/p/147542008">https://zhuanlan.zhihu.com/p/147542008</a></p><p>然而，每个实体可以有许多方面，<strong>不同的关系关注实体的不同方面</strong>。例如，<code>(location, contains, location)</code>的关系是’contains’，<code>(person, born, date)</code>的关系是’born’。这<strong>两种关系非常不同</strong>。</p><p>为了解决这个问题，我们让TransR在两个不同的空间，即<strong>实体空间</strong>和<strong>多个关系空间</strong>(关系特定的实体空间)中建模实体和关系，并在对应的关系空间中进行转换，因此命名为TrandR。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210323212540816.png" alt="image-20210323212540816"></p><p>TransR的基本思想如图1所示。<br>对于每个三元组(h, r, t)，<br>将实体空间中的<strong>实体通过矩阵Mr投影到r关系空间中，分别为hr和tr，</strong><br>然后有<strong>hr + r ≈ tr</strong>，损失函数和训练方法与TransE相同。<strong>h</strong>和<strong>t</strong>为实体嵌入，<strong>r</strong>为关系嵌入。</p><p>特定于关系的投影可以使实际持有这种关系的head/tail实体(表示为彩色圆圈)彼此靠近，同时那些不持有这个关系的实体相互远离(表示为彩色三角形)。</p><p>得分函数和目标函数与TransE相同。</p><blockquote><p>TransE的损失函数是使用了负抽样的max-margin函数。</p><p>L(y, y’) = max(0, margin - y + y’)</p><p><code>y</code>是正样本的得分，<code>y'</code>是负样本的得分。然后使损失函数值最小化，当这两个分数之间的差距大于margin的时候就可以了(我们会设置这个值，通常是1)。</p><p>由于我们使用距离来表示得分，所以我们在公式中加上一个减号，知识表示的损失函数为：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210323212639554.png" alt="image-20210323212639554"></p><p>其中，d是：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210323212652208.png" alt="image-20210323212652208"></p><p>这是L1或L2范数。至于如何得到负样本，则是将head实体或tail实体替换为三元组中的随机实体。</p></blockquote><h3 id="3-关于自编码器"><a href="#3-关于自编码器" class="headerlink" title="3.关于自编码器"></a>3.关于自编码器</h3><ul><li>漫谈autoencoder：降噪自编码器/稀疏自编码器/栈式自编码器：<a href="https://blog.csdn.net/wblgers1234/article/details/81545079">https://blog.csdn.net/wblgers1234/article/details/81545079</a></li><li>堆叠降噪自动编码器：<a href="https://blog.csdn.net/zbzcDZF/article/details/86570761">https://blog.csdn.net/zbzcDZF/article/details/86570761</a></li></ul><h5 id="自编码器"><a href="#自编码器" class="headerlink" title="自编码器"></a>自编码器</h5><p>自编码器分为两个部分，编码器encoder和解码器decoder。一个单隐层的AE的网络结构如下图所示</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20180811212403280" alt="img"></p><p>自编码器输出层的节点数与输入层相等。</p><p>值得注意的是，这种自编码器是一种<strong>不利用类标签的非线性特征提取方法</strong>， 就方法本身而言， 这种特征提取的<strong>目的在于保留和获得更好的信息表示</strong>， 而不是执行分类任务，尽管有时这两个目标是相关的。</p><p>自动编码机由三层网络组成，其中<strong>输入层</strong>神经元数量与<strong>输出层</strong>神经元数量相等，<strong>中间层</strong>神经元数量少于输入层和输出层。</p><p>搭建一个自动编码器需要完成下面三样工作：搭建编码器，搭建解码器，设定一个<strong>损失函数</strong>，用以衡量由于压缩而损失掉的信息（自编码器是有损的）。</p><p><strong>编码器和解码器</strong>一般都是<strong>参数化的方程</strong>，并关于损失函数可导，典型情况是使用神经网络。编码器和解码器的参数可以通过最小化损失函数而优化。</p><h5 id="降噪自编码器"><a href="#降噪自编码器" class="headerlink" title="降噪自编码器"></a>降噪自编码器</h5><p>和自编码器不同的是，降噪自编码的训练过程中，<strong>输入的数据有一部分是“损坏”的</strong>，DAE(Denoising Autoencoder)的核心思想是，一个能够从中恢复出原始信号的神经网络表达未必是最好的，<strong>能够对“损坏”的原始数据编码、解码，然后还能恢复真正的原始数据，这样的特征才是好的</strong>。在论文“Stacked Denoising Autoencoders: Learning Useful Representations in a Deep Network with a Local Denoising Criterion”中，阐述了DAE的原理，如下图所示：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20180811212442966" alt="img"></p><p>对于输入的数据x按照qD分布加入进行<strong>加噪“损坏”</strong>，</p><p>从图式可以看出，这个加噪过程是<strong>按照一定的概率（通常使用二项分布）将输入层的某些节点清0</strong>，然后将 $\hat x$ 作为自编码器的输入进行训练。</p><p><strong>除了对输入层数据的处理不同，其余部分DAE与AE完全类似</strong>。</p><h5 id="堆叠自编码器"><a href="#堆叠自编码器" class="headerlink" title="堆叠自编码器"></a>堆叠自编码器</h5><p>顾名思义，栈式自编码器就是<strong>多个自编码器级联</strong>，以完成逐层特征提取的任务，最终得到的特征更有代表性，并且维度很小。<br>栈式自编码器的训练过程是，n个AE按顺序训练，第1个AE训练完成后，将其编码器的输出作为第2个AE的输入，以此类推。最后得到的特征作为分类器的输入，完成最终的分类训练。如下四幅图所示：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210323211120400.png" alt="image-20210323211120400"></p><h5 id="堆叠降噪自动编码器"><a href="#堆叠降噪自动编码器" class="headerlink" title="堆叠降噪自动编码器"></a>堆叠降噪自动编码器</h5><p>堆叠降噪自动编码器（Stacked Denoising Auto Encoder，SDAE）</p><p>SDAE的思想就是将多个DAE堆叠在一起形成一个深度的架构。只有<strong>在训练的时候才会对输入进行腐蚀(加噪)，训练完成就不需要在进行腐蚀</strong>。结构如下图所示：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20160823173106225" alt="img"></p><p><strong>逐层贪婪训练：</strong>每层自编码层都<strong>单独进行非监督训练</strong>，以最小化输入（输入为前一层的隐层输出）与重构结果之间的误差为训练目标。<br>前K层训练好了，就可以训练K+1层，因为已经前向传播求出K层的输出，再用K层的输出当作K+1的输入训练K+1层。<br>一旦SDAE训练完成, 其<strong>高层的特征</strong>就可以用做<strong>传统的监督算法的输入</strong>。当然，也可以在最顶层添加一层logistic regression layer（softmax层），然后使用带label的数据来进一步对网络进行<strong>微调（fine-tuning）</strong>，即用样本进行有监督训练。</p><hr><h3 id="4-评测指标MAP-K和Recall-K"><a href="#4-评测指标MAP-K和Recall-K" class="headerlink" title="4. 评测指标MAP@K和Recall@K"></a>4. 评测指标MAP@K和Recall@K</h3><p>MAP（Mean Average Precision）本是在信息检索领域用以衡量搜索引擎的排序性能的评价指标，对于推荐系统，可以将推荐列表视为一个排序列表。例如对于【命中，命中，未命中，未命中，未命中】和【未命中，未命中，未命中，命中，命中】这两个top-5的推荐列表，显然他们的precision都是 $\frac{2}{5} $    ，但是显然第一个推荐列表的性能要高于第二个推荐列表，因为其在第1、2位就已命中。<br>MAP的公式如下：</p><p>$$MAP@K=\frac{1}{\vert{U}\vert}\sum_{u=1}^{\vert{U}\vert}\frac{1}{min(m,K)}\sum_{k=1}^{min(n,K)}P(k)\cdot rel(k)$$</p><p>也可以这么理解：</p><p>$$AP@K=\frac{1}{min(m,K)}\sum_{k=1}^{min(n,K)}P(k)\cdot rel(k)$$</p><p>$$ MAP@K=\frac{1}{\vert{U}\vert}\sum_{u=1}^{\vert{U}\vert}AP@K $$</p><p>K是推荐列表的长度，如刚刚top-5的推荐列表里K就是5，$\vert{U}\vert$是用户的数量，m是用户实际选择的项目数，n是给用户推荐的项目数，P(k)指的是从推荐列表中排名第1的项目到排名第k的项目的precision，rel(k)表示排名第kk的项目是否被用户实际选择。<br>所以对于推荐列表【命中，命中，未命中，未命中，未命中】，假设该用户在测试集中实际选择了3个项目，则</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210331152517497.png" alt="image-20210331152517497"></p><p>而对于推荐列表【未命中，未命中，未命中，命中，命中】</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210331152543642.png" alt="image-20210331152543642"></p><hr><p>版权声明：本文为CSDN博主「百载文枢江左」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_42690752/article/details/102827308">https://blog.csdn.net/weixin_42690752/article/details/102827308</a></p><hr><p>版权声明：本文为CSDN博主「百载文枢江左」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<a href="https://blog.csdn.net/weixin_42690752/article/details/102827308">https://blog.csdn.net/weixin_42690752/article/details/102827308</a></p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>在不同的推荐技术中，由于<strong>用户项交互的稀疏性</strong>，<strong>协同过滤</strong>通常遭受有限的性能。</p><p>要解决问题，通常使用辅助信息来提高性能。</p><p>由于网上信息的快速收集，<strong>知识库</strong>提供<strong>异构信息</strong>，包括具有不同语义的<strong>结构化和非结构化数据</strong>，可以由各种应用消耗。</p><p>在本文中，我们调查<strong>如何利用知识库中的异构信息来提高推荐系统的质量</strong>。</p><p>首先，通过利用知识库，我们设计<strong>三个组件</strong>以分别从<strong>结构内容，文本内容和视觉内容</strong>中提取项目的语义表示。</p><p>具体而言，我们采用异质网络嵌入(heterogeneous network embedding)方法称为<strong>TransR</strong>，通过考虑所述节点和关系的异质性来提取项目的结构表示。</p><p>我们应用<strong>堆叠的去噪自动编码器(stacked denoising auto-encoders)<strong>和</strong>堆叠的卷积自动编码器(stacked convolutional auto-encoders,)<strong>，它们是两种类型的基于深度学习的</strong>嵌入</strong>技术，以分别提取项目的<strong>文本表示</strong>和<strong>视觉表示</strong>。</p><p>最后，我们提出了我们的最终综合框架，被称为协作<strong>知识库嵌入（CKE）</strong>，共同学习协同过滤的潜在表示以及知识库的项目语义表示。</p><p>为了评估每个嵌入组件以及整个系统的性能，我们通过不同场景的两个RealWorld数据集进行广泛的实验。结果表明，我们的方法优于若干广泛采用的最先进的推荐方法。</p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><ul><li>推荐系统</li><li>知识库嵌入</li><li>协同联合学习</li></ul><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><h4 id="协同过滤"><a href="#协同过滤" class="headerlink" title="协同过滤"></a>协同过滤</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><p>由于信息的爆炸性增长，推荐系统在在线服务中发挥着越来越重要的作用。在不同的推荐战略中，基于<strong>协同过滤（CF）使用历史互动或偏好</strong>的方法取得了重大成功[23]。</p><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><p>然而，当<strong>用户项目交互非常稀疏</strong>时，CF方法通常会遭受有限的性能，这对于项目集非常大的在线购物等方案非常常见。<br>此外，CF方法<strong>不能推荐新项目</strong>，因为这些项目从未收到过去用户的任何反馈。</p><h5 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h5><p>为了解决这些问题，<strong>混合推荐系统，结合协同过滤和辅助信息</strong>，如物品内容，通常可以实现更好的推荐结果，并且近年来越来越受欢迎[2]。</p><h4 id="知识库"><a href="#知识库" class="headerlink" title="知识库"></a>知识库</h4><p>简介</p><p>在过去几年中，通过在统一的全球数据空间中的不同主题域中连接各种主题域名的各种信息，通过将各种信息与统一的全球数据空间中的不同主题域名连接各种信息，从而在链接数据原则上发布了越来越多的语义数据。这些异构数据互相链接，形成称为知识库的巨大信息资源库。已经建立了几个典型的知识库，包括Yago2，Nell3，DBPedia4和DeepDive5等学术项目，以及Microsoft的Satori6和Google知识图表7等商业项目。使用来自知识库的异构连接信息可以有助于开发关于难以从单个域的数据突出的问题的见解[6]。迄今为止，信息检索[9]，社区检测[25]，情绪分析[4] - 仅限名称 - 是成功利用知识库的值得注意的应用程序。</p><h4 id="混合推荐"><a href="#混合推荐" class="headerlink" title="混合推荐"></a>混合推荐</h4><p>实际上，由于知识库提供了丰富的信息，包括具有不同语义的结构化和非结构化数据，因此<strong>在混合推荐系统的上下文中使用知识库的使用</strong>是吸引了越来越多的关注。</p><h5 id="相关研究"><a href="#相关研究" class="headerlink" title="相关研究"></a>相关研究</h5><p>例如：</p><ul><li>yu等人。 [30]使用异构信息网络来表示知识库中的用户，项目，项目属性和互连关系。它们从网络结构中提取基于元路径的潜在特征，并应用基于贝叶斯排名优化的协同过滤，以解决实体推荐问题。</li><li>Grad-Gyenge等。通过采用基于扩展的激活技术来结合知识库的网络特征，扩展了协同过滤，用于推荐系统的额定预测任务。</li></ul><p>但是，以前的研究没有充分利用知识库的潜力，因为它们遭受以下限制：<br>1）仅利用知识库的单个网络结构信息，同时忽略诸如项目的文本和视觉信息的其他重要信号。<br>2）依靠繁重和繁琐的特征工程过程来提取知识库的特征。</p><h4 id="本文"><a href="#本文" class="headerlink" title="本文"></a>本文</h4><h5 id="提出方法："><a href="#提出方法：" class="headerlink" title="提出方法："></a>提出方法：</h5><p> 为了解决上述问题，请在本文中提出了一种新的推荐框架，<strong>将协同过滤与知识库中项目的不同语义表示集成</strong>。</p><p>对于知识库，除了<strong>网络结构信息</strong>，我们还考虑项目的<strong>文本内容</strong>和<strong>视觉内容</strong>（例如，电影的海报）。</p><p>为避免繁重和繁琐的手动特征提取，我们设计三个嵌入组件，以分别从<strong>知识库的结构内容，文本内容和视觉内容</strong>中提取项目的语义表示。</p><p>具体而言：</p><ol><li>我们首先通过考虑<strong>节点和关系的异质性</strong>来应用<strong>网络嵌入方法</strong>来提取<strong>项目的结构化表示</strong>。</li><li>接下来，我们采用<strong>堆叠的去噪自动编码器和堆叠的卷积自动编码器</strong>，这些自动编码器是两种类型的基于深度学习的嵌入技术，分别<strong>提取项目的文本表示和视觉表示</strong>。</li><li>最后，为了<strong>将协同过滤与知识库中的项目的语义表示顺利地融合</strong>，我们提出了我们的最终框架，该框架被称为嵌入（CKE）的协同知识库，以<strong>共同学习统一模型中的不同表示</strong>。</li></ol><h5 id="评估："><a href="#评估：" class="headerlink" title="评估："></a>评估：</h5><p>我们的实证研究包括多个部分。</p><p>首先，我们进行若干实验，以分别评估三个知识库嵌入组分的性能。</p><p>接下来，我们通过与若干竞争基线进行比较来评估我们的综合框架的有效性。</p><h5 id="主要贡献："><a href="#主要贡献：" class="headerlink" title="主要贡献："></a>主要贡献：</h5><p>本文的主要贡献总结如下：</p><ul><li>据我们所知，这是第一次将知识库中的<strong>结构化内容，文本内容，视觉信息</strong>用于推荐系统</li><li>我们应用嵌入方法，包括<strong>异构网络嵌入</strong>和<strong>深度学习嵌入</strong>，以自动提取知识库中的语义表示。<strong>学习的表示也可以用于推荐以外的任务。</strong></li><li> 通过<strong>共同执行知识库嵌入和协同过滤</strong>，CKE可以同时从知识库中提取特征表示，并捕获用户和项目之间的隐式关系</li><li> 根据两个实际数据集，我们对评估我们框架的有效性进行了广泛的实验。结果表明，我们的方法显着优于基线方法。</li></ul><h5 id="论文结构"><a href="#论文结构" class="headerlink" title="论文结构"></a>论文结构</h5><p>本文的其余部分安排如下。</p><p>第2节介绍了初步概念，并提出了我们的推荐问题。</p><p>第3节概述了我们的框架。</p><p>第4节删除了嵌入组件以提取知识库的表示。</p><p>在第5节中，我们讨论如何将协同过滤与嵌入统一模型的知识库有效地集成。</p><p>在第6节中讨论了经验结果，<br>然后简要介绍第7节中的相关工作，<br>并在第8节中结束了本文。</p><h2 id="2-初步概念"><a href="#2-初步概念" class="headerlink" title="2.初步概念"></a>2.初步概念</h2><p>在本节中，我们将首先澄清本文中使用的一些术语，然后明确呈现出我们的问题。</p><h3 id="2-1-用户隐反馈（User-Implicit-Feedback）"><a href="#2-1-用户隐反馈（User-Implicit-Feedback）" class="headerlink" title="2.1 用户隐反馈（User Implicit Feedback）"></a>2.1 用户隐反馈（User Implicit Feedback）</h3><p>本文考虑的推荐任务是针对<strong>隐性反馈</strong>的。</p><h4 id="隐反馈矩阵R"><a href="#隐反馈矩阵R" class="headerlink" title="隐反馈矩阵R"></a>隐反馈矩阵R</h4><p>假设有m个用户和n个项目，我们定义了<strong>用户隐含的反馈矩阵</strong> $R \in \mathbb{R}^{m\times n}$ 为：<br>$$<br>R = \begin{cases}<br>1, &amp; 如果已观察到(用户i,项目j)交互; \<br>0, &amp; 其余情况 \<br>\end{cases}<br>$$<br>其中矩阵R中的值1表示用户和项目之间的交互，例如，用户观看了电影或用户在搜索引擎中搜索了一本书。</p><p>请注意，隐式反馈数据中的<strong>值1并不意味着用户实际上喜欢这些项目</strong>。</p><p>实际上，用户搜索了一本书，因为他对这本书感兴趣，但在浏览互联网上的相关信息后，他可能可能不喜欢这本书。</p><p>同样，R中的<strong>值0并不意味着用户不喜欢这些项目</strong>，而是可以被视为<strong>负反馈的混合</strong>（用户对此类项目不感兴趣）和<strong>潜在的交互</strong>（用户不知道此类项目）。</p><blockquote><p><strong>只代表交互，不代表喜欢</strong></p></blockquote><h3 id="2-2-知识库-Knowledge-Base"><a href="#2-2-知识库-Knowledge-Base" class="headerlink" title="2.2 知识库(Knowledge Base)"></a>2.2 知识库(Knowledge Base)</h3><p>实际上，我们感兴趣的是利用知识库提高推荐系统的质量，因此<strong>推荐系统中的项目</strong>被<strong>映射到知识库中的实体</strong>（例如，电影项目通常可以映射到描述这部电影的实体），以及这些实体被称为本文中的<strong>项目实体</strong>。</p><h4 id="三个部分"><a href="#三个部分" class="headerlink" title="三个部分"></a>三个部分</h4><p>我们考虑存储在知识库中的信息可以分为<strong>三个部分：结构知识，文本知识和视觉知识</strong>。每个部分的详细定义如下：</p><h5 id="定义1：结构知识"><a href="#定义1：结构知识" class="headerlink" title="定义1：结构知识"></a>定义1：结构知识</h5><p>这些知识可以被视为具有<strong>多种类型的实体</strong>和<strong>多种类型的链路</strong>的异构网络，以表达知识库的结构。</p><p>对于电影推荐，<br>实体通常包括电影<strong>项目</strong>和相应属性（例如，类型“科学小说”和演员“Kevin Space”），<br>并且<strong>链接</strong>描述了这些实体（例如，“作用”行为和“评级”行为之间的关系 ）。</p><p>网络结构意味着<strong>项目实体之间的一些相似性</strong>，这对推荐<strong>最有用</strong>。</p><h5 id="定义2：文本知识"><a href="#定义2：文本知识" class="headerlink" title="定义2：文本知识"></a>定义2：文本知识</h5><p>对于知识库中的书籍或电影等项目实体，我们使用<strong>文本摘要</strong>来表示文本知识，通常为本书或这部电影提供了主要主题。</p><h5 id="定义3：视觉知识"><a href="#定义3：视觉知识" class="headerlink" title="定义3：视觉知识"></a>定义3：视觉知识</h5><p>对于项目实体，除了先前的文本描述外，知识库中通常存在一些图像，我们使用书的前<strong>封面图像</strong>或电影的<strong>海报图像</strong>来表示其视觉知识。</p><p><strong>用户隐式反馈交互</strong>和<strong>结构知识</strong>用作<strong>物品的结构特征</strong>，而文本知识和视觉知识则作为<strong>内容特征</strong>。</p><ul><li>物品的结构特征<ul><li>用户隐反馈交互</li><li>结构知识</li></ul></li><li>内容特征<ul><li>文本知识</li><li>视觉知识</li></ul></li></ul><p>图1中介绍了具有三种知识以及用户隐式反馈的知识库的片段。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210319170822356.png" alt="image-20210319170822356"><br>图1：用户隐含反馈数据和知识库数据片段的例证</p><h3 id="2-3-问题描述"><a href="#2-3-问题描述" class="headerlink" title="2.3 问题描述"></a>2.3 问题描述</h3><p>我们在本文中定义了我们的推荐问题，如下所示：</p><p>给出具有结构知识的知识库，文本知识和视觉知识，以及用户隐含的反馈；</p><p>我们的目标是推荐给每个用户他会感兴趣的一个项目排行列表。</p><h2 id="3-综述"><a href="#3-综述" class="headerlink" title="3. 综述"></a>3. 综述</h2><p>在本文中，通过充分利用知识库中的结构知识，文本知识和视觉知识，我们提出了一个<strong>协作知识库嵌入模型（CKE）</strong>，以支持我们的推荐任务。</p><p>我们的模型主要由<strong>两个步骤</strong>组成：1）知识库嵌入2）协同联合学习。</p><h3 id="1-知识库嵌入"><a href="#1-知识库嵌入" class="headerlink" title="1)知识库嵌入"></a>1)知识库嵌入</h3><p>在知识库嵌入步骤中，我们分别从结构知识，文本知识和视觉知识中提取<strong>项目实体的三个嵌入向量</strong>。这些嵌入向量表示每个域中的项目实体的潜在表示。</p><p>对于<strong>结构嵌入</strong>组成部分，我们应用<strong>网络嵌入程序（贝叶斯TransR）</strong>从结构化的知识的异构网络中找到潜在的表现。</p><p>对于<strong>文本嵌入</strong>组件，我们应用一个叫做<strong>贝叶斯堆积的去噪自动编码器（Bayesian SDAE）</strong>的无监督的深度学习模型[29]以找到文本知识的潜在表示。</p><p>同样，我们应用另一个叫做<strong>贝叶斯堆积的卷积自动编码器（贝叶斯SCAE）</strong>的无监督的深度学习模型，以找到<strong>视觉知识</strong>的潜在表示。</p><h3 id="2-协同联合学习"><a href="#2-协同联合学习" class="headerlink" title="2)协同联合学习"></a>2)协同联合学习</h3><p>在协作联合学习步骤中，最终将<strong>项目的潜在矢量</strong>表示为从知识库和潜在偏移量载体的<strong>三个嵌入向量的集成</strong>。</p><p>最终项目潜伏载体代表了来自结构内容，文本内容，视觉内容以及历史(用户-项目)交互的项目的知识。</p><p>然后，我们通过<strong>优化项目之间的成对排名</strong>来使用<strong>协同过滤</strong>来学习用户潜在向量和项目潜在的向量。</p><p>最终推荐由这些<strong>用户潜在的向量</strong>和<strong>项目潜在的向量</strong>生成。</p><p>我们框架的流程图如图2所示。<strong>知识库嵌入</strong>和<strong>协作联合学习</strong>将分别在第4节和第5节中详细说明。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210319172248054.png" alt="image-20210319172248054"></p><p>图2：协同知识库嵌入（CKE）框架的推荐系统流程图</p><h2 id="4-知识库嵌入"><a href="#4-知识库嵌入" class="headerlink" title="4.知识库嵌入"></a>4.知识库嵌入</h2><p>在本节中，通过利用网络嵌入和深度学习嵌入，我们介绍了我们如何分别从结构知识，文本知识和视觉知识中提取项目实体的表现。</p><h3 id="4-1-结构化嵌入"><a href="#4-1-结构化嵌入" class="headerlink" title="4.1 结构化嵌入"></a>4.1 结构化嵌入</h3><p>异构网络编码实体的结构化信息及其丰富关系。</p><p>为了捕获这种<strong>结构化知识</strong>，希望将该<strong>异构网络嵌入</strong>到连续的矢量空间中，同时保留网络的某些信息。</p><p>在本小节中，我们首先简要介绍一个名为<strong>TransR</strong> [15]的最新的网络嵌入方法，然后为我们的任务给出TransR的贝叶斯表达。</p><p>首先，要代表结构知识，我们使用一个<strong>无向图</strong>$G =（V，E）$，<br>其中$V = { v_1,……v_{|V|} }$是一组<strong>顶点</strong>，指的是<strong>不同实体</strong>，<br>E是一组<strong>边</strong>，参考这些实体之间的不同类型的<strong>关系</strong>。</p><p>Transr [15]是用于异构网络的最先进的嵌入方法。</p><p>与承担相同空间RK内的实体和关系的其他方法不同，Transr表示由关系特定矩阵桥接的不同语义空间中的实体和关系。</p><p>在Transr中，对于网络中的每个三元组$（v_h，r，v_t）$，（$v_h$和$v_t$是两个链接实体，r是它们之间的边类型），实体嵌入到向量$v_h,v_t \in \mathbb R^k$中，而关系嵌入到$r \in \mathbb R^d$中。</p><ul><li>三元组：$（v_h，r，v_t）$</li><li>实体嵌入：$v_h,v_t \in \mathbb R^k$</li><li>关系嵌入：$r \in \mathbb R^d$</li></ul><p>对于每个<strong>关系</strong>r，我们设置了一个<strong>投影矩阵</strong>$M_r \in \mathbb R ^{k \times d}$，其将来自实体空间的<strong>实体项目</strong>投影到<strong>关系空间</strong>。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210319183246177.png" alt="image-20210319183246177"></p><p>图3：结构化嵌入TransR的例子</p><p>如图3所示，项目的<strong>实体向量</strong>被定义为</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210319180730045.png" alt="image-20210319180730045"></p><p>这个三元组的的评分函数相应定义为:</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210319180747181.png" alt="image-20210319180747181"></p><h4 id="生成过程，TransR的贝叶斯版本"><a href="#生成过程，TransR的贝叶斯版本" class="headerlink" title="生成过程，TransR的贝叶斯版本"></a>生成过程，TransR的贝叶斯版本</h4><p>类似于[22]，我们使用<code>sigmod</code>函数来计算成对三元组排名概率，而不是原始Transr中采用的（margin-based objective function）基于边缘的目标函数。然后我们将TransR延伸到贝叶斯版本，并提出了如下的生成过程：</p><ol><li>对于每个实体v，使得$v \sim N(0, \lambda_v^{-1}I)$</li><li>对于每个关系r，分别使得$r \sim N(0, \lambda_r^{-1}I)$  和$M_r \sim N(0, \lambda_M^{-1}I)$</li><li>对于每个四元组$(v_h,r,v_t,v_t’) \in S$ ，从概率$\sigma (f_r(v_h,v_t) - f_r(v_h,v_t’))$使得，其中S是满足的一下条件的四元组集合：$（v_h,r,v_t）$ 是一个正确的三元组，$(v_h,r,v_t’)$是一个不正确的三元组。$\sigma :(x) = {1 \over 1+e^{-x}} $ 是逻辑sigmoid函数</li></ol><p>对于正确的三元组$（v_h，r，v_t）$来说，通过将一个实体用相同类型的另一个实体来替换是很常见的，并且构造不正确的三倍$（v_h，r，v_{t’}）$。</p><p>注意，步骤3意味着当正确三元组的得分函数大于不正确的三元组的分数函数时，可以更容易采样四元组。</p><p>对于每个项目实体$j$，我们使用贝叶斯TransR嵌入向量$v_j$来代表其结构化表示。</p><blockquote><p>TransR需要深♂入了解一下</p></blockquote><hr><p>知识图谱嵌入的Translate模型汇总（TransE，TransH，TransR，TransD）：<a href="https://zhuanlan.zhihu.com/p/147542008">https://zhuanlan.zhihu.com/p/147542008</a></p><h4 id="关于TransR"><a href="#关于TransR" class="headerlink" title="关于TransR"></a>关于TransR</h4><p>然而，每个实体可以有许多方面，<strong>不同的关系关注实体的不同方面</strong>。例如，<code>(location, contains, location)</code>的关系是’contains’，<code>(person, born, date)</code>的关系是’born’。这<strong>两种关系非常不同</strong>。</p><p>为了解决这个问题，我们让TransR在两个不同的空间，即<strong>实体空间</strong>和<strong>多个关系空间</strong>(关系特定的实体空间)中建模实体和关系，并在对应的关系空间中进行转换，因此命名为TrandR。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210323212540816.png" alt="image-20210323212540816"></p><p>TransR的基本思想如图1所示。<br>对于每个三元组(h, r, t)，<br>将实体空间中的<strong>实体通过矩阵Mr投影到r关系空间中，分别为hr和tr，</strong><br>然后有<strong>hr + r ≈ tr</strong>，损失函数和训练方法与TransE相同。<strong>h</strong>和<strong>t</strong>为实体嵌入，<strong>r</strong>为关系嵌入。</p><p>特定于关系的投影可以使实际持有这种关系的head/tail实体(表示为彩色圆圈)彼此靠近，同时那些不持有这个关系的实体相互远离(表示为彩色三角形)。</p><p>得分函数和目标函数与TransE相同。</p><blockquote><p>TransE的损失函数是使用了负抽样的max-margin函数。</p><p>L(y, y’) = max(0, margin - y + y’)</p><p><code>y</code>是正样本的得分，<code>y'</code>是负样本的得分。然后使损失函数值最小化，当这两个分数之间的差距大于margin的时候就可以了(我们会设置这个值，通常是1)。</p><p>由于我们使用距离来表示得分，所以我们在公式中加上一个减号，知识表示的损失函数为：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210323212639554.png" alt="image-20210323212639554"></p><p>其中，d是：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210323212652208.png" alt="image-20210323212652208"></p><p>这是L1或L2范数。至于如何得到负样本，则是将head实体或tail实体替换为三元组中的随机实体。</p></blockquote><h3 id="4-2-文本嵌入"><a href="#4-2-文本嵌入" class="headerlink" title="4.2 文本嵌入"></a>4.2 文本嵌入</h3><p>在本小节中，我们调查如何应用一个名为<strong>堆叠去噪自动编码器（SDAE）</strong>的<strong>无监督深度学习</strong>模型，以获取文本知识的项目实体的文本表示。</p><h4 id="4-2-1符号表示"><a href="#4-2-1符号表示" class="headerlink" title="4.2.1符号表示"></a>4.2.1符号表示</h4><p>SDAE [27]是用于学习损坏的输入数据表示的反馈神经网络，通过学习预测输出中的清洁本身。</p><p>在提出模型细节之前，我们提供SDAE中使用的符号。</p><p>假设网络层的数量是$L_t$，我们使用矩阵$X_l$代表SDAE中的第L层的输出。</p><p>请注意，我们使用最后一层输出 <strong>$X_{L_t}$ 来表示所有项目实体的原始清洁文本知识</strong>，其中第j行是实体j的词袋矢量$X_{L_{t,j*}}$，j * 。</p><p>同样，我们使用<strong>矩阵$X_0$来表示噪声损坏的矩阵</strong>（随机掩蔽了$X_{L_t}$的某些实体，通过使其为0的方式）。</p><p><strong>$W_l$ 和 $b_l$ 分别是用于l层的权重参数和偏置参数。</strong></p><h4 id="4-2-2图示"><a href="#4-2-2图示" class="headerlink" title="4.2.2图示"></a>4.2.2图示</h4><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210323201237435.png" alt="image-20210323201237435"><br>图4：用于文本嵌入的6层SDAE的图示</p><p>图4给出了一个6层SDAE的例证，用于我们的文本嵌入组件。</p><p>如该图所示，网络的第一个$L_t \over 2$ 层（从$X_0$ 到 $X_3$）通常用作编码器部分，该部分将损坏的输入$X_0$映射到潜在的紧凑型表示$X_3$，并且最后一个$L_t \over 2$ 层（从$X_3$ 到 $X_6$）通常用作解码器部分，其恢复清洁输入X6的潜在表示X3。</p><h4 id="4-2-3-贝叶斯SDAE中每层L的生成过程"><a href="#4-2-3-贝叶斯SDAE中每层L的生成过程" class="headerlink" title="4.2.3 贝叶斯SDAE中每层L的生成过程"></a>4.2.3 贝叶斯SDAE中每层L的生成过程</h4><p>与[29]类似，同时给出观测到的清洁输入$X_{L_t}$和损坏的输入$X_0$，我们介绍了贝叶斯SDAE中每层L的生成过程，如下所示：</p><ol><li>对于给定的权重参数$W_l$，使得$W_l \sim N(0, \lambda_W^{-1}I)$</li><li>对于偏重参数，使得$b_l \sim N(0, \lambda_b^{-1}I)$ </li><li>对于此层的输出，使得$X_l \sim N(\sigma (X_{l-1} W_l + b_l), \lambda_X^{-1}I)$</li></ol><p>中间层中的嵌入矢量，比如图4中的$X_{3,j*}$  ，被用作项目实体j的文本表示。</p><hr><h4 id="4-2-4-关于自编码器"><a href="#4-2-4-关于自编码器" class="headerlink" title="4.2.4 关于自编码器"></a>4.2.4 关于自编码器</h4><ul><li>漫谈autoencoder：降噪自编码器/稀疏自编码器/栈式自编码器：<a href="https://blog.csdn.net/wblgers1234/article/details/81545079">https://blog.csdn.net/wblgers1234/article/details/81545079</a></li><li>堆叠降噪自动编码器：<a href="https://blog.csdn.net/zbzcDZF/article/details/86570761">https://blog.csdn.net/zbzcDZF/article/details/86570761</a></li></ul><h5 id="自编码器-1"><a href="#自编码器-1" class="headerlink" title="自编码器"></a>自编码器</h5><p>自编码器分为两个部分，编码器encoder和解码器decoder。一个单隐层的AE的网络结构如下图所示</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20180811212403280" alt="img"></p><p>自编码器输出层的节点数与输入层相等。</p><p>值得注意的是，这种自编码器是一种<strong>不利用类标签的非线性特征提取方法</strong>， 就方法本身而言， 这种特征提取的<strong>目的在于保留和获得更好的信息表示</strong>， 而不是执行分类任务，尽管有时这两个目标是相关的。</p><p>自动编码机由三层网络组成，其中<strong>输入层</strong>神经元数量与<strong>输出层</strong>神经元数量相等，<strong>中间层</strong>神经元数量少于输入层和输出层。</p><p>搭建一个自动编码器需要完成下面三样工作：搭建编码器，搭建解码器，设定一个<strong>损失函数</strong>，用以衡量由于压缩而损失掉的信息（自编码器是有损的）。</p><p><strong>编码器和解码器</strong>一般都是<strong>参数化的方程</strong>，并关于损失函数可导，典型情况是使用神经网络。编码器和解码器的参数可以通过最小化损失函数而优化。</p><h5 id="降噪自编码器-1"><a href="#降噪自编码器-1" class="headerlink" title="降噪自编码器"></a>降噪自编码器</h5><p>和自编码器不同的是，降噪自编码的训练过程中，<strong>输入的数据有一部分是“损坏”的</strong>，DAE(Denoising Autoencoder)的核心思想是，一个能够从中恢复出原始信号的神经网络表达未必是最好的，<strong>能够对“损坏”的原始数据编码、解码，然后还能恢复真正的原始数据，这样的特征才是好的</strong>。在论文“Stacked Denoising Autoencoders: Learning Useful Representations in a Deep Network with a Local Denoising Criterion”中，阐述了DAE的原理，如下图所示：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20180811212442966" alt="img"></p><p>对于输入的数据x按照qD分布加入进行<strong>加噪“损坏”</strong>，</p><p>从图式可以看出，这个加噪过程是<strong>按照一定的概率（通常使用二项分布）将输入层的某些节点清0</strong>，然后将 $\hat x$ 作为自编码器的输入进行训练。</p><p><strong>除了对输入层数据的处理不同，其余部分DAE与AE完全类似</strong>。</p><h5 id="堆叠自编码器-1"><a href="#堆叠自编码器-1" class="headerlink" title="堆叠自编码器"></a>堆叠自编码器</h5><p>顾名思义，栈式自编码器就是<strong>多个自编码器级联</strong>，以完成逐层特征提取的任务，最终得到的特征更有代表性，并且维度很小。<br>栈式自编码器的训练过程是，n个AE按顺序训练，第1个AE训练完成后，将其编码器的输出作为第2个AE的输入，以此类推。最后得到的特征作为分类器的输入，完成最终的分类训练。如下四幅图所示：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210323211120400.png" alt="image-20210323211120400"></p><h5 id="堆叠降噪自动编码器-1"><a href="#堆叠降噪自动编码器-1" class="headerlink" title="堆叠降噪自动编码器"></a>堆叠降噪自动编码器</h5><p>堆叠降噪自动编码器（Stacked Denoising Auto Encoder，SDAE）</p><p>SDAE的思想就是将多个DAE堆叠在一起形成一个深度的架构。只有<strong>在训练的时候才会对输入进行腐蚀(加噪)，训练完成就不需要在进行腐蚀</strong>。结构如下图所示：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20160823173106225" alt="img"></p><p><strong>逐层贪婪训练：</strong>每层自编码层都<strong>单独进行非监督训练</strong>，以最小化输入（输入为前一层的隐层输出）与重构结果之间的误差为训练目标。<br>前K层训练好了，就可以训练K+1层，因为已经前向传播求出K层的输出，再用K层的输出当作K+1的输入训练K+1层。</p><p>一旦SDAE训练完成, 其<strong>高层的特征</strong>就可以用做<strong>传统的监督算法的输入</strong>。当然，也可以在最顶层添加一层logistic regression layer（softmax层），然后使用带label的数据来进一步对网络进行<strong>微调（fine-tuning）</strong>，即用样本进行有监督训练。</p><hr><h3 id="4-3视觉嵌入"><a href="#4-3视觉嵌入" class="headerlink" title="4.3视觉嵌入"></a>4.3视觉嵌入</h3><p>在这个小节中，类似于以前的文本嵌入部分，我们应用另一个无监督的深度学习模型，称为<strong>堆叠卷积自动编码器（SCAE）</strong>，以从视觉知识中提取项目实体的语义表示。</p><p>对于视觉对象，基于卷积的深度学习架构通常会击败公共完全连接的架构，因为<strong>它们可以在潜在的更高级别特征表示中保留图像的邻域关系和空间位置</strong>[7]。<br>此外，卷积层通过<strong>共享权重</strong>来限制自由参数的数量，使得它们对高维图像内容进行比较。<br>如上所述，通过在[16]的工作之后，<strong>我们通过使用卷积隐藏层采用堆叠的卷积自动编码器（SCAE）来替换先前SDAE中的完全连接的层</strong>。</p><h4 id="4-3-1-符号表示"><a href="#4-3-1-符号表示" class="headerlink" title="4.3.1 符号表示"></a>4.3.1 符号表示</h4><p>假设SCAE中有$L_v$层，类似于SDAE中的符号，我们使用4维张量**$Z_{L_v}$表示清洁图像的集合<strong>，其中第j行是一个三维张量 $Z_{L_{v , j*}}$，代表实体j 在RGB颜色空间中的原始像素表示。同样，我们使用</strong>$Z_0$来表示损坏的图像<strong>（通过添加高斯噪声随机掩蔽了一些实体$Z_l$）。<br>接下来，对于每层L，我们使用</strong>$Z_l$表示输出，$Q_l$表示权重参数，并且$c_l$表示偏置参数。**</p><h4 id="4-3-2-插图"><a href="#4-3-2-插图" class="headerlink" title="4.3.2 插图"></a>4.3.2 插图</h4><p>在SCAE中，我们将第 ${L_v} \over 2$ 层和第${ {L_v} \over 2 } +1$ 层设置为完全连接的层，而其他层作为卷积层。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210326101411313.png" alt="image-20210326101411313"><br>                                                                        图5：视觉嵌入的6层SCAE的例子</p><p>图5给出了6层SCAE的插图，也包括编码器部分和解码器部分。</p><p>如图所示，编码器部分由两个卷积层（从Z_0到Z_2）和完全连接的层（Z_2到Z_3）组成。<br>类似地，解码器部分由完全连接的层（Z3到Z4）和两个以下的碎屑层（从Z4到Z6）组成。<br>请注意，中间隐藏层的输出Z_3是一个矩阵，其表示所有项目实体的视觉嵌入向量的集合。而其他隐藏层的输出通常被称为特征映射[7]，是生成的4维张量来自卷积层。卷积层的映射如下给出:</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210326101202160.png" alt="image-20210326101202160"></p><p>其中*表示卷积操作，可以保留先前输出的本地连接度。有关卷积运算符的更多细节可以参考[20]。</p><h4 id="4-2-3-贝叶斯SCAE每层L的生成过程"><a href="#4-2-3-贝叶斯SCAE每层L的生成过程" class="headerlink" title="4.2.3 贝叶斯SCAE每层L的生成过程"></a>4.2.3 贝叶斯SCAE每层L的生成过程</h4><p>与文本嵌入组件类似，给定清洁图像输入$Z_{L_v}$ 和加噪的输入$Z_0$，我们介绍了贝叶斯SCAE中每层L的生成过程，如下所示：</p><ol><li>对于给定的权重参数，使得$Q_l \sim N(0, \lambda_Q^{-1}I)$</li><li>对于偏重参数，使得$c_l \sim N(0, \lambda_c^{-1}I)$ </li><li>对于此层的输出，<ol><li>如果 l 层是一个全连接层，使得$Z_l \sim N(\sigma (Z_{l-1} Q_l + c_l), \lambda_Z^{-1}I)$</li><li>否则，使得$Z_l \sim N(\sigma (Z_{l-1}*Q_l + c_l), \lambda_Z^{-1}I)$</li></ol></li></ol><blockquote><p>这里*是卷积运算符？</p></blockquote><p>中间层中的嵌入矢量，比如图5中的$Z_{3,j*}$，用作项目实体j的视觉表示。</p><h2 id="5-协同联合学习"><a href="#5-协同联合学习" class="headerlink" title="5.协同联合学习"></a>5.协同联合学习</h2><p>在本节中，为了将<strong>协同过滤与知识库中项目的嵌入式</strong>筛选集成，我们提出了CKE框架中的<strong>协同联合学习程序</strong>。</p><p>给定用户隐含的反馈R，由[22]的动机，为了学习相似度我们考虑了物品之间的成对排名。</p><p>更具体的是，当$R_{ij} = 1$而$R_{ij’} = 0$ 时，我们说用户 i 更喜欢物品 j 超过物品 j’ ，然后使用 $p（j&gt; j  ; i | θ）$ 来表示一对偏好概率，其中θ表示模型参数。</p><p><strong>在协同过滤中，我们使用潜在的矢量 $u_i$ 作为 用户i 的表示，以及潜在向量$\eta _j $ 作为 项目j 的表示。</strong></p><p>为了同时捕获在<strong>协同过滤</strong>中item的<strong>潜在表示</strong>，与在item在<strong>知识库中的表示</strong>，<strong>item的潜在向量</strong>可以重新表示为：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210326104621075.png" alt="image-20210326104621075"></p><p>然后可以给予成对偏好概率</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210326104918314.png" alt="image-20210326104918314"></p><p><strong>在知识库中使用Bayesian Transr，Bayesian SDAE和Bayesian Scae作为组件的嵌入步骤，我们使用协同加入学习的框架CKE的生成过程如下</strong>：</p><ol><li>考虑结构化的知识：<ol><li>对于每个实体v，使得$v \sim N(0, \lambda_v^{-1}I)$</li><li>对于每个关系r，分别使得$r \sim N(0, \lambda_r^{-1}I)$  和$M_r \sim N(0, \lambda_M^{-1}I)$</li><li>对于每个四元组$(v_h,r,v_t,v_t’) \in S$ ，从概率$\sigma (f_r(v_h,v_t) - f_r(v_h,v_t’))$使得，其中S是满足的一下条件的四元组集合：$（v_h,r,v_t）$ 是一个正确的三元组，$(v_h,r,v_t’)$是一个不正确的三元组。$\sigma :(x) = {1 \over 1+e^{-x}} $ 是逻辑sigmoid函数</li></ol></li><li>考虑文本化知识，对于SDAE中的每层：<ol><li>对于给定的权重参数$W_l$，使得$W_l \sim N(0, \lambda_W^{-1}I)$</li><li>对于偏重参数，使得$b_l \sim N(0, \lambda_b^{-1}I)$ </li><li>对于此层的输出，使得$X_l \sim N(\sigma (X_{l-1} W_l + b_l), \lambda_X^{-1}I)$</li></ol></li><li>考虑视觉知识，对于SCAE中的每层：<ol><li>对于给定的权重参数，使得$Q_l \sim N(0, \lambda_Q^{-1}I)$</li><li>对于偏重参数，使得$c_l \sim N(0, \lambda_c^{-1}I)$ </li><li>对于此层的输出，<ol><li>如果 l 层是一个全连接层，使得$Z_l \sim N(\sigma (Z_{l-1} Q_l + c_l), \lambda_Z^{-1}I)$</li><li>否则，使得$Z_l \sim N(\sigma (Z_{l-1}*Q_l + c_l), \lambda_Z^{-1}I)$</li></ol></li></ol></li><li>对于每个item j，使得一个潜在item偏移向量 $\eta _j \sim N(0, \lambda_I^{-1}I)$ ，之后将 item 的潜在向量设为：<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210326104621075.png" alt="image-20210326104621075"></li><li>对于每个用户i，使得一个用户的潜在向量为$u_i \sim N(0, \lambda_U^{-1}I)$ </li><li>对于每个三元组 $(i,j,j’) \in D$ ，使得其概率 $\sigma(u_{i}^Te_j - u_{i}^Te_{j’})$ </li></ol><p>在这里，D是一系列的三元组，其中每个三联（i，j，j’）满足$R_{ij} = 1$而$R_{ij’} = 0$ （j’是从用户i的不感兴趣的item中随机采样）。请注意，$X_{ {L_t \over 2},j*}$ 和 $X_{ {L_v \over 2},j*}$ 分别用作隐式反馈偏好和结构知识，文本知识以及视觉知识之间的桥梁</p><p><strong>学习参数</strong>。计算参数的完整后部是棘手的。与[28]相同，最大化u，e，r，M，W，b，Q和c的后验概率，是等价于最大化对数似然函数，如下：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210326110639785.png" alt="image-20210326110639785"></p><p>最大化EQ的目标。 （7），我们采用类似于[22]的随机梯度下降（SGD）算法。<br>在每次迭代中，对于一个随机采样的三元组（i，j，j’）∈D，我们找到子集$S_{j,j’} \in S$ 满足$S_{j,j’}$ 中的的每个四元组包含项目j或项目j’。然后，我们使用相应的目标函数的梯度对每个参数进行SGD更新[10]。</p><p>预测 用户i 的最终项目推荐根据以下排名标准给出：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210326111058340.png" alt="image-20210326111058340"></p><h2 id="6-实验"><a href="#6-实验" class="headerlink" title="6.实验"></a>6.实验</h2><p>在本节中，我们评估我们在两个RealWorld数据集中的建议框架，适用于两部电影和书籍推荐方案。实验结果表明了许多竞争基础的显着改善的证据。</p><h3 id="6-1-数据集描述"><a href="#6-1-数据集描述" class="headerlink" title="6.1 数据集描述"></a>6.1 数据集描述</h3><p>为了展示拟议的协作知识库嵌入建议框架的有效性，我们使用来自不同域名（电影和书籍）的两个数据集进行实证研究。</p><p>第一个DataSet <a href="http://grouplens.org/datasets/movielens/1m/">Movielens-1M</a>，由1M等级组成，6,040名用户和3,706部电影。</p><p>与[31]类似，为了与隐性反馈设置一致，我们仅提取积极的评分（评分5）以进行培训和测试。除了较少3次阳性额定值的用户后，我们有5,883名用户，3,230部电影和226,101个额定值在最终数据集中。</p><p>从Microsoft的Bing搜索引擎和Microsoft的Satori知识库中收集了作为IntentBooks的第二个数据集[1]。</p><p>在此数据集中，用户对书籍的兴趣从单击/查询操作中提取，例如，如果用户对“哈利波特”或单击包含该名称的文档进行查询，则此用户可能对相关的簿籍实体感兴趣。</p><p>为了减少名称冲突问题（例如，而不是书籍，“哈利波特”实际上可能意味着相关的电影），我们通过将无监督的相似性计算与通过以下[13]结合监督分类来提取用户的书籍兴趣。</p><p>此外，为了验证书籍兴趣提取的有效性，我们随机选择了200个提取的书籍兴趣实例并手动标记为真或假。</p><p>结果表明，精度为91.5％，我们认为对后续实验足够准确。</p><p>我们从Bing的搜索日志中对用户进行隐式反馈数据进行示例，时间是从2014年9月到2015年6月期间的。删除少于5本书兴趣的用户，我们终于拥有92,564名用户，18,475本书和897,871个用户-数据兴趣关系。</p><p>我们还使用Satori知识库来提取这两个数据集的结构知识，文本知识和视觉知识。</p><p>首先，我们应用了[24]中描述的两个分阶段方法（包括标题匹配和属性匹配），将来自Movielens-1M数据集的每个电影映射到知识库中的实体（请注意，Intentbooks DataSet中的一本书已经是一个知识库中的实体，因此匹配步骤忽略）。</p><p>我们明确地观察到200个配对结果，其中92％的对正确匹配（匹配精度足够好，以便以后的过程）。</p><p>此外，我们发现只有134部电影无法映射到知识库中的任何电影实体。</p><p>接下来，为了构建结构知识，我们从知识库中提取一个子图，其中包含项目实体的实体，距离项目实体的一个实体，以及相应的关系。</p><p>对于电影实体，1步实体包括流派，导演，作家，演员，语言，国家，生产日期，评级，提名奖和获得奖项;对于书籍实体，1步实体包括流派，作者，发布日期，属于系列，语言和评级。</p><p>然后用于文本知识，我们遵循哈希程序单词，如[12]中的散列程序，以预处理从电影的情节中提取的文本信息和书籍的描述。</p><p>最后，为了视觉知识，我们使用电影实体的海报图像和书籍实体的前封面图像，其中最终使用的视觉输入是在RGB空间中重塑到3×64×64张量格式的图像。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210326112752235.png" alt="image-20210326112752235"></p><p>表1中总结了两个数据集的一些详细统计信息。<br>例如，“#sk节点”表示提取的结构知识中的节点总数，<br>“#tk项目”表示具有文本知识的项目数量<br>“#VK项目“表示具有视觉知识的项目数。</p><h3 id="6-2-评估标准"><a href="#6-2-评估标准" class="headerlink" title="6.2 评估标准"></a>6.2 评估标准</h3><p>如[19]所述，精度不是隐式反馈推荐的合适性能措施。</p><p>因此，在我们的实验中，我们使用MAP@K（意思是平均精度）[26] 和 Recall@K 评估Top-K推荐的性能。</p><p>对于每个数据集，类似于[14]，我们随机选择与每个用户关联的<strong>70％</strong>项目，以构成<strong>训练集</strong>，并使用所有剩余的<strong>测试集</strong>。</p><p>对于每个评估方案，我们<strong>使用不同随机选择的训练集重复五次评估</strong>，并且在以下部分中报告了平均性能。</p><p>对于每个数据集，我们还使用从训练集中设置的验证，以查找我们的方法的<strong>最佳超参数</strong>以及在以后的零件中引入的<strong>基线</strong>。</p><p>在以下报告的结果中，我们的方法的<strong>超参数</strong>设置在表2中给出，因为实现了最佳性能。</p><p>在表2中，</p><ul><li>DIM表示潜在的维度，</li><li>$\epsilon$表示噪声屏蔽级别，</li><li>$\sigma$ 代表图像的高斯滤波器噪声的标准偏差， </li><li>$L_t$ 和 $L_v$ 代表层数，</li><li>$N_l$ 代表在文本嵌入SDAE步骤中 l 不是中间层或者输出层时，隐藏单元的数量；</li><li>$N_f$和$S_f$ 分别表示视觉嵌入的SCAE步骤中每个卷积层中滤波图的数量和大小。</li></ul><p>注意，为了保持协同过滤部分的不同分解方法，在以下小节中比较的基线的潜在维度与表2中的相同，基线的其他超参数由网格搜索确定。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210326153150856.png" alt="image-20210326153150856"><br>表2：我们两个数据集的框架的HyperParameter设置。 CF，SK，TK和VK指示协同过滤，结构知识嵌入，文本知识嵌入和视觉知识嵌入的组件中的参数。</p><p>在以下小节中，我们将根据四个方面评估拟议的框架。<br>首先，我们分别评估了关于结构知识使用，文本知识用法和视觉知识使用的推荐表现。<br>然后，我们将联合模型CKE与最先进的基线进行比较，以展示我们系统的有效性。</p><h3 id="6-2-3-4-图"><a href="#6-2-3-4-图" class="headerlink" title="6.2.3.4 图"></a>6.2.3.4 图</h3><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210326154132437.png" alt="image-20210326154132437"><br>图6：Recall@K值，我们的方法之间使用知识库中的每个组件与数据集Movielens-1M相关基线之间的方法之间的比较。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210326154205047.png" alt="image-20210326154205047"><br>图7：Map @ K结果，我们的方法在使用知识库中的每个组件之间的比较，以及数据集Movielens-1M的相关基线。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210326154249848.png" alt="image-20210326154249848"><br>图8：调用我们的方法之间使用知识库中的每个组件的方法与数据集Intentbook的相关基线之间的方法比较。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210326154403232.png" alt="image-20210326154403232"><br>图9：Map @ K结果我们在使用知识库中的每个组件与数据集目录中的每个组件之间的方法之间的比较。</p><h3 id="6-3-对于-结构化知识-的研究"><a href="#6-3-对于-结构化知识-的研究" class="headerlink" title="6.3 对于 结构化知识 的研究"></a>6.3 对于 结构化知识 的研究</h3><p>在本小节中，为了研究我们的结构知识使用的表现，我们<strong>只将结构知识嵌入组件纳入联合学习过程中的协同滤波中</strong>。我们将我们称为“CKE”的方法与以下基准进行比较：</p><ul><li>BPRMF：我们使用贝叶斯个性化排名的基于矩阵分解[22]，这是基于用户的成对偏好，作为<strong>单一协同过滤方法</strong>。与我们的方法CKE相比，该基线完全忽略了结构知识的使用。</li><li>BPRMF + Transe：此方法结合了BPRMF和网络嵌入方法，称为<strong>TransE</strong> [3]进行联合学习。此基线实际上使用与我们的方法CKE相同的设置，除了它使用TransE，忽略实体和关系的异构性，而不是TransR嵌入结构知识</li><li>PRP：具有前瞻统称的PageRank [17]将User-Item关系和结构知识集成到统一的同类图中，然后为每个用户执行PageRank，具有个性化的初始概率分布。</li><li>PER：个性化实体建议[30]将<strong>结构知识视为异构信息网络</strong>，并提取基于元路径的潜在特征，以表示用户和项目之间的连接沿不同类型的关系路径。在本文中，我们使用所有项目 - attributeItem格式的元路径特征（例如，“Movie-Penre-Movie”）。</li><li>LIBFM(S)：LIBFM [21]是基于最先进的功能的分解模型。在本文中，LIBFM(S)意味着我们<strong>在结构知识中使用项目的属性作为原始特征</strong>以馈入LIBFM。</li></ul><p>不同方法的结果在图6（a）中给出，图7（a），图8（a）和图9（a）。</p><p>结果汇集了两个数据集的几种观察，我们总结为：</p><p>1） BPRMF在所有方法中表现最差。由于BPRMF是完全忽略了结构知识的唯一一个，结果意味着结构知识的额外使用可以显着提高推荐性能。 </p><p>2）PRP表现比利用结构知识的其他方法更糟糕。这是因为其中，PRP是唯一不利用分解的唯一一个，这可以捕获数据集的稀疏度下的用户项目交互的潜在低逼近。 </p><p>3）BPRMF + TRANSE优于LIBFM和PER，它表明，而不是直接在特征工程方式中使用结构知识，网络嵌入可以以更合理的方式捕获语义表示，从而提高推荐质量。 </p><p>4）我们的方法CKE（s）击败BPRMF + Transe，这意味着通过使用Transr，在考虑网络嵌入的异质性时，仍有改进的余地。</p><h3 id="6-4-对于-文本化知识-的研究"><a href="#6-4-对于-文本化知识-的研究" class="headerlink" title="6.4 对于 文本化知识 的研究"></a>6.4 对于 文本化知识 的研究</h3><p>在本小节中，我们调查了我们的文本知识使用的表现。具体而言，我们在联合学习过程中使用文本知识嵌入组件和协同过滤。我们比较我们的方法，它被称为“CKE（T）”，反对BPRMF以及以下基准：</p><ul><li>LIBFM(T)：此方法与第6.3节中引入的libfm相同，除了文本知识中的词袋现在用作原始特征以进入libfm。</li><li>CMF(T)：集体矩阵分解[21]通过同时分解多个矩阵来组合不同类型的数据源。在本文中，CMF（t）意味着我们使用的两个矩阵是用户项矩阵和项目字矩阵。 </li><li>CTR：协作主题回归[28]，它是利用建议的文本信息的StateOf-ART方法，同时集成了协同过滤和主题建模。</li></ul><p>如图6（b）所示，图7（b），图8（b）和图9（b），结果的比较显示了以下观察结果：</p><p>1）CKE（s）优于CKE（T）和libfm（s）优于libfm（t），这意味着与结构知识相比，文本知识对推荐绩效的改善具有较弱。 </p><p>2）libfm（t），ctr和cke（t）通常提供比CMF更好的性能，这表明项目字矩阵的直接分解不能充分利用文本信息。 </p><p>3）CTR是一个强大的基线，有时甚至在IntentBooks数据集中实现最佳性能。然而，我们的方法CKE（t）可以大部分时间击败CTR，这表明与主题建模相比，深入学习嵌入通过深入地提取文本的语义表示来擅长提取文本的语义表示。</p><h3 id="6-5对于视觉知识的研究"><a href="#6-5对于视觉知识的研究" class="headerlink" title="6.5对于视觉知识的研究"></a>6.5对于视觉知识的研究</h3><p>在本小节中，我们专注于研究我们的视觉知识使用情况。如前所述，我们在联合学习中使用视觉知识嵌入组件和协作滤波。我们将我们的方法与BPRMF和以下基准命名为“CKE（v）”的方法：</p><ul><li>libfm（v）：此方法与第6.3节中的libfm相同，不同之处在于RGB颜色空间中的扁平原始像素表示作为原始功能。</li><li>CMF（v）：此方法使用与第6.4节中描述的CMF（T）相同的设置，不同之处在于我们使用用户项矩阵和项目 - 像素矩阵进行同时分解。</li><li>BPRMF + SDAE（V）：此方法使用与我们的方法CKE（v）相同的设置，除了它使用堆叠的去噪自动编码器来嵌入可视知识。这是为了评估卷积层是否对视觉知识嵌入有效。</li></ul><p>不同方法的结果如图6（c）所示，图7（c），图8（c）和图9（c），它为我们提供了以下观察：</p><p>1）与结构知识和文本知识相比，使用视觉知识的性能改善是有限的，但仍然很大。 </p><p>2）CKE（v）和BPRMF + SDAE（v）优于其他方法，这表明了深度网络的优越性，用于视觉知识嵌入。 </p><p>3）CKE（V）和BPRMF + SDAE（V）之间的性能差距仍然显着，这揭示了卷积层更适合提取视觉表示。</p><h3 id="6-6-对于整个框架的研究"><a href="#6-6-对于整个框架的研究" class="headerlink" title="6.6 对于整个框架的研究"></a>6.6 对于整个框架的研究</h3><p>最后，我们评估了我们整个框架的表现。我们使用知识库嵌入中的三个组件进行比较我们的终极模型，其表示为“CKE（STV）”，与以下基准显示：</p><ul><li>CKE（ST），CKE（SV），CKE（ST）：CKE（ST）使用与CKE（STV）相同的设置，除了它<strong>只包含结构知识和文本知识</strong>，这是为了评估视觉的额外使用情况知识是有效的。该定义类似于CKE（SV）和CKE（TV）。</li><li>Libfm（STV）：此方法使用与第6.4节中提到的Libfm相同的设置，除了结构知识，<strong>文本知识和视觉知识</strong>全部用作特征。 </li><li>BPRMF + STV：此方法使用与CKE（STV）相同的设置，除了<strong>它分别学习协同过滤和三个知识库嵌入组件</strong>。这是为了评估联合学习是否有效。</li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210326153026266.png" alt="image-20210326153026266"><br>图10:Recall@K我们框架和相关基线之间的比较两个数据集。 图11:Map@K结果我们的框架与两个数据集相关基线之间比较。</p><p>结果如图10和图11所示，其给出了以下观察结果：</p><p>1）CKE（STV）优于CKE（ST），CKE（SV）和CKE（TV）。这意味着每种知识的额外使用可以提高推荐绩效，这表明我们框架与各种知识相结合的框架，以加强推荐。 </p><p>2）CKE（STV）优于Libfm（STV），它表明与专业工程方式中知识库的直接使用相比，嵌入组件可以更有效地捕获知识库的语义表示，从而提高推荐性能。 </p><p>3）CKE（STV）仍然比BPRMF + STV归档更好的性能，其表明，协同过滤和知识库嵌入的联合学习可以以更直接的方式针对推荐优化任务，从而提高建议质量。</p><h2 id="7-相关工作"><a href="#7-相关工作" class="headerlink" title="7 相关工作"></a>7 相关工作</h2><h3 id="7-1-知识库推荐"><a href="#7-1-知识库推荐" class="headerlink" title="7.1 知识库推荐"></a>7.1 知识库推荐</h3><p>近年来，在推荐系统的背景下的知识库的使用量正在吸引不断的关注。</p><p>例如，Cheekula等人。 [5]探索从修剪的DBPedia知识库导出的分层类别知识，并应用扩展激活算法将个性化实体识别为推荐。</p><p>Passant[18]计算知识库的图形结构中的语义距离，并使用该距离测量来构建音乐推荐系统。</p><p>与以前的作品相比，主要通过利用<strong>知识库的结构</strong>来研究这个问题，我们提出了一个框架，将异构知识从结构，文本以及视觉内容进行整合到推荐。</p><h3 id="7-2-结构化知识嵌入"><a href="#7-2-结构化知识嵌入" class="headerlink" title="7.2 结构化知识嵌入"></a>7.2 结构化知识嵌入</h3><p>以前的结构知识作品主要旨在将实体和关系嵌入到连续的矢量空间中，并模拟该空间中结构的语义。</p><p>例如，TransE [3]表示转换矢量的关系，使得三重嵌入实体可以以低误差连接。然而，TransE在对知识库中处理了对结构信息的异质性的多对多关系。</p><p>为了解决TransE的问题，TransR [15]提出实体和关系的步骤是完全不同的对象和模型实体以及在不同的空间中的关系，并通过使用翻译矩阵在关系空间中执行转换。</p><p>在本文中，我们将<strong>TransR与我们的推荐任务集成</strong>，以充分利用知识库中的结构知识。</p><h3 id="7-3-深度学习推荐算法"><a href="#7-3-深度学习推荐算法" class="headerlink" title="7.3 深度学习推荐算法"></a>7.3 深度学习推荐算法</h3><p>随着近年来深度学习的成功，有一个从事专业特征的标记开关，即从建议研究中从原始数据中学到的那些。</p><p>例如，Elkahky等人[8]提出了一种多视图深度学习模型，用于了解来自不同域的用户功能和项目特征，并使用丰富的功能表示来提高所有域的推荐质量。</p><p>王[29]通过共同表现为文本内容信息和评级矩阵的协作滤波来显着提高建议表现。</p><p>我们的框架在以下几个方面的上述作品中区分了本身：<br>1）我们专门应用<strong>堆叠的卷积自动编码器来提取视觉内容的语义表示</strong>，这些内容尚未在以前的作品中被利用。<br>2）我们通过整合协同过滤和结构，文本和视觉知识的异质性来设计一个<strong>联合模型</strong>，以提高推荐质量</p><h2 id="8-总结"><a href="#8-总结" class="headerlink" title="8.总结"></a>8.总结</h2><p>本文提出了一个被称为CKE的混合推荐制度，该系统集成了协同过滤和知识库以供建议。</p><p>在此框架之后，我们首先设计三个组件，它利用异构网络嵌入和深度学习嵌入方法，分别从知识库中的结构知识，文本知识和视觉知识中自动提取语义表示。</p><p>接下来，我们将协同过滤和知识库嵌入组件与统一框架相结合，并共同学习不同的表示。</p><p>我们进行的广泛实验验证了我们CKE框架的有效性。</p><p>此外，这项研究揭示了<strong>知识库中的异构信息的使用</strong>，可以在更多的应用方案中用到。</p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
            <tag> Knowledge Graph </tag>
            
            <tag> 论文翻译 </tag>
            
            <tag> Recommendation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超越数据集学习：用于自然语言处理的知识图增强神经网络</title>
      <link href="2021/03/09/1225%E8%B6%85%E6%95%B0%E6%8D%AE%E9%9B%86%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/03/09/1225%E8%B6%85%E6%95%B0%E6%8D%AE%E9%9B%86%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="超越数据集学习：用于自然语言处理的知识图增强神经网络"><a href="#超越数据集学习：用于自然语言处理的知识图增强神经网络" class="headerlink" title="超越数据集学习：用于自然语言处理的知识图增强神经网络"></a>超越数据集学习：用于自然语言处理的知识图增强神经网络</h1><p>会议：NAACL 2018<br>            North American Chapter of the ACL，ACL北美分部<br>            Annual Meeting of the Association for Computational Linguistics，计算机语言学协会年会</p><p>10页</p><h2 id="0-摘要"><a href="#0-摘要" class="headerlink" title="0. 摘要"></a>0. 摘要</h2><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>机器学习一直是许多AI问题的典型解决方案，但是学习模型在很大程度上取决于特定的训练数据。<br>某些学习模型可以使用贝叶斯设置与先验知识结合在一起，但是这些学习模型无法按需访问任何有组织的世界知识。<br>在这项工作中，我们提出了通过知识图谱KG事实三元组中的世界知识来提高自然语言处理任务NLP的学习模型。</p><h3 id="目标-工作"><a href="#目标-工作" class="headerlink" title="目标/工作"></a>目标/工作</h3><p>我们的==目标==是开发一种深度学习模型，该模型可以使用<strong>注意力机制</strong>根据任务<strong>从知识图中提取相关的先验支持事实</strong>。<br>为了减少注意力空间，我们引入了<strong>基于卷积的模型</strong>来<strong>学习知识图实体和关系簇</strong>的表示。</p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>我们表明，<strong>所提出的方法对于必须处理的先验信息量具有高度的可扩展性</strong>，并且可以应用于<strong>任何通用的NLP任务</strong>。<br>使用此方法，我们展示了使用<strong>20Newsgroups（News20）和DBPedia数据集</strong>进行<strong>文本分类</strong>以及使用<strong>Stanford Natural Language Inference（SNLI）数据集</strong>进行<strong>自然语言推理</strong>的性能显着提高。</p><p>我们还证明，当深度学习模型可以以知识库的形式访问有组织的世界知识时，可以使用数量更少的带标签的训练数据来训练它。</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>如今，机器学习围绕算法进行，这些算法可以在可用的特定于任务的标记和未标记训练样本上进行训练。</p><p>尽管像“转移学习”这样的学习范例（Pan和Yang，2010）试图将知识从一项任务整合到另一项任务中，但是这些技术在可扩展性方面受到限制，并且特定于手头的任务。</p><p>另一方面，人类具有内在的能力，可以按需从世界上吸取过去所需的知识，并将其注入新近学习的概念中以解决问题。</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>我们在本文中要解决的问题是：<strong>是否可以开发一种可以通过以下方式进行训练的学习模型：除了基于训练数据的学习之外，还可以注入世界知识的整体进行预测？</strong></p><blockquote><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201225090627294.png" alt="图1基本思想"></p><p>图1：基本思想：X是要素输入，Y是预测。在做出最终预测之前，将检索任务$X_w$的相关世界知识并通过特征输入进行扩充</p></blockquote><h3 id="世界知识-知识图谱"><a href="#世界知识-知识图谱" class="headerlink" title="世界知识/知识图谱"></a>世界知识/知识图谱</h3><p>所谓世界知识，是指不需要特定领域的<strong>结构化通用知识</strong>。</p><p>知识图谱（Nickel等，2016a）是这种结构化世界知识的流行来源。</p><p>知识图以事实三联体的形式表示信息，由主体实体，关系和对象实体组成（例如：&lt;意大利，首都，罗马&gt;）。实体表示图的节点，它们的关系充当边。事实三元组（对象实体，关系，对象关系）表示为==（h，r，t）==</p><p>实用知识库使用各种统计学习机制从二级数据库中收集信息或从非结构化文本中提取事实，此类系统的示例包括NELL（Mitchell等，2015）和DeepDive（Niu等，2012）。也有人类创建的知识库，例如Freebase（FB15k）（Bollacker等，2008）和WordNet（Miller等，1990）。这些知识库中的知识包括常识，部分涵盖常识知识和领域知识（Song和Roth，2017年）。</p><p>**知识图(Knowledge Graph)和知识库(Knowledge Base)**在概念上等效于我们的目的，在本文中我们将互换使用该名称。</p><h4 id="例子：世界知识的重要性"><a href="#例子：世界知识的重要性" class="headerlink" title="例子：世界知识的重要性"></a>例子：世界知识的重要性</h4><p>我们通过一些例子来说明<strong>世界知识的重要性</strong>。以自然语言推理（NLI）问题为例（MacCartney，2009年），请考虑以下两个陈述：</p><ul><li>A: The couple is walking on the sea shore<br>A：夫妻在海边散步</li><li>B: The man and woman are wide awake.<br>B：男人和女人清醒。</li></ul><p>在这里，对于从A推断B的学习模型，它应该可以<u>访问<code>“The man and woman”</code> 和 <code>“The couple”</code> 意味着相同的常识</u>，因为该信息可能并不特定于特定的推断。<br>此外，模型不可能仅从可用于任务的标记训练数据中学习所有此类相关性。</p><p>考虑对新闻片段进行分类的另一个例子:</p><ul><li>Donald Trump offered his condolences towards the hurricane victims and their families in Texas.<br>唐纳德·特朗普对德克萨斯州的飓风受害者及其家属表示慰问。</li></ul><p>除非我们知道<code>&lt;Donald Trump,president, United States&gt;</code> 和<code>&lt;Texas, state,United States&gt;</code>的事实，否则我们不能将其归类为政治新闻。</p><p>我们认为，<strong>机器学习模型除了可以用基础知识对数据进行训练外，还可以通过训练从结构化知识库中获取相关信息来增强其性能。</strong>（也就是文本+知识图谱？）</p><h3 id="模型-任务"><a href="#模型-任务" class="headerlink" title="模型/任务"></a>模型/任务</h3><p>在这项工作中，我们提出了一种深度学习模型，该模型可以根据需要从知识库中提取相关的支持事实（Mitchell等人，2015），并将其与从训练数据中学到的特征一起纳入特征空间（如图1所示）。</p><blockquote><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201225090627294.png" alt="图1基本思想"></p><p>图1：基本思想：X是要素输入，Y是预测。在做出最终预测之前，将检索任务$X_w$的相关世界知识并通过特征输入进行扩充</p></blockquote><p>这是一项具有挑战性的任务，因为知识库通常具有数百万个事实三元组。我们提出的模型涉及一种深度学习机制，以结合该<strong>查找方案</strong>以及<strong>模型的任务特定训练</strong>。</p><p>查找机制和模型足够通用，因此可以扩展为任何任务特定的学习模型，以提高学习性能。</p><p>在本文中，我们在文本分类和自然语言推理方面建立了拟议的KG增强模型优于vanilla model香草模型的性能。</p><p>尽管在自然语言文本方面有大量关于知识图表示的工作（Nickel等人，2016a）（Mitchell等人，2015）（Niu等人，2012），但<strong>没有尝试用知识图信息来扩充学习模型</strong>已经完成了。就我们所知，这是首次尝试将来自知识库的世界知识纳入学习模型。</p><h2 id="2-知识图谱表示"><a href="#2-知识图谱表示" class="headerlink" title="2.知识图谱表示"></a>2.知识图谱表示</h2><p>知识图实体/关系需要编码为数字表示形式以进行处理。在描述模型之前，我们将简要介绍图形编码技术。各种KG嵌入技术可以大致分为以下几类：基于结构的嵌入和语义丰富的嵌入。</p><ul><li>基于结构的嵌入<ul><li>TransE（Bordes等，2013）是知识图表示的入门工作，它使用一维关系向量（h + r = t）将主体实体转换为主体实体。 </li><li>TransE模型的变体（Bordes等，2013）使用实体向量在关系特定子空间上的转换。 </li><li>TransH（Wang et al。，2014b）引入了特定于关系的超平面来翻译实体。</li><li>仅使用图结构的类似工作包括<ul><li>ManifoldE（Xiao等人，2015b）</li><li>TransG（Xiao等人，2015a）</li><li>TransD（Ji等人，2015）</li><li>TransM（Fan等人，2014）</li><li>HolE（Nickel et al。，2016b）</li><li>ProjE（Shi and Weninger，2017）</li></ul></li></ul></li><li>语义丰富的嵌入，这些嵌入技术可学习表示KG的实体/关系及其语义信息。<ul><li>神经张量网络（NTN）（Socher et al。，2013）是该领域的开创性工作，它使用平均单词嵌入和随后的基于张量的操作来初始化实体向量。</li><li>涉及这一想法的最新作品是“联合对齐”（Zhong等，2015）和SSP（Xiao等，2017）。 </li><li>DKRL（Xie et al。，2016）是一种KG表示技术，该技术还考虑了文本的描述性，保持了TransE模型的简单结构。</li><li>预训练的word2vec（Mikolov等人，2013）用于通过约束关系保持的卷积神经网络（CNN）（Kim，2014）来形成实体表示。</li></ul></li></ul><p><strong>在我们的实验中，我们使用了==DKRL==（Xie等人，2016）编码方案，因为它着重于文本的语义描述。</strong>此外，DKRL从根本上使用TransE（Bordes等，2013）方法对结构信息进行编码。因此，我们可以使用t = h + r检索相关的实体和关系并获得完整的事实。这减少了事实检索的复杂性，因为实体/关系的数量比事实的数量少得多，从而使检索过程更快。</p><h2 id="3-提出模型"><a href="#3-提出模型" class="headerlink" title="3.提出模型"></a>3.提出模型</h2><p>在<strong>给定训练数据x和标签y</strong>的情况下，具有<strong>参数Θ</strong>的<strong>常规监督学习模型</strong>试图最大化以下函数：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201225111412868.png" alt="常规模型最大化函数"></p><p>其中优化参数$\Theta$如下给出:</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201225111333801.png" alt="theta公式"></p><blockquote><p>当我们有另一个函数y=f(x)时，若有结果x0= argmax(f(x))，则表示当函数f(x)取x=x0的时候，得到f(x)取值范围的最大值；若有多个点使得f(x)取得相同的最大值，那么argmax(f(x))的结果就是一个点集。</p><p><strong>argmax(f(x))是使得 f(x)取得最大值所对应的变量点x(或x的集合)</strong></p></blockquote><p>在这项工作中，我们建议通过==纳入世界知识特征$x_w$来扩大监督学习过程==。使用单独的模型使用<strong>数据x​</strong>检索世界知识特征，其中$x_w = F(x,\Theta^{(2)})$。因此，我们<strong>修改后的目标函</strong>数可以表示为：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201225111538706.png" alt="修改后的目标函数"></p><p>其中$ Θ= {Θ^{(1)}，Θ^{(2)}} $。可以使用以下公式获得优化的参数：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201225111825990.png" alt="优化参数Theta"></p><p>随后的部分<strong>集中于函数F的公式化，该函数负责使用数据样本x进行事实三重检索。</strong></p><p>这里需要注意的重要一点是，我们没有假设基于F的P的任何结构形式。因此，该方法是通用的，<strong>适用于以任何形式的P来扩充任何监督学习设置，只有约束P应该使得误差可以针对F计算梯度</strong>。</p><p>在实验中，我们使用softmax，并使用LSTM（Greff等人，2015）编码的输入作为==P的形式==。==至于F==，我们使用了<strong>soft attention软注意力</strong>（Luong等。 ，2015； Bahdanau等人，2014）使用输入的LSTM编码和事实的适当表示。</p><p>基于事实的表示，我们提出了<strong>两个模型（a）Vanilla Model范尼拉模型（b）Convolution-based entity/relation cluster representation基于卷积的实体/关系聚类表示</strong>，用于后续部分中的<strong>事实检索</strong>。</p><h3 id="3-1-Vanilla-Model-香草模型"><a href="#3-1-Vanilla-Model-香草模型" class="headerlink" title="3.1 Vanilla Model 香草模型"></a>3.1 Vanilla Model 香草模型</h3><p>==KG的实体和关系使用DKRL编码==，如前所述。</p><ul><li>令$e_i∈R^m$代表实体 $i$ 的编码，</li><li>而$r_j∈R^m$代表KG中的第 $j$ 个关系。</li><li>串联词向量$ x =(x_1，x_2，…，x_T)$形式的输入文本首先使用LSTM（Greff等，2015）模块进行编码，如下所示：</li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201226091915953.png" alt="ht=f(xt,ht-1)"></p><p>以及：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201226092008497.png" alt="o的公式"></p><ul><li><p>$h_t∈R^n$在t时刻的LSTM的隐藏状态，</p></li><li><p>f是非线性函数</p></li><li><p>T是序列长度。</p></li></ul><p>然后从o形成上下文向量，如下所示：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201226153203355.png" alt="image-20201226153203355"></p><p>其中，$W∈R^{n×m}$表示权重参数。</p><p>用分别的LSTM复制相同的过程，以形成两个单独的上下文向量，==一个用于实体检索（CE），一个用于关系检索（CR）==。</p><p>由于在KG模型中KG中的事实三元组数量约为数百万个，因此我们使用<strong>分别通过实体和关系空间生成注意力的手段</strong>，然后使用检索到的实体和关系来形成事实。==对于实体的注意力，$e_i$通过以下方式给出实体上下文向量==：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201226154946687.png" alt="image-20201226154946687"></p><p>| E |是KG中的实体数。</p><p>类似地，对==关系向量$r_i$的注意力==计算为</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201226155110618.png" alt="image-20201226155110618"></p><p>| R |是KG中的关系数。</p><p>==最终的实体和关系向量检索==是通过加权总和与各个检索到的实体/关系向量的关注值来计算的。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201226155222219.png" alt="image-20201226155222219"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201226172918309.png" alt="图2：Vanilla实体/关系检索框图"></p><p>图2显示了实体/关系检索的示意图。</p><p>在计算了最终的实体和关系向量之后，我们期待事实三元组的完成。</p><p>实验中使用的KG嵌入技术是DKRL，它固有地使用TransE模型假设（h + r≈t）。</p><p>因此，使用主题实体和关系我们将对象实体形成为t = e + r。</p><p>因此，检索到的==三元组事实为F = [e，r，e + r]==，其中$F∈R^{3m}$。</p><p>==使用LSTM模块将获取的事实信息与输入x的上下文向量（C）串联在一起==。</p><p>最终==分类标签y的计算==如下：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201226172830593.png" alt="image-20201226172830593"></p><p>​    </p><h3 id="3-2训练前-预训练的KG检索"><a href="#3-2训练前-预训练的KG检索" class="headerlink" title="3.2训练前/预训练的KG检索"></a>3.2训练前/预训练的KG检索</h3><p>香草模型涉及整个实体/关系空间，这不是一个好方法，因为我们观察到==每个注意力值的梯度很容易饱和==。</p><p>在一起训练分类和检索模块时，模型倾向于忽略KG部分，并且梯度仅通过分类模块传播。可以预见到这一点，因为手头任务的最相关信息来自训练样本，而背景帮助信息仅来自KG。经过几次训练后，KG检索到的事实始终收敛到固定向量。</p><p>为了克服这个问题，我们尝试了分别单独进行KG检索的预训练。</p><p>==预先训练的KG模型用于检索事实==，然后与分类模块连接，同时我们允许在联合训练时通过预先训练的模型传播错误。</p><p>我们推断，KG不返回噪音，并且具有完成任务所需的必要信息，因为单独的KG部分显示出显着的性能（News20为59％，SNLI为66％）。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201227173200105.png" alt="图3：分别训练知识图检索和共同训练完整模型"></p><p>图3描绘了整个培训方案。该程序==解决了在联合训练时KG检索部分中的梯度饱和问题==。</p><p>然而，==注意力机制的关键问题仍然必须涵盖大范围的实体/关系==。</p><h3 id="3-3基于卷积的实体和关系簇表示"><a href="#3-3基于卷积的实体和关系簇表示" class="headerlink" title="3.3基于卷积的实体和关系簇表示"></a>3.3基于卷积的实体和关系簇表示</h3><p>在本节中，我们提出一种机制来==减少必须在知识图中生成注意力的大量实体/关系==。</p><p>我们建议通过学习相似实体/关系向量的表示并关注它们来减少注意力空间。</p><p>为了聚类相似的实体/关系向量，我们使用了<strong>k-均值聚类</strong>（Bishop，2006），并在每个聚类中形成了具有相同数量的实体/关系向量的l个聚类。</p><p>然后使用<strong>卷积滤波器</strong>对每个聚类进行编码。</p><p>k均值聚类的输出是一系列实体/关系向量${e^T_1，e^T_2，···，e^T_q}$，其中$e_i∈R^m$。对于每个群集，将这些向量堆叠起来以形成$\epsilon$，作为CNN编码器的2D输入，其中$\epsilon∈R^{m×q}$。</p><p>在寻找合适的滤波器形状的实验过程中，观察到使用2D滤波器，模型根本无法收敛。</p><p>因此，我们推断向量ei中两个不同索引的潜在表示不应使用卷积进行篡改。</p><p>然后我们求助于使用一维卷积滤波器，该滤波器仅沿E的列滑动，如图4所示。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201227174153439.png" alt="图4：卷积模型集群表示"></p><p>沿y轴的步幅长度是窗口长度k。卷积层的输出表示为：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201227174215986.png" alt="image-20201227174215986"></p><p>其中$\epsilon’(i，j)$是输出矩阵$\epsilon’$的$(i,j)^{th}$元素，$W∈R^k$是卷积权重滤波器。</p><p>为了减少参数空间，在卷积层之后有一个池化层，类似于上面提到的卷积核，我们仅沿y轴使用了一维窗口。</p><p>我们使用步长为k的两层卷积网络，并调整了最大池窗口n以获得输出Ei∈Rm，其中i是聚类索引。</p><p>对于关系，也完成了相似的聚类过程，然后进行了聚类实体的编码。</p><p>因此，实体和关系空间都减少为包含更少的元素，每个集群一个。</p><p>在形成紧凑的实体空间E和关系空间R之后，我们遵循与先前相同的步骤来形成注意力，但是现在，由于梯度有效地传播并且不受较大空间的阻碍，因此训练更加有效。</p><p>由于卷积体系结构也同时受到训练，因此注意力机制不再像以前那样繁重，可以在实体和关系的广阔空间中进行学习。</p><p>这里需要提到的另一点是关于集群中项目的排序/排序，我们已经做过实验以验证排序不会影响最终结果。</p><p>我们已经通过随机改组每个集群中的实体/关系来验证了这一点，并且ac317 curacy输出保持在±0.5％的误差范围内。</p><p>在各种排列中，卷积运算符为聚类学习的表示形式有所不同，但不会影响整体结果。</p><p>关于对卷积算子学习什么的解释，沿着实体/关系向量的每个维度应用算子，以学习聚类的表示。</p><p>此表示包括来自集群中相关实体的信息，因为相关实体随任务而变化，因此使用卷积学习的表示也将进行相应调整。</p><p>这类似于从图像中学习相关特征，在我们的案例中，卷积层学习的特征集中在与任务有关的群集中的相关实体/关系上。</p><h2 id="4-实验与评估"><a href="#4-实验与评估" class="headerlink" title="4.实验与评估"></a>4.实验与评估</h2><p>我们的实验旨在==分析深度学习模型是否可以从相关来源访问KG事实时是否得到改进==。</p><p>知识图的选择必须与手头的任务相关，因为当前没有单个知识库包含多种信息并且可以满足所有任务。我们用结果说明了深度学习模型在访问相关事实时的性能会提高。</p><p>我们还说明，随着该模型可以通过访问知识库来更快地学习，我们可以使用更少的训练数据来训练深度学习模型，而不会影响准确性。</p><p>在接下来的部分中，我们将简要描述使用的数据集和相关的知识库。</p><h3 id="数据集和相关知识图"><a href="#数据集和相关知识图" class="headerlink" title="数据集和相关知识图"></a>数据集和相关知识图</h3><p>在我们的实验中，我们主要使用了流行的文本分类数据集==20Newsgroups==（Lichman，2013）和自然语言推断数据集，==斯坦福自然语言推断（SNLI）==语料库（Bowman等，2015）。</p><p>我们还对==[DBPedia本体分类数据集](<a href="http://wiki.dbpedia.org/">http://wiki.dbpedia.org/</a> services-resources/dbpedia-data-set-2014)==进行了实验，并具有非常强的基准。</p><p>选择这些数据集是因为它们与两个最流行的知识库（==Freebase（FB15k）==（Bollacker等，2008）和==WordNet（WN18）==（Bordes等，2013））共享领域知识。</p><p>表1中提到了数据集的训练量和测试量。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201228095600230.png" alt="数据集划分"></p><p>==Freebase（FB15k）==（Bollacker et al。，2008）包含有关==人，地点和事物的事实==（包含14904个实体，1345个关系和490万个事实三元组），==可用于20Newsgroups的文本分类==（Lichman，2013年）数据集。</p><p>另一方面，==WordNet（WN18）==（Bordesetal，2013）（有40943个实体，18个关系和150万个事实三元组）包含==有关日常事物的事实==（例如：家具包括床），可以==帮助推断SNLI==之类的任务。</p><p>这两个知识库都是有向图，由于较少数量的关系WN18，因此实体更有可能使用相同类型的关系进行连接。</p><p>对于与这两个数据集20Newsgroups和SNLI相关的实验，我们使用==标准LSTM作为分类模块==。</p><p>如前所述，我们的基于KG的事实检索式独立于所使用的基本模型。我们通过KG事实检索使用建议的模型显示了性能的提高。我们使用测试集的==分类准确性作为评估指标==。</p><h3 id="4-1-实验装置"><a href="#4-1-实验装置" class="headerlink" title="4.1 实验装置"></a>4.1 实验装置</h3><p>所有实验都是在配备Quadro M5000 GPU和8 GB内存的Dell Precision Tower 7910服务器上进行的。</p><p>模型是使用Adam的Optimizer（Kingma和Ba，2014年）以==随机梯度下降==（Bottou，2012年）的方式进行训练的。这些模型是使用==TensorFlow==实现的（Abadi等，2015）。</p><p>表2列出了相关的超参数。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201228100134744.png" alt="表2：用于News20和SNLI数据集的实验中使用的超参数"></p><p>使用预训练的<a href="http://nlp.stanford.edu/data/glove.840B.300d.zip">Glo Ve(Pennington et al。，2014)</a>向量获得了实验的词嵌入。对于在预训练向量中缺失的单词，使用在相应数据集上训练的局部Glo Ve向量。</p><h3 id="4-2-结果与讨论"><a href="#4-2-结果与讨论" class="headerlink" title="4.2 结果与讨论"></a>4.2 结果与讨论</h3><p>表3显示了News20 和SNLI数据集上提出的各种方法的测试准确性的结果。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201228101148626.png" alt="表3：使用WN18的FB15K和SNLI数据集测试News20中方法的准确性"></p><p>我们观察到，使用基本的香草模型合并KG事实，由于检索模型没有得到有效的训练，因此可以稍微改善性能。</p><p>基于卷积的模型显示出比常规LSTM分类有显着改进。</p><p>在调整群集实体/关系的卷积参数时，观察到较小的步幅长度和较长的最大池窗口可改善性能。</p><p>对于News20数据集，我们显示了将近3％的改善，对于SNLI，我们显示了近5％的改善。</p><p>这项工作更多地是从以下方面出发的：整合世界知识是否会改善任何深度学习模型，而不是超越最新水平的表现。</p><p>如前所述，尽管使用LSTM编码模型的输入以及检索向量，但这两个模块不必相同。</p><p>为了对输入进行编码，可以使用任何复杂的最新模型。 LSTM也已用于生成检索向量。</p><p>对于DBPedia本体分类数据集，我们使用了98.6％的强基线，在使用基于卷积模型的KG（Freebase）增强基线之后，我们看到了约0.2％的改进。</p><p>随着基线的增强，改进的范围减小了。这是非常直观的，因为复杂的模型本身无法自学数据，因此可用于进一步改进的空间相对较小。</p><p>在实验中观察到的改进在较弱的学习模型中是显着的，但是从DBPedia数据集的结果来看，它也能够改进更强的基准。</p><h3 id="4-3-训练深度学习模型时减少数据集尺寸的需求"><a href="#4-3-训练深度学习模型时减少数据集尺寸的需求" class="headerlink" title="4.3 训练深度学习模型时减少数据集尺寸的需求"></a>4.3 训练深度学习模型时减少数据集尺寸的需求</h3><p>我们==假设随着知识图将更多信息提供给模型，我们可以用更少的训练数据来获得更好的性能==。</p><p>为了验证这一点，我们对20Newsgroups数据集的不同数据集部分进行了实验，如图5所示。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201228101857282.png" alt="图5：针对News20的基线和KG增强模型的数据集分数的精度图"></p><p>从图中可以看出，KG增强的LSTM具有70％的数据优于具有完整数据集支持的基线模型，从而减少了对标记数据的依赖性30％。</p><p>我们还设计了一个实验，用于比较在完整训练数据上训练的基线模型的准确性，并将其与仅使用20Newsgroups和SNLI数据集的训练数据的70％训练的KG增强模型的准确性进行比较。</p><p>跨训练时期的准确性和训练损失图在图6中给出。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201228102337601.png" alt="图6"><br>图6：<br>（a）针对News20任务的LSTM（使用完整和70％数据集）和KG增强LSTM（使用70％数据集）的训练时期的精度图<br>（b）使用News20数据集的上述方法的相应训练损失图<br>（c ）针对SNLI任务的LSTM（使用完整和70％数据集）和KG增强LSTM（使用70％数据集）训练时期的精度图<br>（d）使用SNLI数据集的上述方法的相应训练损失图</p><p>与仅基于完整数据训练的香草LSTM模型相比，即使只有70％的数据，KG增强模型也能够实现更好的准确性。</p><p>这清楚地表明，与任务相关的信息是从知识图中检索出来的，并且训练损失的减少并不是仅由于数据较少而导致的。</p><p>另请注意，当数据集大小减小时，与常规LSTM相比，KG LSTM的训练损失明显更少。</p><p>这个结果非常有希望，以减少难以实现的大型深度学习模型的大型标签训练数据需求。</p><h2 id="5-相关先前工作"><a href="#5-相关先前工作" class="headerlink" title="5.相关先前工作"></a>5.相关先前工作</h2><p>以前从未尝试过将通用的世界知识用于学习任务，特别是用于自然语言处理的基本思想。</p><p>对于多标签图像分类，近来（Marino et al。，2016）一直在使用KGs。</p><p>在这项工作中，他们首先获取输入数据的标签（使用不同的模型），使用这些标签从KG填充要素，然后将这些要素回用于最终分类。</p><p>对于NLP任务，所需的信息可能不一定取决于最终分类，我们直接使用输入中可用的所有信息来填充知识图中的相关信息。我们的尝试与转移学习Transfer Learning（Pan and Yang，2010）大不相同。</p><p>在“转移学习”中，重点是为一个任务训练模型并调整已训练的模型以将其用于另一任务。这在很大程度上取决于源任务和目标任务之间的对齐方式，并且传输的信息在模型中。</p><p>在我们的案例中，对于任何给定任务，一般的世界知识都被注入到学习模型中。按照同样的逻辑，我们的工作也不同于领域适应（Glorot等，2011）。</p><p>已经尝试使用世界知识（Song和Roth，2017年）来创建更多带标签的训练数据并提供远距离监督等。</p><p>基于领域的已知信息将归纳性偏见（Ridgeway，2016年）整合到学习模型的结构中，是一个活跃的研究领域。</p><p>但是，我们的动机和方法与这些作品根本不同。</p><h2 id="6-结论与未来工作"><a href="#6-结论与未来工作" class="headerlink" title="6.结论与未来工作"></a>6.结论与未来工作</h2><p>在这项工作中，我们说明了将世界知识纳入训练任务特定模型的必要性。</p><p>我们提出了一种新颖的基于卷积的体系结构，以减少对实体和关系的关注空间，其表现优于其他模型。</p><p>通过对两个众所周知的数据集的原始基准进行重大改进，我们已经说明了我们提出的方法在增强深度学习模型性能方面的功效。</p><p>我们展示了所提出的方法可用于减少深度学习模型的标记训练数据需求。</p><p>尽管在这项工作中，我们仅专注于NLP任务，并使用LSTM作为基线模型，但该提议的方法也适用于其他领域任务，以更复杂的深度学习模型为基线。</p><p>据我们所知，这是首次将通用的世界知识注入到深度学习模型的任务特定训练中。<br>作为同类产品的第一项工作，还有很多改进的余地。<br>可以制定一个更复杂的模型，该模型能够从数百万个条目中更有效地检索事实。</p><p>当前，我们仅关注平面注意力结构，分层注意力机制会更合适。<br>该模型使用软注意力以通过简单的随机梯度下降进行训练。可以通过强化学习进一步关注事实。<br>这将进一步帮助选择不是相似类型但与任务相关的多重事实。</p><p>基于卷积的模型有助于减少必须引起注意的实体和关系的空间。然而，可以使用基于相似性的搜索（Wang等，2014a； Mu和Liu，2017）使用更复杂的技术。</p><p>初始实验的结果说明了我们提出的方法的有效性，主张朝这些方向进行进一步研究。</p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
            <tag> Knowledge Graph </tag>
            
            <tag> 论文翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用于移动应用程序开发的知识图增强型第三方库推荐</title>
      <link href="2021/02/23/1204%E7%94%A8%E4%BA%8E%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9A%84%E7%9F%A5%E8%AF%86%E5%9B%BE%E5%A2%9E%E5%BC%BA%E5%9E%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%8E%A8%E8%8D%90/"/>
      <url>2021/02/23/1204%E7%94%A8%E4%BA%8E%E7%A7%BB%E5%8A%A8%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91%E7%9A%84%E7%9F%A5%E8%AF%86%E5%9B%BE%E5%A2%9E%E5%BC%BA%E5%9E%8B%E7%AC%AC%E4%B8%89%E6%96%B9%E5%BA%93%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<h1 id="用于移动应用程序开发的知识图增强型第三方库推荐"><a href="#用于移动应用程序开发的知识图增强型第三方库推荐" class="headerlink" title="用于移动应用程序开发的知识图增强型第三方库推荐"></a>用于移动应用程序开发的知识图增强型第三方库推荐</h1><p>Knowledge Graph Enhanced Third-Party Library Recommendation for Mobile Application Development</p><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>移动应用市场变得越来越繁荣。第三方库在移动应用程序开发中发挥了至关重要的作用。这些库可以缩短开发时间，提高开发效率并提高开发质量。当前，已经发布了<strong>大量第三方库</strong>，这给开发人员选择适当的库带来了沉重的负担。</p><h3 id="方法："><a href="#方法：" class="headerlink" title="方法："></a>方法：</h3><p>针对这一问题，在本文中，我们通过<strong>集成主题建模和知识图技术</strong>提出了一种新颖的第三方库推荐方法。</p><ul><li><p>在主题建模组件中，我们从文本应用程序描述中提取主题，并根据与新应用程序共享相似主题的应用程序使用的库提出建议。</p></li><li><p>在知识图组件中，我们利用知识图来整合第三方库和应用程序的结构化信息，以及推荐应用程序和库的交互信息。</p></li></ul><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><p>在真实数据集上进行的实验表明，在推荐效果方面，我们提出的方法优于几种最先进的方法。</p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p>第三方库推荐，移动应用，知识图，主题建模，MKR。</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><h3 id="背景问题："><a href="#背景问题：" class="headerlink" title="背景问题："></a>背景问题：</h3><p>移动应用开发，第三方库在移动应用程序开发中可以发挥至关重要的作用，这是因为通过重复使用它们可以显着提高开发质量和生产率。如何从大量复杂的第三方库中选择满足需求的库，成为移动应用程序开发中的一个难题。</p><h3 id="现有研究："><a href="#现有研究：" class="headerlink" title="现有研究："></a>现有研究：</h3><p>近年来，研究人员为第三方图书馆推荐提出了一些方法[1] – [5]。这些方法主要集中在**关联规则挖掘[6]，标签信息和主题模型方法[7]**的使用上。</p><h3 id="仍存缺点："><a href="#仍存缺点：" class="headerlink" title="仍存缺点："></a>仍存缺点：</h3><p>但是，现有方法仅利用一些粗粒度的辅助信息，例如<strong>分类和主题，无法捕获应用程序和第三方库的结构化潜在知识级连接</strong>。结果，开发人员无法发现新的库和未直接关联的库。这不仅限制了开发人员使用的库的狭窄范围，而且还阻碍了第三方库的开发和发展。</p><h3 id="提出方法："><a href="#提出方法：" class="headerlink" title="提出方法："></a>提出方法：</h3><p>在这项工作中，我们提出了一种混合知识图增强库推荐方法TM-MKR，</p><p>它由两个主要部分组成：==主题建模组件==和==知识图组件==。</p><ul><li>在主题建模（TM）组件中，我们使用LDA [8]模型，该模型将应用程序和库的文本描述作为输入来计算它们的相似性。</li><li>在知识图组件中，根据第三方库推荐的特定情况，通过引入应用程序和第三方库的知识图，我们可以自定义MKR [9]以获取基于用户的MKR（U-MKR）和基于项目的MKR（I-MKR）。</li></ul><h3 id="主要工作"><a href="#主要工作" class="headerlink" title="主要工作"></a>主要工作</h3><p>我们的主要贡献如下：</p><ul><li>我们==构造了一个大规模的领域知识图==，以获得应用程序和库之间的语义级别关联。</li><li>我们提出了一种==混合推荐方法==，该方法基于应用程序和库的交互信息，描述和结构化语义信息，将主题建模和知识图相结合。</li><li> 我们对真实数据集进行实验，并将我们提出的方法与几种最新方法进行比较。实验结果证明了我们的TM-MKR方法的有效性。</li></ul><h3 id="论文结构"><a href="#论文结构" class="headerlink" title="论文结构"></a>论文结构</h3><p>本文的其余部分安排如下。</p><ol start="2"><li>第二部分回顾了图书馆推荐系统和基于KG的推荐中的一些相关工作。</li><li>第三节介绍了初步情况。</li><li>第四节介绍了建议的知识图增强图书馆推荐系统。</li><li>在第五节中讨论了实验和结果。</li><li>最后，在本文的末尾给出了未来工作的结论和方向。</li></ol><h2 id="2-相关工作"><a href="#2-相关工作" class="headerlink" title="2.相关工作"></a>2.相关工作</h2><h3 id="A-第三方库推荐"><a href="#A-第三方库推荐" class="headerlink" title="A.第三方库推荐"></a>A.第三方库推荐</h3><p>到目前为止，已经提出了许多与第三方库推荐有关的作品。</p><ol><li><p>较早的API建议大多使用模式挖掘和匹配。</p><ul><li>例如，PROSPECTOR是一种基于API方法签名和从样本客户端程序的语料库中挖掘出来的杂类的工具[10]，</li><li>而MAPO是一种工具，可以自动挖掘API使用模式，并根据程序员的要求进一步推荐已开采的API使用模式及其相关的代码段[11]。</li></ul><p>这些方法用于在特定情况下推荐。</p></li><li><p>之后，Thung等提出了一种将关联规则挖掘与推荐方法相结合的混合方法。他们利用基于一组库使用模式的关联规则挖掘组件，以及基于其他类似项目使用的库进行协作筛选来提出建议。</p></li><li><p>近年来，许多研究建议通过将协作式过滤与基于内容的方法相结合来推荐该库。</p><ul><li>AppLibRec [4]，[5]结合了LDA和协作过滤，以推荐用于软件开发的第三方库列表，其中LDA是一种生成概率模型，用于从文本语料库中提取关键字。    </li><li>Chen等提出了一种基于从Stack Overflow问题中提取的标签信息推荐库的新方法。他们利用词嵌入技术以及特定于领域的关系和类别知识来实现类比库推荐[1]，[2]。</li></ul></li></ol><p>从这些推荐方法的开发中，我们可以看到库级别的开发正受到开发人员的更多关注。</p><p>我们的方法从库级别的粒度为移动应用程序的开发人员提供了建议。它不仅利用了==应用程序及其相应的第三方库的交互作用，而且还依赖于应用程序的文本描述==。更重要的是，我们利用==知识图结合了移动应用程序和第三方库的结构化语义信息==。</p><h3 id="B-知识图"><a href="#B-知识图" class="headerlink" title="B.知识图"></a>B.知识图</h3><p>近年来，知识图在推荐器系统中的使用引起了越来越多的关注。研究人员已经提出了知识图，包括诸如DBpedia，YAGO，NELL，DeepDive，BabelNet，ConceptNet等学术项目，以及一些商业项目，例如Microsoft的Satori和Google的知识图。</p><p>将==知识图引入推荐系统的两种主要方法==是</p><ul><li><p>基于路径的方法[12]，[15]-[17]</p></li><li><p>基于嵌入的方法[13]，[14]，[18]，[19]。</p></li></ul><p>它已被应用在许多场景中，例如</p><ul><li>新闻推荐[13]，</li><li>音乐推荐[20]，</li><li>论文推荐[21]，</li><li>问题解答[22]，</li><li>文本分类[23]，</li><li>社区检测[24]，</li><li>机器阅读[25] 。</li></ul><p>在本文中，我们将其应用于第三方库推荐。利用基于嵌入的方法，将知识图与推荐任务相结合，以充分利用应用程序和库的丰富语义信息。</p><h2 id="3-基础知识"><a href="#3-基础知识" class="headerlink" title="3.基础知识"></a>3.基础知识</h2><p>在本节中，我们介绍一些与工作有关的初步知识</p><h3 id="A-LDA"><a href="#A-LDA" class="headerlink" title="A. LDA"></a>A. LDA</h3><p>潜在狄利克雷分配（LDA）[8]是一种生成统计模型，在自然语言处理中包含单词，主题和文档的三层结构。</p><p>LDA是一种无监督的机器学习技术，可用于识别隐藏在大规模文档集合或语料库中的主题信息。</p><p>在LDA中，每个文档都可以视为各种主题的混合，其中每个文档都被视为具有通过LDA分配给它的一组主题。</p><p>对于由长度为$N_i$的M个文档组成的主体D，LDA假定以下生成过程：</p><ol><li>选择$θ_i∼ Dir（α）$，其中 $i∈{1，……，M}$，和Dir（α）是典型具有稀疏（α&lt;1）的对称参数α的狄利克雷分布</li><li>选择$ϕk∼ Dir（β）$，其中$k∈{1，…… ，K}$，而β是稀疏的</li><li>对于每个单词位置$i，j$，其中 $i∈{1，……，M}$ 和 $j∈{1，……，N_i}$：<br>a）选择一个主题$z_{i，j}〜多项式（θ_i）$。<br>b）选择单词$w_{i，j}〜多项式（ϕ_{z_i}，j）$。</li></ol><p>可以根据以下公式获得文档的单词分布的最大似然估计：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201204204941878.png" alt="公式1-最大似然估计公式"></p><p>最后，可以通过诸如吉布斯采样之类的方法来估计模型中的参数。</p><h3 id="B-知识图谱嵌入"><a href="#B-知识图谱嵌入" class="headerlink" title="B.知识图谱嵌入"></a>B.知识图谱嵌入</h3><p>知识图嵌入（KGE）的目标是学习每个实体和关系的低维表示向量，该向量保留原始知识图的结构信息。</p><p>近年来提出的KGE方法可以大致分为两类：</p><ul><li>语义匹配模型[27]，[28]<ul><li>HolE [27]</li><li>ANALOGY [28]</li></ul></li><li>翻译距离模型[29]-[32]<ul><li>TransE [29]</li><li>TransH [30]</li><li>TransD [31]</li><li>TransR [32]</li></ul></li></ul><p>由于性能优越，最近广泛使用了诸如TransE [29]，TransH [30]，TransD [31]，TransR [32]，HolE [27]和ANALOGY [28]等KGE方法。</p><p>在我们的工作中，我们使用的KGE方法是MKR [9]中提出的深度语义匹配体系结构。具体过程如图1所示。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201204205323199.png" alt="图1-MKR中的KGE处理"></p><p>对于给定的三元组$（h,r,t）$，头部的$h$的原始特征向量由$L$个交叉压缩单元$C^L$处理。<br>该过程描述如下。对于每一个 $v$ 和一个与其相关联的实体 $e$ ，我们从第 $l$ 层构造其潜在特征$v_l$和  $e_l$ 的成对交互：<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205092147009.png" alt="公式2"></p><p>其中$C_l$是$l$层的交叉特征矩阵。通过将交叉特征矩阵投影到它们的潜在表示空间中，可以获得下一层的项目和实体的特征向量：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201204210144168.png" alt="公式3"></p><p>其中 $w_l$ 和 $b_l$ 是可训练的权重trainable weight和偏差向量bias vectors。</p><p>关于关系r，其原始特征向量由L层多层感知（MLP）处理：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205092107682.png" alt="公式4"></p><p>其中M（x）=σ（Wx + b）是具有权重W，偏差b和非线性激活函数σ（.）的全连接的神经网络层。然后将它们的潜在特征连接在一起，然后是用于预测尾部t的K层MLP：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205092544213.png" alt="公式5"></p><p>其中S（h）是实体h的关联项的集合， $\hat{t}$ 是尾部t的预测向量。最后，得分函数定义为：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205093051722.png" alt="公式6"></p><p>其中σ（.）是归一化内积</p><h2 id="4-提出方法"><a href="#4-提出方法" class="headerlink" title="4.提出方法"></a>4.提出方法</h2><p>在本节中，我们将详细介绍我们提出的TM-MKR方法。我们首先介绍整个框架，然后讨论主题建模和知识图组件。最后，这两个部分由一个聚合器单元合并。</p><h3 id="A-问题定义"><a href="#A-问题定义" class="headerlink" title="A. 问题定义"></a>A. 问题定义</h3><p>我们在本文中定义我们的推荐问题如下。<br>例如，在典型情况下，开发人员想要开发3D赛车游戏，他在GitHub上创建了一个项目，并在README文件中详细介绍了功能说明。现在，根据他的==历史习惯==，我们可以推荐他在其他项目中常用的一些库，例如“ React Native”，“ okHttp”和“ Realm”。根据==README文件的文字描述==，我们可以找到一些==类似的游戏应用程序项目==，并且这些项目中使用的库可以用作建议，例如排行榜的“ Google游戏”，多人支持和云存储，以及用于游戏的“ Unity 3D”。创建交互式3D内容。在项目开发和迭代的过程中，我们还可以根据==已调用的库==推荐相关的库。库推荐的示意图如图2所示。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205093821934.png" alt="图2-库推荐示意图"></p><p>更正式地说，我们有一组M个应用程序A = {a1，a2，…。 。 。 ，aM}和一组有一组M个应用程序A = {a1，a2，…。 。 。 ，aM}和一组N个库L = {l1，l2，…。 。 。 ，lN}。</p><p>根据应用程序对库的调用信息，定义的应用程序与库的交互矩阵 $Y∈R^{M×N}$ ，其中 $y_{al} = 1$ 表示应用程序调用了库l；否则 $y_{al}=0$。</p><p>对于每个应用程序和库，还使用它们的描述性信息。所有这些描述构成了主体D。</p><p>此外，我们介绍了由实体和关系三元组组成的应用程序和库的知识图G。每个三元组（h，r，t）表示一个事实，即从头实体h到尾实体t之间存在关系r。</p><p>例如，三元组（Twitter工具包，TAGGED_WITH，在线服务）指出，“ Twitter工具包”库被标记为“在线服务”。</p><p>在我们的图书馆推荐方案中，交互矩阵中的每个应用程序和图书馆都与知识图中的一个实体相关联。</p><p>给定一个交互矩阵Y，一个语料库D和一个知识图G，我们的目标是找到可能与要开发的应用程序相关的前N个库。</p><h3 id="B-框架"><a href="#B-框架" class="headerlink" title="B. 框架"></a>B. 框架</h3><p>对于应用程序和库，我们不仅具有其非结构化的文本描述，还具有结构化的语义信息。</p><p>在这些==文字描述==中，直接描述了应用程序和库的功能。我们可以使用主题建模技术对其进行处理，以找到推荐的相似库和应用程序。</p><p>对于==结构化语义信息==，它在应用程序和库之间包含一些潜在的关联。我们可以利用知识图进行处理，并找到一些必要但不直接相关的建议库。但是主题建模技术和基于知识图的方法都无法同时充分利用所有信息，因此我们考虑使用混合方法来集成这两种技术。</p><p>在我们的工作中，我们选择LDA处理文本描述，选择MKR处理结构化语义信息。</p><p>我们提出的TM-MKR方法的框架如图3所示。</p><p>==它由三个主要组件组成：一个LDA模块，一个MKR模块和一个聚合器单元。==</p><p>左侧的LDA模块将应用程序 $a$ 的描述性信息 $d_a$ 和库 $l$ 作为输入，并获得评分得分 $S_{LDA}$。</p><p>右侧的MKR模块将应用程序 $a$ 和库 $l$ 作为输入，并获得评分分数 $S_{MKR}$。</p><p>最终，聚合器单元通过组合 $S_{LDA}$ 和 $S_{MKR}$ 来计算 $l$ 的最终评分S。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205095130264.png" alt="图3-提出的库推荐方法的框架。"></p><h3 id="C-LDA模型"><a href="#C-LDA模型" class="headerlink" title="C. LDA模型"></a>C. LDA模型</h3><p>LDA模块的详细信息显示在图3的左侧。</p><p>此模块的过程描述如下。我们首先对==应用程序和库的描述性信息==进行预处理，例如tokenization（即删除停用词，标点和低频词）和stemming。然后我们设置一些参数以开始训练。通常，主题数的适当值为200到500。</p><p>训练后，获得LDA模型，可以为每个描述d生成主题分布向量 $θ_d$。</p><p>我们将 $θ_d$ 表示为：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205095515926.png" alt="公式7-θ_d的表示"></p><p>其中 $t_i（i∈{1,2，…，T}）$是文档d中第i个主题的比例，T是训练语料库D的所有主题的数量。</p><p>对于给定的新应用程序a，我们使用LDA模型将其文本描述 $d_a$ 转换为主题向量$θ_{d_a}$，然后==计算该主题向量（新给定的应用程序a转换后的向量）与训练应用程序的主题向量之间的距离==。我们考虑余弦相似度来确定两个向量的相似度：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205095855122.png" alt="公式8-余弦相似度"></p><p>其中·表示点积，||θ|| 表示主题向量的大小。</p><p>最后，我们计算由LDA模块获得的得分 $S_{LDA}$。我们选择余弦相似度得分最高的前k个应用，其描述文件 $d_a$ 作为邻近  N（a）= {a1，a2，。 。 。 ，ak}用于新应用程序。 $ l$ 的分数定义为：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205100704459.png" alt="公式9-SLDA分数的计算"></p><p>SLDA（1）的范围是0到1。</p><p>（这里应该是 $y_{a_il}$, l也是下标：y_{a_il} )</p><blockquote><p>==也就是说左面的LDA模型，求得是新给出的应用程序a的文本描述，与原来库中所训练的老应用程序θ的文本描述的相似度。得出前k个相似的程序。然后最终得出的分数相当于，库l在这k个程序中使用程度，也就是库l可能在a中的使用概率。==</p><p>公式9中的，</p><ul><li><p>k: 余弦相似度得分最高的前k个应用；</p></li><li><p> $y_{a_il}$ ：根据应用程序对库的调用信息，定义的应用程序与库的交互矩阵 $Y∈R^{M×N}$ ，其中 $y_{al} = 1$ 表示应用程序调用了库l；否则 $y_{al}=0$。就是第i个$y_{al}$</p></li><li><p>最后得分，是针对某个库 $l$ 的，也就是说输入的那个库 $l$ 得分为 $S_{LDA}(l)$ </p></li></ul></blockquote><h3 id="D-MKR模型"><a href="#D-MKR模型" class="headerlink" title="D.MKR模型"></a>D.MKR模型</h3><p>该模块基于深层的端到端框架MKR [16]，其结构如图3的右侧所示。</p><p>在将应用程序 $a$ 和库 $l$ 转换为==原始特征向量==后，将其作为输入。 我们使用L层MLP（多层感知器）提取应用的潜在浓缩特征 $a_L$ ：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205100955402.png" alt="公式10-提取特征aL"></p><p>L个交叉压缩单元与KGE模块一起处理库，以提取其特征 $l_L $，如第三部分所示：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205101101262.png" alt="公式11-提取特征l_L"></p><p>其中S（l）是库l的关联实体的集合。</p><p>在获得应用程序的潜在特征 $a_L$ 和库的潜在特征 $l_L$ 后，我们通过函数 $f_{RS}$（例如一个内积或MLP多层感知器）将它们组合在一起。库和应用的最终分数为：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205101448504.png" alt="公式12-最终分数SMKR"></p><p>其中σ（。）是非线性激活函数。</p><p>在这项工作中，我们分别利用应用程序和库的知识图嵌入定制MKR以获得==U-MKR和I-MKR==。</p><p>==以上是I-MKR的结构==。</p><p>对于==U-MKR==，我们交换处理应用程序和库的过程：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205101622586.png" alt="公式13-UMKR的公式"></p><p>其中S（a）是应用程序a的关联实体的集合。最终分数的公式与I-MKR相同。</p><h3 id="E-聚合器单元"><a href="#E-聚合器单元" class="headerlink" title="E.聚合器单元"></a>E.聚合器单元</h3><p>聚合器单元通过结合SLDA和SMKR来获得推荐分数。对于每个库，推荐分数S定义为：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205101731373.png" alt="公式14-聚合器单元最终得分"></p><p>其中0≤α≤1。最后，我们选择得分最高的前N个库作为对开发人员的建议。</p><h2 id="5-实验及结果"><a href="#5-实验及结果" class="headerlink" title="5.实验及结果"></a>5.实验及结果</h2><p>在本节中，我们将对从AppBrain10爬取的真实数据集进行一系列实验，以将我们提出的方法与几种最新方法进行比较。所有实验程序都是用Python开发的，是在运行Windows 10操作系统，配备Intel Core 4 CPU i7-4710HQ，@ 2.5 GHz和8GB RAM的PC上进行的。</p><h3 id="A-数据集"><a href="#A-数据集" class="headerlink" title="A.数据集"></a>A.数据集</h3><p>AppBrain是领先的移动广告网络，可提供针对Android市场的独特的按安装付费的应用程序推广服务。 AppBrain的目的是为开发人员提供一种快速简便的方法来扩展其应用程序的范围以及发展和发展其业务。它包含有关应用程序和相应的第三方库的大量信息。为了评估所提出的TM-MKR方法的性能，我们从AppBrain抓取了一个数据集。因为我们只对调用至少一个库的应用程序感兴趣，所以为了方便工作而弃用了某些应用程序。</p><p>==过滤后的数据集由5,274个应用程序和471个库组成，其中每个应用程序都具有名称，包装，价格，大小，版本，描述等属性，每个库都通过其名称，描述，类型，标签等来表征==。</p><p>表1显示了数据集中的一个应用程序和一个库，其中“伦敦实时公交时间-TfL Buses”是一个交通应用程序，它调用了“ Admob”和“ Twitter Kit”之类的库。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205103017009.png" alt="表1.数据集中的应用程序和库的示例。"></p><p>经典推荐任务中最重要的部分是用户和项目之间的交互信息。同样，在我们的工作中，我们还需要==应用程序和库之间的交互信息，即数据集中包含的应用程序和库之间的调用关系==。表2总结了数据集的统计信息。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205102953553.png" alt="表2.数据集的统计信息"></p><p>为了评估推荐效果，我们基于抓取的数据集为每个实验构建了训练集和测试集。我们将数据集随机分为训练集和测试集，以便==训练集包含70％的数据，而测试集包含30％==。</p><h3 id="B-知识图谱"><a href="#B-知识图谱" class="headerlink" title="B.知识图谱"></a>B.知识图谱</h3><p>对于知识图的构建，我们利用应用程序和库的爬取的结构化信息。</p><p>首先，我们区分数据集中的知识实体。基于这些实体，我们提取所有由主题，谓词及其宾语组成的三元组。主语和宾语是谓词定义的关系中涉及的实体。提取三元组之后，这些数据将存储在图形数据库Neo4j11中，以备后用。</p><p>最后，我们有一个9,820个实体和85,306个关系的知识图。表3汇总了知识图的详细统计信息。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205102924183.png" alt="表3.知识图的统计量"></p><p>Neo4j中存储的库“ Twitter Kit”的三元组结构（我们仅选择了所有三元组中的十个）如图4所示。</p><p>前面提到的三元组（Twitter Kit，TAGGED_WITH，在线服务）现在表示为两个节点。通过定向边缘连接。绿色节点“ Twitter套件”是实体“库”，蓝色节点“在线服务”是实体“标签”，边缘是关系“ TAGGED_WITH”。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205103131939.png" alt="图4.存储在Neo4j中的知识图的示例结构"></p><h3 id="C-评估指标"><a href="#C-评估指标" class="headerlink" title="C.评估指标"></a>C.评估指标</h3><p>在我们的实验中，我们采用了广泛使用的前N个推荐测量值，包括Precision，Recall，F1值，MAP和NDCG，以评估我们的方法以及基线。</p><ul><li>Precision @ N：这是与用户相关的建议项目中的一部分。我们计算所有用户的平均值作为最终精度。</li><li>Recall @ N：成功推荐与用户相关的项目的比例。我们计算所有用户的平均值作为最终召回率。</li><li>F1 @ N：它是N级精度和N级召回率的谐波均值</li><li>MAP @ N：通过考虑前N个项目列表所有位置的精度性能来计算平均平均精度（MAP）</li><li>NDCG @ N：归一化折现累积收益（NDCG）是排名质量的标准度量，考虑到排名列表中前N个正项和负项之间的分级相关性。</li></ul><p>前三种方法旨在评估推荐质量而不考虑排名位置，而后两种方法不仅评估准确性，还评估最终列表中正确项目的排名位置。</p><h3 id="D-BaseLine"><a href="#D-BaseLine" class="headerlink" title="D.BaseLine"></a>D.BaseLine</h3><p>我们将我们提出的方法与几种最新的推荐算法进行了比较。考虑到我们的方法结合了主题建模，协作过滤和知识图，我们选择的算法涵盖了基于内容的方法，基于CF的方法和基于KG的方法。</p><p>另外，对于第三方库推荐的情况，我们选择了AppLibRec [4]，[5]，它是最新的并且与我们的研究相对较近。</p><ul><li>LDA [8]：LDA是一种流行的主题建模技术，它以概率分布的形式给出文档集中每个文档的主题。在本文中，对应用程序和库的描述被视为LDA模型的输入。</li><li>CF：我们使用基于用户的协作过滤方法，该方法基于从交互矩阵计算出的相似度向应用程序推荐库。 </li><li>NCF [33]：通过将矩阵分解和MLP相结合来开发神经协作过滤（NCF）模型，以了解用户和项目对前N个推荐的偏好。</li><li>U-MKR：MKR [9]是一个深层的端到端框架，它利用知识图嵌入任务来辅助推荐任务。在本文中，U-MKR是基于用户的版本，它利用了应用程序的知识图嵌入</li><li>I-MKR：类似于U-MKR，I-MKR是MKR的基于项目的版本，我们使用库的知识图嵌入。</li><li>RippleNet [12]：RippleNet是一种类似于内存网络的方法，可以在知识图上传播用户的偏好</li><li>AppLibRec [4]，[5]：据我们所知，AppLibRec是针对移动应用程序的最新第三方库推荐方法。根据原始论文，参数α和β分别设置为0.3和0.7。</li></ul><h3 id="E-实验与评估"><a href="#E-实验与评估" class="headerlink" title="E.实验与评估"></a>E.实验与评估</h3><p>我们有兴趣回答以下研究问题，作为对我们研究的评估和讨论：</p><h4 id="1）RQ1：建议的TM-MKR是否优于最新的推荐方法？"><a href="#1）RQ1：建议的TM-MKR是否优于最新的推荐方法？" class="headerlink" title="1）RQ1：建议的TM-MKR是否优于最新的推荐方法？"></a>1）RQ1：建议的TM-MKR是否优于最新的推荐方法？</h4><p>图5展示了在五个评估指标上不同方法的性能。如我们所见，我们提出的TM-MKR方法在所有排名位置的所有竞争方法中表现最佳。</p><p>具体而言，与基于CF的方法（CF和NCF）相比，在Precision @ 5，Recall @ 5，F1 @ 5，MAP上，TM-MKR最多可增加26.9％，23.9％，25.4％，15.0％和17.6％。</p><p>与基于KGP的方法RippleNet相比，TM-MKR在Precision @ 5，Recall @ 5，F1 @ 5，MAP上分别超出了16.4％，11.7％，14.1％，16.1％和13.6％。 @ 5和NDCG @ 5。</p><p>与最新的第三方库推荐方法AppLibRec相比，TMCKR在Precision @ 5，Recall @ 5，F1 @ 5，MAP @ 5和NDCG @ 5上分别增长了25.2％，22.3％，23.7％，16.0％和16.4％，分别验证了我们结合知识图的假设。</p><p>对于选择不同的N值，所有方法的结果趋势基本相同，并且TM-MKR表现最佳。这些比较的结果证明了我们提出的TM-MKR方法的巨大有效性。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205103904921.png" alt="图5.数据集上前N个推荐的比较"></p><p>AppLibRec的性能比LDA和CF更好，这意味着同时使用主题和交互式信息比仅使用单个信息更有效。在四种非混合推荐方法（LDA，CF，NCF和RippleNet）中，RippleNet在几乎所有评估指标上表现最好，其次是NCF，最后是LDA和CF。</p><p>结果表明使用第三方库推荐任务中的知识图是非常有效的。此外，对于混合方法AppLibRec，即使它同时利用了文本描述和交互式信息，RippleNet仍然可以实现更好的性能，这进一步验证了我们结合知识图的假设。</p><h4 id="2）RQ2：对于提出的TM-MKR是否必须需要两个组件？"><a href="#2）RQ2：对于提出的TM-MKR是否必须需要两个组件？" class="headerlink" title="2）RQ2：对于提出的TM-MKR是否必须需要两个组件？"></a>2）RQ2：对于提出的TM-MKR是否必须需要两个组件？</h4><p>如前所述，建议的TM-MKR由两个组件组成：LDA模块和MKR模块。</p><p>为了证明这==两个组件的必要性==，我们分别在两个模块上进行了实验。</p><p>结果如图5所示。TM-MKR的性能优于LDA模块（即LDA）和MKR模块（即U-MKR和I-MKR）。</p><p>具体来说，在Precision @ 5，Recall @ 5，F1 @ 5，MAP @ 5和NDCG @ 5上，<br>TM-MKR的性能分别比LDA模块高26.9％，23.9％，25.4％，17.1％和17.7％。<br>与U-MKR和I-MKR相比，Precision @ 5，Recall @ 5，F1 @ 5，MAP @ 5和NDCG @ 5的方法分别提高了6.8％，7.1％，6.8％，7.2％和6.7％。</p><p>结果表明，MKR模块对推荐结果具有更好的提升效果，并且将LDA模块和MKR模块组合在一起是有效的，因为它在所有指标上都有改进。</p><p>我们拥有应用程序和库的文本信息，它们都可以用作训练LDA模型的语料库。</p><p>为了研究不同语料库对LDA模型的影响，我们选择了每个模型来训练LDA模型并观察其对LDA模块性能的影响。</p><p>根据表4所示的比较结果，我们发现==使用应用程序的描述作为语料，LDA模块比使用库的描述要好得多==。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205104456867.png" alt="表4. LDA的不同语料库的比较"></p><p>这个结果可以解释。在正常推荐情况下，我们通常可以推荐与其历史交互项相似的项。<br>库建议中不太可能发生这种情况。因为我们不太可能在我们的应用程序中已经使用过的库中使用类似的库。<br>更常见的情况是对于功能相似的应用程序，所使用的库也相对较近。<br>因此，对于新应用程序，推荐其邻居应用程序使用的库比推荐与其已使用的库相似的库更为合理。<br>这就是为什么我们选择应用程序的描述作为语料库来训练LDA模型来查找应用程序的邻居而不是库的邻居。</p><p>为了研究使用库和应用程序的知识图嵌入对TM-MKR性能的影响，我们进一步试验了==LDA与U-MKR和I-MKR的融合结果==，我们将它们分别表示为TM-UMKR和TM-IMKR。<br>从表5可以看出，融合结果基本接近，U-MKR略胜一筹，因此也用于TM-MKR。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205104737240.png" alt="表5. LDA与U-MKR和I-MKR的融合结果"></p><h4 id="3）RQ3：我们的模型对参数的敏感性如何？"><a href="#3）RQ3：我们的模型对参数的敏感性如何？" class="headerlink" title="3）RQ3：我们的模型对参数的敏感性如何？"></a>3）RQ3：我们的模型对参数的敏感性如何？</h4><p>为了回答这个问题，我们主要进行了==LDA模型的主题数==和==聚合器单元的融合率α==的实验。</p><p>图6显示了TM-MKR在不同主题编号上的性能。<br>结果表明，主题数量对TM-MKR的性能影响很小，因此我们的方法对于合理的范围内的不同主题数量是稳定的。<br>我们还可以发现，随着N的增加，精度和F1值逐渐降低，而查全率，MAP和NDCG则逐渐增加。这是因为在前N个推荐的情况下，用户的相关历史交互项的数量是有限的。<br>因此，最好为==建议选择较小的N值==。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205105016853.png" alt="图6. TM-MKR在不同主题编号上的性能"></p><p>为了选择主题数T，我们使用称为==主题一致性[34]的定量评估指标==进行评估。<br>我们使用的相干性度量是CV，它是根据滑动窗口，单词的一组分割以及使用归一化点向互信息（NPMI）和余弦相似度的间接确认度量计算得出的。<br>从图7可以看出，最佳主题当主题数设置为200时，可以获得连贯性。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205105216438.png" alt="图7.具有不同主题编号的LDA模型的主题一致性"></p><p>为了找到最佳融合比率，我们进行以下设置，将α的值从0更改为1，步长为0.1。</p><p>图8示出了实验结果。根据结果，聚合器单元中的α设置为0.5，这使得融合效果最佳。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201205105802619.png" alt="图8.所提出方法的不同α的Top-5结果"></p><h3 id="F-讨论与局限性分析"><a href="#F-讨论与局限性分析" class="headerlink" title="F.讨论与局限性分析"></a>F.讨论与局限性分析</h3><p>综上所述，在实验中，我们采用了五个评估指标来评估我们提出的TM-MKR方法的推荐性能。</p><p>在第一组实验中，我们表明TM-MKR在所有排名位置上均优于六种最新推荐算法。我们进一步分析了LDA模块和MKR模块的性能，发现MKR模块可以更好地提升结果。</p><p>我们还研究了语料库和主题编号对LDA模块中结果的影响，发现使用应用程序的文本描述效果更好，并且我们的方法对于不同主题编号也很稳定。</p><p>最后，我们找到了聚合器单元的最佳融合系数α。</p><p>尽管我们的方法效果不错，但有一个局限性，就是它没有考虑库的版本信息。</p><p>在某些情况下，库版本之间的差异很大。开发人员仅知道第三方库的名称是不够的。</p><p>为此，我们仍然需要进一步研究，希望能够在向开发人员提出建议时提供有关第三方库的详细信息，包括版本信息。</p><h2 id="6-总结展望"><a href="#6-总结展望" class="headerlink" title="6.总结展望"></a>6.总结展望</h2><p>在本文中，我们构建了一个包含移动应用程序的基本信息及其第三方库调用信息的真实数据集。</p><p>在此基础上，我们构建了一个包含应用程序和库的结构化语义信息的大规模领域知识图,并结合主题建模技术和基于知识图的方法提出了一种混合方法TM-MKR，为开发人员推荐库。</p><p>通过利用知识图嵌入技术，我们可以捕获项目本身的丰富辅助信息。</p><p>结合主题建模技术，我们还充分利用了非结构化的文本描述。</p><p>进行了广泛的实验以证明我们方法的有效性。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph  LR;</span><br><span class="line">爬取数据集--&gt;文本描述--&gt;LDA主题模型--&gt;余弦相似度匹配--&gt;计算得分S_LDA--&gt;聚合单元</span><br><span class="line">爬取数据集--&gt;结构化描述--&gt;构建知识图谱--&gt;MKR--&gt;计算得分S_MKR--&gt;聚合单元--&gt;最终得分Sl</span><br></pre></td></tr></tbody></table></figure><p>将来，我们计划研究其他技术，例如深度学习以提取文本描述的语义信息。我们还将尝试一些新的基于KG的方法和融合方法，以获得更好的推荐结果。</p><h2 id="改进想法"><a href="#改进想法" class="headerlink" title="改进想法"></a>改进想法</h2><blockquote><p>（协同过滤混合？）</p></blockquote><p>左侧：文本描述中是否语义稀疏？解决文本描述中的语义稀疏问题</p><p>LDA改进，可以添加时序信息（库版本）；或者可以使用Tag标签来进行进一步的优化（是否和右面的KG重复？）LLDA</p><p>右侧：MLP特征提取改进；</p><p>加模块，第三个分数；</p><p>聚合器模块？协同过滤？</p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
            <tag> Knowledge Graph </tag>
            
            <tag> 论文翻译 </tag>
            
            <tag> Recommendation </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单理解IOC与AOP</title>
      <link href="2021/02/17/%E7%90%86%E8%A7%A3IOC%E4%B8%8EAOP/"/>
      <url>2021/02/17/%E7%90%86%E8%A7%A3IOC%E4%B8%8EAOP/</url>
      
        <content type="html"><![CDATA[<h3 id="解释一下IOC和AOP"><a href="#解释一下IOC和AOP" class="headerlink" title="解释一下IOC和AOP"></a>解释一下IOC和AOP</h3><h5 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h5><p>IOC，控制反转，一种思想。不只是Spring中有。</p><p>Spring中用IOC容器来实现了控制反转。</p><p>将手动新建对象交给了Spring来维护。</p><p>啥叫反转呢，就是本来如果你要新建一个高层的对象，他会依赖底层的。比如Car–&gt;Framework-&gt;Bottom-&gt;Wheel-&gt;size，如果修改size，那么从高到低每一层都需要传入一个size，麻烦的很。但是IOC的话，直接用对象来</p><p>Spring时代用XML文件来配置Bean，SpringBoot时代用注解配置。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/v2-ee924f8693cff51785ad6637ac5b21c1_r.jpg" alt="img"></p><hr><p>推荐阅读：<a href="https://www.zhihu.com/question/23277575/answer/169698662">https://www.zhihu.com/question/23277575/answer/169698662</a></p><p>例子:1.未改善<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/v2-8ec294de7d0f9013788e3fb5c76069ef_r.jpg" alt="img"></p><p>2.需要动态修改size</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/v2-82e0c12a1b26f7979ed9241e169affda_r.jpg" alt="img"><br>这样，每一层都需要传入要给size来对其进行初始化，因为上层会调用底层的构造函数，而这时候需要参数来传入。</p><p>3.依赖注入的方法来实现控制反转</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/v2-99ad2cd809fcb86dd791ff7f65fb1779_r.jpg" alt="img"></p><p>这时候，通过将依赖的对象注入，也就是在当前类的构造函数中<strong>传入此类依赖的底层类</strong>，这样的话就不用再每次都传入底层类的具体参数。修改的话只需要修改底层类就行，而中间类不需要修改。</p><p>4.IOC容器</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/v2-c845802f9187953ed576e0555f76da42_r.jpg" alt="img"></p><p>右面这个New对象的过程，就是IOC容器，被框架所接管了而不用我们手动去修改。</p><p>5.DI的三种方式</p><ul><li>构造函数传递（上面的例子）</li><li>Setter传递</li><li>接口传递</li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/v2-861683acac47577c81f2b7493dd05649_r.jpg" alt="img"></p><hr><h5 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h5>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux环境搭建</title>
      <link href="2021/02/14/Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>2021/02/14/Linux%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<p>Linux环境搭建：</p><ol><li>java1.8——<a href="https://www.cnblogs.com/xuliangxing/p/7066913.html">https://www.cnblogs.com/xuliangxing/p/7066913.html</a></li><li>redis——<a href="https://www.cnblogs.com/zdd-java/p/10288734.html">https://www.cnblogs.com/zdd-java/p/10288734.html</a></li><li>nacos——<a href="https://nacos.io/zh-cn/docs/quick-start.html">https://nacos.io/zh-cn/docs/quick-start.html</a></li><li>nginx——<a href="https://blog.51cto.com/favccxx/1620159">https://blog.51cto.com/favccxx/1620159</a></li><li>开放端口——<a href="https://blog.csdn.net/Bonie_juzi/article/details/83058604">https://blog.csdn.net/Bonie_juzi/article/details/83058604</a><br>redhat官方文档关于防火墙firewalld：<a href="https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/security_guide/sec-using_firewalls">https://access.redhat.com/documentation/zh-cn/red_hat_enterprise_linux/7/html/security_guide/sec-using_firewalls</a></li></ol><hr><h2 id="java1-8安装"><a href="#java1-8安装" class="headerlink" title="java1.8安装"></a>java1.8安装</h2><p>1.华为镜像下载jdk1.8，jdk-8u151-linux-x64.tar.gz：<a href="https://repo.huaweicloud.com/java/jdk/8u151-b12/">https://repo.huaweicloud.com/java/jdk/8u151-b12/</a></p><p>2.Linux下新建用户javaapp，并切换到此用户：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd javaapp</span><br><span class="line">su javaapp</span><br></pre></td></tr></tbody></table></figure><p>3.新建文件夹，路径在/home/javaapp下</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210309212430195.png" alt="image-20210309212430195"></p><ul><li>app用来放jdk文件，logs为其日志；</li><li>soft用来安装软件，jdk1.8，nacos，redis等等</li></ul><ol start="4"><li>改变目录的拥有者为javaapp :</li></ol><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R javaapp:javaapp app </span><br></pre></td></tr></tbody></table></figure><p>5.上传安装包到soft下，然后解压</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-8u251-linux-x64.tar.gz</span><br></pre></td></tr></tbody></table></figure><p>6.编辑配置文件</p><p>修改配置文件 vi /etc/profile<br>放在配置文件的最下方</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">JAVA_HOME</span>=<span class="string">/home/javaapp/soft/jdk1.8.0_251 </span></span><br><span class="line"><span class="attr">JAVA_BIN</span>=<span class="string">$JAVA_HOME/bin</span></span><br><span class="line"><span class="attr">JAVA_LIB</span>=<span class="string">$JAVA_HOME/lib</span></span><br><span class="line"><span class="attr">CLASSPATH</span>=<span class="string">.:$JAVA_LIB/tools.jar:$JAVA_LIB/dt.rar</span></span><br><span class="line"><span class="attr">export</span> <span class="string">PATH=$JAVA_BIN:$PATH:JAVA_HOME:JAVA_LIB:CLASSPATH</span></span><br></pre></td></tr></tbody></table></figure><p>配置文件生效</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></tbody></table></figure><p>7.测试，java -version,成功!</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210309212937183.png" alt="image-20210309212937183"></p><hr><p>vi保存命令：</p><p>wq，保存退出</p><p>w，保存不退出</p><p>q，不保存退出</p><p>q!，不保存强制退出</p><p>i,插入模式</p><hr><h2 id="redis安装"><a href="#redis安装" class="headerlink" title="redis安装"></a>redis安装</h2><p>下载redis：<a href="https://redis.io/download">https://redis.io/download</a></p><p>官网写了安装方法了：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ wget https://download.redis.io/releases/redis-6.2.1.tar.gz</span><br><span class="line">$ tar xzf redis-6.2.1.tar.gz</span><br><span class="line">$ <span class="built_in">cd</span> redis-6.2.1</span><br><span class="line">$ make</span><br></pre></td></tr></tbody></table></figure><p>解压文件，切换路径，编译</p><p>遇到错误两个：</p><ol><li><p>cc command not found<br>这个是因为gcc没有安装，yum install gcc就行</p></li><li><p>jemalloc/jemalloc.h: No such file or directory<br>这是因为之前编译错误，有残余文件。<br>正确解决办法(针对2.2以上的版本)：清理上次编译残留文件，重新编译</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make distclean  &amp;&amp; make</span><br></pre></td></tr></tbody></table></figure></li></ol><p>src/redis-server运行redis就行了</p><hr><h2 id="开放端口"><a href="#开放端口" class="headerlink" title="开放端口"></a>开放端口</h2><p>Centos7之后系统默认是firewalld，用firewalld代替了iptables；</p><p>安装 firewalld和firewalld-config：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install firewalld</span><br><span class="line">yum install firewall-config</span><br></pre></td></tr></tbody></table></figure><p>启动firewalld防火墙</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start firewalld.service</span><br></pre></td></tr></tbody></table></figure><p>查看firewalld防火墙运行状态:</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --state</span><br></pre></td></tr></tbody></table></figure><p>启动关闭防火墙服务：</p><ul><li>启动一个服务：systemctl start firewalld.service</li><li>关闭一个服务：systemctl stop firewalld.service</li><li>重启一个服务：systemctl restart firewalld.service</li></ul><p>firewall-cmd常用命令：</p><ul><li>显示状态： firewall-cmd –state</li><li>查看所有打开的端口： firewall-cmd –zone=public –list-ports</li><li>更新防火墙规则（重启防火墙）： firewall-cmd –reload</li><li>查看区域信息:  firewall-cmd –get-active-zones</li></ul><p>端口：</p><ul><li>添加：firewall-cmd –zone=public –add-port=80/tcp –permanent  （–permanent永久生效，没有此参数重启后失效）</li><li>查看：firewall-cmd –zone=public –query-port=80/tcp</li><li>删除：firewall-cmd –zone=public –remove-port=80/tcp –permanent</li></ul><p>服务：</p><p>其实一个服务对应一个端口，每个服务对应/usr/lib/firewalld/services下面一个xml文件。</p><ul><li>查看当前开了哪些端口：firewall-cmd –list-services</li><li>查看还有哪些服务可以打开：firewall-cmd –get-services</li><li>把一个服务加入到分区：firewall-cmd –zone=public –add-service=mysql</li><li></li></ul><hr><h2 id="CentOS-Linux常用命令"><a href="#CentOS-Linux常用命令" class="headerlink" title="CentOS Linux常用命令"></a>CentOS Linux常用命令</h2><h3 id="前后台进程相关"><a href="#前后台进程相关" class="headerlink" title="前后台进程相关"></a>前后台进程相关</h3><ul><li>jobs：查看当前有多少在后台运行的命令<ul><li>-l：显示PID</li></ul></li><li>Ctrl+Z：可以将一个正在前台执行的命令<strong>放到后台</strong>，并且处于<strong>暂停</strong>状态，不可执行</li><li>bg：将一个在<strong>后台暂停</strong>的命令，变成<strong>继续执行 （在后台执行）</strong><br>如果后台中有多个命令，可以用bg %jobnumber将选中的命令调出，<br>%jobnumber是通过jobs命令查到的后台正在执行的命令的序号(不是pid)<br>将任务转移到后台运行：先ctrl + z；再bg，这样进程就被移到后台运行，终端还能继续接受命令。</li><li>&amp;：加在一个命令的最后，可以把这个命令<strong>放到后台</strong>执行 ,如gftp &amp;</li><li>fg：将后台中的命令<strong>调至前台继续运行</strong><br>如果后台中有多个命令，可以用 fg %jobnumber将选中的命令调出，%jobnumber是通过jobs命令查到的后台正在执行的命令的序号(不是pid)</li><li>Ctrl+C：前台中止进程</li></ul><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><ul><li><p>cat /etc/issue，查看Linux版本，此命令也适用于所有的Linux发行版。</p><ul><li>cat /etc/redhat-release：查看Linux版本，这种方法只适合Redhat系的Linux </li></ul></li><li><p>ps aux | less：显示所有运行中的进程</p><ul><li>-A：显示所有进程</li><li>a：显示终端中包括其它用户的所有进程</li><li>x：显示无控制终端的进程</li></ul><p>au(x) 输出格式 :</p><table><thead><tr><th>USER</th><th>PID</th><th>%CPU</th><th>%MEM</th><th>VSZ</th><th>RSS</th><th>TTY</th><th>STAT</th><th>START</th><th>TIME</th><th>COMMAND</th></tr></thead><tbody><tr><td>进程拥有者</td><td>PID</td><td>CPU使用率</td><td>占用内存使用率</td><td>占用虚拟内存使用率</td><td>占用内存大小</td><td>终端号码</td><td>进程状态</td><td>进程开始时间</td><td>进程持续时间</td><td>所执行的命令</td></tr></tbody></table><ul><li>STAT: 该行程的状态:<ul><li>D:  无法中断的休眠状态 (通常 IO 的进程)</li><li>R: 正在执行中</li><li>S: 静止状态</li><li>T: 暂停执行</li><li>Z: 不存在但暂时无法消除</li><li>W: 没有足够的记忆体分页可分配</li><li>&lt;: 高优先序的行程</li><li>N: 低优先序的行程</li><li>L: 有记忆体分页分配并锁在记忆体内 (实时系统或捱A I/O)</li></ul></li></ul></li><li><p>ps -ef | grep 进程关键字 ：查找相关进程<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210310103353682.png" alt="image-20210310103353682"></p></li><li><p>which 程序名：查看yum是否安装了这个软件，会显示安装在哪个目录</p><ul><li>whereis 程序名：同上，不过扩大范围</li></ul></li><li><p>yum list installed ：查看yum已安装程序</p><ul><li>yum | grep “软件名或者包名”：指定软件是否安装</li></ul></li><li></li></ul><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><ul><li><p>cat /etc/passwd：可以查看所有用户的列表</p></li><li><p>w：可以查看当前活跃的用户列表</p><ul><li>who：显示当前登录系统的用户</li><li>whoami：当前用户</li></ul><p>who显示的资料包含了使用者 ID、使用的终端机、从哪边连上来的、上线时间、呆滞时间、CPU 使用量、动作等等。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210310100124085.png" alt="image-20210310100124085"></p></li><li><p>su - clsung：变更帐号为 clsung 并改变工作目录至 clsung 的家目录（home dir）</p></li></ul><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><ul><li>find：find 命令用来在指定目录下查找文件<br>find / -name “nacos”：从/目录下开始，寻找name为“nacos”的文件。-iname则忽略大小写</li><li></li></ul><h3 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h3><h4 id="source-命令导入"><a href="#source-命令导入" class="headerlink" title="source  命令导入"></a>source  命令导入</h4><p>source 命令导入数据库需要先登录到数库终端：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">create</span> database abc;      # 创建数据库</span><br><span class="line">mysql<span class="operator">&gt;</span> use abc;                  # 使用已创建的数据库 </span><br><span class="line">mysql<span class="operator">&gt;</span> <span class="keyword">set</span> names utf8;           # 设置编码</span><br><span class="line">mysql<span class="operator">&gt;</span> source <span class="operator">/</span>home<span class="operator">/</span>abc<span class="operator">/</span>abc.sql  # 导入备份数据库</span><br></pre></td></tr></tbody></table></figure><h2 id="Ubuntu常用命令"><a href="#Ubuntu常用命令" class="headerlink" title="Ubuntu常用命令"></a>Ubuntu常用命令</h2><p>i386就是32位，amd64就是64位</p><h3 id="系统"><a href="#系统" class="headerlink" title="系统"></a>系统</h3><ul><li>cat /proc/version：查看系统版本</li><li>uname -a：查看系统具体信息</li><li></li></ul><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><ul><li><p>apt-get install “Name”：安装软件</p><ul><li>列出所有已安装的包：apt list –installed</li><li>卸载安装的包，移除软件包及配置文件，清理不再使用的依赖和库文件：apt-get autoremove –purge</li><li></li></ul></li><li><p>dpkg -s “packageName”：查询某个包是否安装</p></li><li><p>dpkg –list | grep mysql：查看mysql有哪些依赖包</p></li><li><p>清除软件残留数据：dpkg -l|grep ^rc|awk ‘{print$2}’|sudo xargs dpkg -P</p></li></ul><h3 id="文件-1"><a href="#文件-1" class="headerlink" title="文件"></a>文件</h3><ul><li>chown filename user：更改文件/文件夹的权限，给user</li></ul><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p>这里Ubuntu的是iptables，同时还有一个类似于客户端的ufw</p><h4 id="iptables"><a href="#iptables" class="headerlink" title="iptables"></a>iptables</h4><ul><li>使防火墙生效：iptables-restore &lt; /etc/iptables/rules.v4</li><li>列出当前配置：iptables -L -n</li></ul><h4 id="ufw"><a href="#ufw" class="headerlink" title="ufw"></a>ufw</h4><ul><li>通过ufw查看防火墙状态：ufw -status</li></ul><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><ul><li><p>lsof -i:8888，查看8888端口号占用情况</p><blockquote><p>sof -i:8080：查看8080端口占用<br>lsof abc.txt：显示开启文件abc.txt的进程<br>lsof -c abc：显示abc进程现在打开的文件<br>lsof -c -p 1234：列出进程号为1234的进程所打开的文件<br>lsof -g gid：显示归属gid的进程情况<br>lsof +d /usr/local/：显示目录下被进程开启的文件<br>lsof +D /usr/local/：同上，但是会搜索目录下的目录，时间较长<br>lsof -d 4：显示使用fd为4的进程<br>lsof -i -U：显示所有打开的端口和UNIX domain文件</p></blockquote></li></ul><ul><li><p>netstat -tunlp | grep 8000，显示占用8000端口的tcp/udp并处于listen状态的程序</p><blockquote><p>netstat -tunlp | grep 端口号</p><ul><li>-t (tcp) 仅显示tcp相关选项</li><li>-u (udp)仅显示udp相关选项</li><li>-n 拒绝显示别名，能显示数字的全部转化为数字</li><li>-l 仅列出在Listen(监听)的服务状态</li><li>-p 显示建立相关链接的程序名</li></ul></blockquote></li></ul><h3 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h3><p>jar包运行</p><p>方法一：java -jar jar包名   (这样ssh窗口被锁定，直接关闭窗口，ctrl+c打断程序运行)</p><p>方法二：java -jar jar包名  &amp;   (&amp;表示在后台运行，ssh窗口不被锁定，但窗口关闭程序终止运行)</p><p>方法三： nohup java -jar jar包名 &amp;  （关闭窗口，用户退出登录程序仍然运行，但执行nohup命令时，缺省情况下输出作业被重定向到nohup.out文件中，除非指定文件位置）</p><p>方法四: nohup java -jar jar包名 &amp; &gt;a.txt</p><h4 id="解释下-gt-temp-txt"><a href="#解释下-gt-temp-txt" class="headerlink" title="解释下 >temp.txt"></a>解释下 &gt;temp.txt</h4><p><code>command &gt;out.fil</code></p><p>command &gt;out.file是将command的输出重定向到out.file文件，即输出内容不打印到屏幕上，而是输出到out.file文件中。</p><p>可通过jobs命令查看后台运行任务</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">jobs</span></span><br></pre></td></tr></tbody></table></figure><p>那么就会列出所有后台执行的作业，并且每个作业前面都有个编号。<br>如果想将某个作业调回前台控制，只需要 fg + 编号即可：<code>fg 23</code></p><ul><li>nohup java -jar 包名 &amp;：无界面后台启动不停止的java包，输出会默认到nohup.out<ul><li>nohup java -jar 包名 &amp;&gt;XXX.txt：修改输出到XXX.txt文件</li></ul></li></ul><h2 id="Ubuntu20安装mysql"><a href="#Ubuntu20安装mysql" class="headerlink" title="Ubuntu20安装mysql"></a>Ubuntu20安装mysql</h2><p>apt-get默认安装的是8.0</p><p>卸载</p><p>dpkg –list | grep mysql</p><p>将列出的mysql相关都删掉，apt-get autoremove</p><p>以及apt-get autoremove –purge</p><p>清除残留数据：<code>dpkg -l|grep ^rc|awk '{print$2}'|sudo xargs dpkg -P</code></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt purge mysql-server mysql-server-5.7</span><br></pre></td></tr></tbody></table></figure><hr><p>防火墙：</p><p>华为云</p><p>ufw</p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue简单了解及前后端分离</title>
      <link href="2021/01/16/Vue%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3/"/>
      <url>2021/01/16/Vue%E7%AE%80%E5%8D%95%E4%BA%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="1-安装Node，修改npm镜像源"><a href="#1-安装Node，修改npm镜像源" class="headerlink" title="1. 安装Node，修改npm镜像源"></a><strong>1. 安装Node，修改npm镜像源</strong></h1><h1 id="2-安装依赖"><a href="#2-安装依赖" class="headerlink" title="2. 安装依赖"></a><strong>2. 安装依赖</strong></h1><h2 id="1-全局安装vue依赖的webpack-安装-webpack-cli-依赖"><a href="#1-全局安装vue依赖的webpack-安装-webpack-cli-依赖" class="headerlink" title="(1) 全局安装vue依赖的webpack,安装 webpack-cli 依赖:"></a><strong>(1) 全局安装vue依赖的webpack,安装 webpack-cli 依赖:</strong></h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli -g</span><br></pre></td></tr></tbody></table></figure><h2 id="2-全局安装vue-cli"><a href="#2-全局安装vue-cli" class="headerlink" title="(2) 全局安装vue-cli"></a><strong>(2) 全局安装vue-cli</strong></h2><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --global vue-cli</span><br></pre></td></tr></tbody></table></figure><p>输入 <strong>webpack -v</strong> 和 <strong>vue -V</strong>，显示版本号则说明安装成功。</p><p>在 <strong>C:\Users\用户名.vue-templates\webpack</strong> 文件夹存储着vue的模板。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329160641.png" alt="img"></p><p>如图所示，里面doc就是说明文档，template里面是默认的模板。</p><p>额。。。好像这里才是对的 C:\Users\用户名\AppData\Roaming\npm\node_modules\vue-cli</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329160659.png" alt="img"></p><h2 id="3-使用vue-cli创建vue项目"><a href="#3-使用vue-cli创建vue项目" class="headerlink" title="(3) 使用vue-cli创建vue项目"></a><strong>(3) 使用vue-cli创建vue项目</strong></h2><p>先切换到你要创建项目的文件夹下，然后</p><p>vue init webpack 项目名</p><p>会在当前文件夹下创建一个“项目名”的文件夹，里面就是vue的目录结构了。</p><blockquote><p>输入命令后，会跳出几个选项让你回答：</p><p>Project name (baoge)： —–项目名称，直接回车，按照括号中默认名字（注意这里的名字不能有大写字母，如果有会报错Sorry, name can no longer contain capital letters），阮一峰老师博客为什么文件名要小写 ，可以参考一下。</p><p>Project description (A Vue.js project)： —-项目描述，也可直接点击回车，使用默认名字</p><p>Author ()： —-作者，输入你的大名</p><p>接下来会让用户选择：</p><p>Runtime + Compiler: recommended for most users 运行加编译，既然已经说了推荐，就选它了</p><p>Runtime-only: about 6KB lighter min+gzip, but templates (or any Vue-specificHTML) are ONLY allowed in .vue files - render functions are required elsewhere 仅运行时，已经有推荐了就选择第一个了</p><p>Install vue-router? (Y/n) 是否安装vue-router，这是官方的路由，大多数情况下都使用，这里就输入“y”后回车即可。</p><p>Use ESLint to lint your code? (Y/n) 是否使用ESLint管理代码，ESLint是个代码风格管理工具，是用来统一代码风格的，一般项目中都会使用。</p><p>接下来也是选择题Pick an ESLint preset (Use arrow keys) 选择一个ESLint预设，编写vue项目时的代码风格，直接y回车</p><p>Setup unit tests with Karma + Mocha? (Y/n) 是否安装单元测试，我选择安装y回车</p><p>Setup e2e tests with Nightwatch(Y/n)? 是否安装e2e测试 ，我选择安装y回车</p><p>回答完毕后上图就开始构建项目了。</p></blockquote><p>然后安装相关的依赖：</p><p><code>npm install</code></p><p>运行项目：</p><p><code>npm run dev</code></p><p>访问localhost:8080就可以看见欢迎页面了。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329161159.png" alt="img"></p><p>在配置文件 config里的index.js可以修改端口设置。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329161155.png" alt="img"></p><h1 id="3-Vue目录结构"><a href="#3-Vue目录结构" class="headerlink" title="3. Vue目录结构"></a><strong>3. Vue目录结构</strong></h1><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329161151.png" alt="img"></p><p>其中我们最常修改的部分就是 components 文件夹了，几乎所有需要手动编写的代码都在其中。</p><p>分析几个文件，index.html，/src/main.js，/src/App.vue。</p><h2 id="1-index-html"><a href="#1-index-html" class="headerlink" title="(1) index.html"></a><strong>(1) index.html</strong></h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>wj-vue1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- built files will be auto injected --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>就是一个普普通通的 html 文件，让它不平凡的是 <code>&lt;div id="app"&gt;&lt;/div&gt; </code>，下面有一行注释，构建的文件将会被自动注入，也就是说我们编写的其它的内容都将在这个 div 中展示。</p><p>还有不普通的一点是，整个项目只有这一个 html 文件，所以这是一个 单页面应用，当我们打开这个应用，表面上可以有很多页面，实际上它们都只不过在一个 div 中。</p><h2 id="2-App-vue"><a href="#2-App-vue" class="headerlink" title="(2)App.vue"></a><strong>(2)App.vue</strong></h2><p>我把这个文件称为“根组件”，因为其它的组件又都包含在这个组件中。</p><p>.vue 文件是一种自定义文件类型，在结构上类似 html，一个 .vue 文件即是一个 vue 组件。先看它的初始代码:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id="app"&gt;</span><br><span class="line">    &lt;img src="./assets/logo.png"&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default {</span><br><span class="line">  name: 'App'</span><br><span class="line">}</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line">#app {</span><br><span class="line">  font-family: 'Avenir', Helvetica, Arial, sans-serif;</span><br><span class="line">  -webkit-font-smoothing: antialiased;</span><br><span class="line">  -moz-osx-font-smoothing: grayscale;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #2c3e50;</span><br><span class="line">  margin-top: 60px;</span><br><span class="line">}</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></tbody></table></figure><p>大家可能注意到了，这里也有一句 </p><div id="app">，但跟 index.html 里的那个是没有关系的。这个 id=app 只是跟下面的 css 对应。<p></p><script>标签里的内容即该组件的脚本，也就是 js 代码，export default 是 ES6 的语法，意思是将这个组件整体导出，之后就可以使用 import 导入组件了。大括号里的内容是这个组件的相关属性。这个文件最关键的一点其实是第四行， <router-view/>，是一个容器，名字叫“路由视图”，意思是当前路由（ URL）指向的内容将显示在这个容器中。也就是说，其它的组件即使拥有自己的路由（URL，需要在 router 文件夹的 index.js 文件里定义），也只不过表面上是一个单独的页面，实际上只是在根组件 App.vue 中。## **（3) main.js**前面我们说 App.vue 里的 <div id="app"> 和 index.html 里的 <div id="app"> 没有关系，那么这两个文件是怎么建立联系的呢？让我们来看入口文件 main.js 的代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The Vue build version to load with the `import` command</span></span><br><span class="line"><span class="comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>这里插一嘴，这个 js 文件有的同学可能看着不顺眼，比如没有分号（;），因为是 ES6 的语法，不这么写反而会提示错误，虽说可以把 es-lint 改了或者关了，但我想熟悉一下新的规则也挺好。最上面 import 了几个模块，其中 vue 模块在 node_modules 中，App 即 App.vue 里定义的组件，router 即 router 文件夹里定义的路由。Vue.config.productionTip = false ,作用是阻止vue 在启动时生成生产提示。在这个 js 文件中，我们创建了一个 Vue 对象（实例）:- el 属性提供一个在页面上已存在的 DOM 元素作为 Vue 对象的挂载目标，- router 代表该对象包含 Vue Router，并使用项目中定义的路由。- components 表示该对象包含的 Vue 组件，- template 是用一个字符串模板作为 Vue 实例的标识使用，类似于定义一个 html 标签。> *自己总结理解：也就是说，主页面index.html中的div id=app是框架自动注入的内容，通过main.js使用ES6的语法export和import关联起来。这里面的东西来自于App.vue，App.vue又通过router-view标签找到router文件夹下的index.js，这个路由index.js就相当于一个url映射的类，然后里面有映射到components文件夹下的组件，里面的HelloWorld.vue就是最后显示出来的内容。*Index.html==>>main.js==>>app.vue==>>hello.vue，这个是vue的流动过程，我们在编写自己的vue时，只需要在app.vue中写好跳转便可。# **一.后端项目创建**使用IDEA创建后台的SpringBoot项目。这里遇到了点问题，使用IDEA创建springboot项目时，出现错误 `Cannot download 'https://start.spring.io': connect timed out`，连接超时。如图：![](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329161401.png)解决方法：![img](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329161409.png)修改这个创建时候的链接地址为：http://start.spring.io# **二、登录页面开发**## **1.前后端结合**注意我们的项目是前后端分离的，这里的结合意思不是就不分离了，是如何把这俩分离的项目串起来用。前面提到过前后端分离的意思是前后端之间通过 RESTful API 传递 JSON 数据进行交流。不同于 JSP 之类，后端是不涉及页面本身的内容的。> 何为RESTful：>> http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html>> REST：Representational State Transfer（表象层状态转变）>> 1. 每一个URI代表一种资源；>> 2. 客户端和服务器之间，传递这种资源的某种表现层；>> 3. 客户端通过四个HTTP动词（get、post、put、delete），对服务器端资源进行操作，实现”表现层状态转化”。在开发的时候，前端用前端的服务器（Nginx），后端用后端的服务器（Tomcat）。当我开发前端内容的时候，可以把前端的请求通过前端服务器转发给后端（称为**反向代理**），这样就能实时观察结果，并且不需要知道后端怎么实现，而只需要知道接口提供的功能，两边的开发人员（两个我）就可以各司其职啦。关于正向代理和反向代理：![](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329162938.png)## **2.前端**这里使用IDEA来编写的Vue，打开Vue文件时IDEA会自动提示你安装Vue.js功能，然后重启便可识别Vue语法。同时因为项目创建时使用了ESLint，一个代码规范工具，所以说需要设置一下IDEA以及其格式化代码的快捷键。设置ESLint，其中eslintrc.js就是那个规范文件，在vue项目的根目录下：![img](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329161443.png)设置IDEA的ESLint规范的Format快捷键：![img](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329161434.png)然后就可以使用IDEA进行Vue的开发了。IDEA在package.json上右键菜单，就有那个npm的install以及运行dev：![img](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329161637.png)### **（1）Login.vue**首先，在components文件夹下，新建个组件，Login.vue，其代码如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;loginForm.username&quot; placeholder&#x3D;&quot;用户名&quot;&#x2F;&gt;</span><br><span class="line">    &lt;br&#x2F;&gt;</span><br><span class="line">    &lt;br&#x2F;&gt;</span><br><span class="line">    &lt;input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;loginForm.password&quot; placeholder&#x3D;&quot;密码&quot;&#x2F;&gt;</span><br><span class="line">    &lt;br&#x2F;&gt;</span><br><span class="line">    &lt;br&#x2F;&gt;</span><br><span class="line">    &lt;button v-on:click&#x3D;&quot;login&quot;&gt;登录&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Login&#39;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      loginForm: &#123;</span><br><span class="line">        username: &#39;&#39;,</span><br><span class="line">        password: &#39;&#39;</span><br><span class="line">      &#125;,</span><br><span class="line">      responseResult: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    login () &#123;</span><br><span class="line">      this.$axios.post(</span><br><span class="line">        &#39;login&#39;, &#123;</span><br><span class="line">          username: this.loginForm.username,</span><br><span class="line">          password: this.loginForm.password</span><br><span class="line">        &#125;</span><br><span class="line">      ).then(successResponse &#x3D;&gt; &#123;</span><br><span class="line">        if (successResponse.data.code &#x3D;&#x3D;&#x3D; 200) &#123;</span><br><span class="line">          this.$router.replace(&#123;path: &#39;&#x2F;index&#39;&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      ).catch(failResponse &#x3D;&gt; &#123;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>**代码详解：**首先Html部分最外层是`<template></template>`标签，包括html的内容；这里包括了两个输入框和一个按钮，分别是用户名、密码、登录按钮。其中标签中的 v-model是指Vue的数据绑定：> v-model 会忽略所有表单元素的 value、checked、selected attribute 的初始值而总是将 Vue 实例的数据作为数据来源。你应该通过 JavaScript 在组件的 data 选项中声明初始值。>> v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：>> - text 和 textarea 元素使用 value 属性和 input 事件；> - checkbox 和 radio 使用 checked 属性和 change 事件；> - select 字段将 value 作为 prop 并将 change 作为事件。v-on:click绑定点击事件> 可以用 v-on 指令监听 DOM 事件，并在触发时运行一些 JavaScript 代码>> `<!-- 方法处理器 --> <button v-on:click="doThis"></button>`export default是将这块东西导出为一整块，后面别的js文件中使用import导入；=>是箭头函数，a=>{ } 等价于 function(a){ };`this.$axios.post().then().catch()`，就是发送一个post请求，然后then接受返回的值进行处理，catch捕捉异常。axios的基本用法在这里：https://blog.csdn.net/gao_xu_520/article/details/79726298### **（2）Appindex.vue**在components下新建一个home文件夹，然后新建一个Appindex.vue组件，作为登录后的主页。在这里直接用创建的模板，没改什么东西。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;!--首页--&gt;</span><br><span class="line">    HelloWorld!!!</span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;Appindex&#39;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>### **（3）添加路由**修改router下的index.js文件，添加如下Login和AppIndex两块：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    <span class="comment">// 导入的Login组件，应该是写一下路由路径</span></span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;AppIndex&#x27;</span>,</span><br><span class="line">      component: Appindex</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>关于路由：> 首先要定义route,  一条路由的实现。它是一个对象，由两个部分组成： path和component.  path 指路径，component 指的是组件。如：{path:’/home’, component: home}这就是个简单的路由的应用，使用path跳转到相应的组件。### **（4）修改一下main.js**项目根目录下的main.js：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The Vue build version to load with the `import` command</span></span><br><span class="line"><span class="comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里需要先安装axios：npm install --save axios</span></span><br><span class="line"><span class="comment">// 设置反向代理，前端请求默认发送到http://localhost:8443/api</span></span><br><span class="line"><span class="keyword">var</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;http://localhost:8443/api&#x27;</span></span><br><span class="line"><span class="comment">// 全局注册，之后可以在其他组件中通过this.axios发送数据</span></span><br><span class="line">Vue.prototype.$axios = axios</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123;App&#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>这里这一块用了axios，做了反向代理，把发送的请求都发到 http://localhost:8443/api 这里。这就是后端的地址。大概是定义了一个全局变量axios？然后使用了一个第三方组件。。。### **（5）config/index.js**为了让后端能够访问到前端的资源，需要配置跨域支持。在 config\index.js 中，找到 proxyTable 位置，修改为以下内容<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//配置跨域支持...啥意思？？</span></span><br><span class="line">proxyTable: &#123;</span><br><span class="line">  <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>跨域：https://blog.csdn.net/qq_38128179/article/details/84956552![img](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329162359.png)关于proxyTable：https://blog.csdn.net/aydongzhiping/article/details/81102940### **运行**执行 `npm run dev`，或双击 dev（start 也一样）脚本，查看登录页面效果。注意地址是 `localhost:8080/#/login` ，中间有这个 # 是因为 Vue 的路由使用了 Hash 模式，是单页面应用的经典用法，但连尤雨溪本人都觉得不太好看，所以可以在路由配置中选择使用 History 模式，但会引发一些问题，需要在后端作出处理，所以这里先不更改，之后我单独写一篇关于这个的文章。## **3.后端**后端目录结构：![img](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329162300.png)### UserUser是实体类，pojo，里面有username和password以及set/get方法；<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.song.wj.pojo;</span><br><span class="line"><span class="comment">//接受前台js对象的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String username;</span><br><span class="line">    String password;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> id;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;<span class="keyword">this</span>.id = id;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getUsername</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> username;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUsername</span><span class="params">(String username)</span> </span>&#123;<span class="keyword">this</span>.username = username;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> password;&#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;<span class="keyword">this</span>.password = password;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>### ResultResult是一个用来做相应的类，返回http状态码（成功200，错误400）；<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.song.wj.result;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为了构造reponse的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Result</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Result</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;<span class="keyword">this</span>.code = code;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCode</span><span class="params">()</span> </span>&#123;<span class="keyword">return</span> code;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(<span class="keyword">int</span> code)</span> </span>&#123;<span class="keyword">this</span>.code = code;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>### LoginControllerLoginController控制类，登录逻辑验证（这里省略import）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这个注解是？跨域？</span></span><br><span class="line">    <span class="meta">@CrossOrigin</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;api/login&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> User requesterUser)</span> </span>&#123;</span><br><span class="line">        String username = requesterUser.getUsername();</span><br><span class="line">        <span class="comment">//对html标签进行转义，防止XSS攻击</span></span><br><span class="line">        username = HtmlUtils.htmlEscape(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里这个Objects.equals?</span></span><br><span class="line">        <span class="keyword">if</span> (!Objects.equals(<span class="string">&quot;admin&quot;</span>, username) || !Objects.equals(<span class="string">&quot;123456&quot;</span>, requesterUser.getPassword())) &#123;</span><br><span class="line">            String message = <span class="string">&quot;账号密码错误&quot;</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;账号密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>### 相关问题#### （1）@CrossOrigin关于SpringBoot使用@CrossOrigin注解解决跨域问题： https://blog.csdn.net/w_linux/article/details/81142413#### （2）Object.equals关于Object.equals方法：https://blog.csdn.net/mr_yangxxx/article/details/79514613#### （3)XSS攻击关于对html标签进行转义，防止XSS攻击（Html恶意代码注入攻击）：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s = HtmlUtils.htmlEscape(<span class="string">&quot;&lt;div&gt;hello world&lt;/div&gt;&lt;p&gt; &lt;/p&gt;&quot;</span>);   log.info(s); </span><br></pre></td></tr></table></figure>> 输出:INFO AdminIndexAction - \&lt;div\&gt;hello world\&lt;/div\&gt;\&lt;p\&gt;&amp;nbsp;\&lt;/p\&gt;gt;<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String s2 = HtmlUtils.htmlUnescape(s);   log.info(s2);   </span><br></pre></td></tr></table></figure>> 输出: INFO AdminIndexAction - <div>hello world</div><p>&nbsp;</p>也就是说,htmlEscape会将html中的符号，替换为转义字符，从而防止XSS攻击；通过这篇文章，希望大家可以直观地感受到前后端分离项目中前后端的过程，之后的功能开发基本思路就是在后端开发 Controller，在前端开发不同的组件，这个顺序可以随意。==实际的项目应该是前后端人员根据功能需求约定好接口，然后齐头并进，以提高开发效率。==# **一.创建数据库**创建数据库，如图：![img](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329163119.png)并插入数据，这里密码暂时明文保存，不安全后面还要改：![img](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329163126.png)# **二、后端**之前简单验证密码的过程：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!Objects.equals(<span class="string">&quot;admin&quot;</span>, username) || !Objects.equals(<span class="string">&quot;123456&quot;</span>, requestUser.getPassword())) &#123;</span><br><span class="line">    String message = <span class="string">&quot;账号密码错误&quot;</span>;</span><br><span class="line">    System.out.println(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">400</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">200</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>使用数据库验证的逻辑其实也类似，大概是如下过程：第一步，获得前端发送过来的用户名和密码信息第二步，查询数据库中是否存在相同的一对用户名和密码第三步，如果存在，返回成功代码（200），如果不存在，返回失败代码（400）## **（1）修改pom.xml配置，引入相关包**<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.evan<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wj<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>wj<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span>White Jotter - Your Mind Palace<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springboot web --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springboot tomcat 支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 热部署 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- jpa--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- springboot test --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- elastic search --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 用了 elasticsearch 就要加这么一个，不然要com.sun.jna.Native 错误 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.sun.jna<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jna<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- thymeleaf legacyhtml5 模式支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sourceforge.nekohtml<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>nekohtml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.22<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 测试支持 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- tomcat的支持.--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-jasper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>8.5.23<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- mysql--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- junit --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span> 4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- commons-lang --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- shiro --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- hsqldb --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hsqldb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hsqldb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>## **（2）修改application.properties，引入数据库配置**<figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">8443</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/white_jotter?characterEncoding=UTF-8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.jpa.hibernate.ddl-auto</span>=<span class="string">none</span></span><br></pre></td></tr></table></figure>> 在jpa中ddl-auto一共有四种:>> 分别为:>> - ddl-auto：create ----每次运行该程序，没有表格会新建表格，表内有数据会清空；> - ddl-auto：create-drop ----每次程序结束的时候会清空表> - ddl-auto：update ---- 每次运行程序，没有表格会新建表格，表内有数据不会清空，只会更新> - ddl-auto： validate ---- 运行程序会校验数据与数据库的字段类型是否相同，不同会报错。> - ddl-auto:    none ---- 禁用ddl## **（3）登录控制器**### **User类：**<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.song.wj.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.annotation.JsonIgnoreProperties;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.Entity;</span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Entity</span></span><br><span class="line"><span class="meta">@Table(name = &quot;user&quot;)</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties(&#123;&quot;handler&quot;, &quot;hibernateLazyInitializer&quot;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span></span><br><span class="line">    <span class="meta">@Column(name = &quot;id&quot;)</span></span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line"></span><br><span class="line">    String username;</span><br><span class="line">    String password;</span><br><span class="line">    ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>上面新加了一些注解：- @Entity 表示这是一个实体类- @Table(name=“user”) 表示对应的表名是 user （引入的是javax.persistence里面的而不是hibernate里的）为了简化对数据库的操作，我们使用了 Java Persistence API（JPA）：Java持久层API，是JDK 5.0注解或XML描述对象－关系表的映射关系，并将运行期的实体对象持久化到数据库中。对于 `@JsonIgnoreProperties({ “handler”,“hibernateLazyInitializer” })`，解释起来比较复杂，下面的话看不懂可以忽略：> 因为是做前后端分离，而前后端数据交互用的是 json 格式。 那么 User 对象就会被转换为 json 数据。 而本项目使用 jpa 来做实体类的持久化，jpa 默认会使用 hibernate, 在 jpa 工作过程中，就会创造代理类来继承 User ，并添加 handler 和 hibernateLazyInitializer 这两个无须 json 化的属性，所以这里需要用 JsonIgnoreProperties 把这两个属性忽略掉。### **UserDAO**Data Access Object（数据访问对象，DAO）即用来操作数据库的对象，这个对象可以是我们自己开发的，也可以是框架提供的。这里我们通过继承 JpaRepository 的方式构建 DAO。首先新建一个 package，命名为 dao，然后创建 Java Class，命名为 UserDAO，选择种类为 Interface。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.song.wj.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.song.wj.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDAO</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">User <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">User <span class="title">findByUsernameAndPassword</span><span class="params">(String username, String password)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这里关键的地方在于方法的名字。由于使用了 JPA，无需手动构建 SQL 语句，而只需要按照规范提供方法的名字即可实现对数据库的增删改查。如 `findByUsername`，就是通过 username 字段查询到对应的行，并返回给 User 类。> 关于JPA的使用：https://blog.csdn.net/hbtj_1216/article/details/79773839这里我们构建了两个方法，一个是通过用户名查询，一个是通过用户名及密码查询。### **UserService**<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.song.wj.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.song.wj.dao.UserDAO;</span><br><span class="line"><span class="keyword">import</span> com.song.wj.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserDAO userDAO;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过用户名查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getByName</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDAO.findByUsername(username);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存在的话就是返回true，不存在的返回false</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isExist</span><span class="params">(String username)</span> </span>&#123;</span><br><span class="line">        User user = getByName(username);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span> != user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用户名和密码查询封装为get</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">get</span><span class="params">(String username, String password)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userDAO.findByUsernameAndPassword(username, password);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        userDAO.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>这里实际上是对 UserDAO 进行了二次封装，一般来讲，我们在 DAO 中只定义基础的增删改查操作，而具体的操作，需要由 Service 来完成。当然，由于我们做的操作原本就比较简单，所以这里看起来只是简单地重命名了一下，比如把 “通过用户名及密码查询并获得对象” 这种方法命名为 get。### **LoginController**<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/api/login&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> User requesterUser)</span> </span>&#123;</span><br><span class="line">        String username = requesterUser.getUsername();</span><br><span class="line">        username = HtmlUtils.htmlEscape(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这样只需要查一次sql（我想的是用户名查一次然后密码还要查一次）</span></span><br><span class="line">        User user = userService.get(username, requesterUser.getPassword());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == user) &#123;</span><br><span class="line">            String message = <span class="string">&quot;账号密码错误&quot;</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;账号密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">400</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>先自动注入了一个Service，然后去数据库里查是否存在这个user。> 关于 null == a 和 a == null :>> 意思是一样，都是用于判断是否为null>> 但是比较而言（设a为比较对象），null== a 更为安全，当你编写代码是很有可能把==写为=，则 a==null变为了a=null，显然这是一个恒为真的，所以会影响你的程序，而且很难查出错误的原因我们的项目会在很长一段时间内采取这种简单的三层架构（DAO + Service + Controller），希望大家能慢慢体会这三个模块的分工。这里我简单总结一下，先有个初步印象：- DAO 用于与数据库的直接交互，定义增删改查等操作- Service 负责业务逻辑，跟功能相关的代码一般写在这里，编写、调用各种方法对 DAO 取得的数据进行操作- Controller 负责数据交互，即接收前端发送的数据，通过调用 Service 获得处理后的数据并返回在实践中我们倾向于让 Controller 显得清凉一些，以方便代码的阅读者寻找分析功能的入口。但由于教程中各个层的迭代并不是同步的，可能会暂时舍弃这个原则，后期会逐渐重构。# **一、引入ElementUI**## **安装**首先在项目文件夹下，执行 npm i element-ui -S 即可## **引入**在main.js中引入引入分为完整引入和按需引入两种模式，按需引入可以缩小项目的体积，这里我们选择完整引入。修改后的main.js代码：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The Vue build version to load with the `import` command</span></span><br><span class="line"><span class="comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里需要先安装axios：npm install --save axios</span></span><br><span class="line"><span class="comment">// 设置反向代理，前端请求默认发送到http://localhost:8443/api</span></span><br><span class="line"><span class="keyword">var</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;http://localhost:8443/api&#x27;</span></span><br><span class="line"><span class="comment">// 全局注册，之后可以在其他组件中通过this.axios发送数据</span></span><br><span class="line">Vue.prototype.$axios = axios</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  router,</span><br><span class="line">  components: &#123;App&#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>增加的代码：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br></pre></td></tr></table></figure>引入ElementUI<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure>> 关于render:h=>(App) : https://www.cnblogs.com/whkl-m/p/6970859.html## **测试**修改Login.vue，将最外层的div改为el-card标签<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-card&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;text&quot; v-model&#x3D;&quot;loginForm.username&quot; placeholder&#x3D;&quot;用户名&quot;&#x2F;&gt;</span><br><span class="line">      &lt;br&#x2F;&gt;</span><br><span class="line">      &lt;br&#x2F;&gt;</span><br><span class="line">      &lt;input type&#x3D;&quot;password&quot; v-model&#x3D;&quot;loginForm.password&quot; placeholder&#x3D;&quot;密码&quot;&#x2F;&gt;</span><br><span class="line">      &lt;br&#x2F;&gt;</span><br><span class="line">      &lt;br&#x2F;&gt;</span><br><span class="line">      &lt;button v-on:click&#x3D;&quot;login&quot;&gt;登录&lt;&#x2F;button&gt;</span><br><span class="line">  &lt;&#x2F;el-card&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br></pre></td></tr></table></figure>可以看到有效果了：![img](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329163826.png)# **二、美化登录页面**## **1.删掉V图片**在App.vue里面：![img](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329164023.png)而且不知道为啥App.vue的body会有个8px的margin，所以说在这个App.vue的style里加个让他变0：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;  <span class="attribute">margin</span>: <span class="number">0px</span>; &#125;</span><br></pre></td></tr></table></figure>## **2.修改Login.vue页面**首先修改一下html代码：<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">&quot;poster&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">class</span>=<span class="string">&quot;login-container&quot;</span> <span class="attr">label-position</span>=<span class="string">&quot;left&quot;</span> <span class="attr">label-width</span>=<span class="string">&quot;0px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;login_title&quot;</span>&gt;</span>系统登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;loginForm.username&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;用户名&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;loginForm.password&quot;</span> <span class="attr">auto-complete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;密码&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;login&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; background: #1861DA;border: none;&quot;</span>&gt;</span>登录</span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure>在最外层加了个id为poster的body，然后修改原来的div变成el-form，调整一下里面的每一项。增加一个style设定背景及样式：<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">  <span class="selector-class">.login-container</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">    <span class="attribute">background-clip</span>: padding-box;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">90px</span> auto;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">350px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">35px</span> <span class="number">35px</span> <span class="number">15px</span> <span class="number">35px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eaeaea</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">25px</span> <span class="number">#cac6c6</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.login_title</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> auto <span class="number">40px</span> auto;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#505458</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#poster</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;../assets/login_bg.jpg&quot;</span>) no-repeat;</span><br><span class="line">    <span class="attribute">background-position</span>: center;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>> 这里<style scope>是表示它的样式作用于当下的模块，很好的实现了样式私有化的目的>> 相关资料：vue中慎用style的scoped属性，https://blog.csdn.net/qq_39043923/article/details/88687046自己偷偷的改了个背景，没用教程里的用了个自己的嘿嘿：![](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329164343.png)逼格挺高的。。。至此，登录页面的开发似乎已经较为完善了，但其实还没有完，因为这个登录页面其实没有用，别人直接输入首页的网址，就可以绕过登录页面。为了让它发挥作用，我们还需要开发一个拦截器。接下来的工作：一、前端路由的 hash 模式与 history 模式二、history 模式下后端错误页面的配置三、登录拦截的实现为什么要在登录页面上废这么多篇幅呢？因为把这个页面做完，就差不多理解了项目的构成，之后的开发就可以把精力集中在业务功能的实现上了。之后的基本模式，就是前端开发组件、后端开发控制器，调试功能，做起来会很快。# **一、前端路由**> 什么是前端路由：>> https://blog.csdn.net/weixin_39717076/article/details/80650506>> https://www.zhihu.com/question/53064386大家如果留心观察就会发现，之前我们做的页面的 URL 里有一个 ==# 号==，这个 # 号有什么含义呢？假设在 html 中有这么一段代码：`<div id="test">This is a test</div>`，如果我们想让页面定位到这个 div 所在的位置，可以加一个超链接` <a herf="#test">Jump to test`</a>，这里的 ==# 被称为“锚点”，点击超链接，可以发现网页的 URL 发生了变化，但页面并不会跳转==。在互联网流量如此庞大的今天，我们需要==想办法减轻后端服务器的压力==，利用 AJAX，我们可以不重载页面就刷新数据，如果再加上 # 号的特性（即改变 URL 却不请求后端），我们就可以在前端实现页想面的整体变化，而不用每次都去请求后端。为了实现前端路由，我们可以监听 # 号后面内容的变化（hashChange），从而动态改变页面内容。URL 的 # 号后面的地址被称为 hash ，估计是哪个大神拍脑袋想的，不用深究。这种实现方式我们称之为 ==Hash 模式==，是非常典型的前端路由方式。另一种常用的方式被称为==History 模式==，这种方式使用了 History API，History API 顾名思义就是针对历史记录的 API ，这种模式的原理是先把页面的状态保存到一个对象（state）里，当页面的 URL 变化时找到对应的对象，从而还原这个页面。其实原本人家这个功能是为了方便浏览器前进后退的，不得不说程序员们的脑洞真大。使用了这种模式，就可以摆脱 # 号实现前端路由。Vue 已经为我们提供了两种模式的前端路由，无需我们自己去实现。- Hash模式- History模式# **二、History模式**## 改为History模式首先我们把 Vue 中配置的路由从默认的 hash 模式切换为 histroy 模式。打开我们的前端项目 wj-vue，修改 router\index.js，加入 ==`mode: 'history`== 这句话。整体代码如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&#x27;@/components/Login&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Appindex <span class="keyword">from</span> <span class="string">&#x27;@/components/home/Appindex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里导入Login组件</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">// 修改前端路由模式为History</span></span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    <span class="comment">// 导入的Login组件，应该是写一下路由路径</span></span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;AppIndex&#x27;</span>,</span><br><span class="line">      component: Appindex</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>## **部署到后端**接下来，我们把前端打包后部署在后端。这**不是**前后端分离项目推荐的做法，之前我们讲过其实应该把前后端分别部署在不同的服务器中，但实际上仍有不少项目会选择把前后端**整合**在一起，只使用一个服务器，所以这里我们也提及一下这种方式，但在之后的开发中不会这样部署。先在项目目录执行 `npm run build`，控制台输出如下内容表明执行完毕：![img](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329164944.png)这时在项目的 dist 文件夹下生成了 static 文件夹和 index.html 文件，把这两个文件，拷贝到我们后端项目的 `wj\src\main\resources\static` 文件夹下（而不是template下,是与template同级)，一定要注意这个位置，这时后端配置的静态文件的 path，虽然看起来很诡异，但一般都不作修改。![img](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329165001.png)接下来，打开后端项目并运行，访问 http://localhost:8443/index.html ，（注意输入后缀 .html）发现页面是空白的，但确实取到了这个页面，再访问 http://localhost:8443/login ,发现跳转到了错误页面（White Error Page）。> 这时候访问index.html应该是访问的静态资源，而login并无对应的url所以说跳转到404页面。![img](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329165009.png)这里我们回顾一下==单页面应用==的概念，在我们这个项目中，其实只有 index.html 这一个页面，所有的其它内容都是在这个页面里动态渲染的。当我们直接在后端访问 /login 路径时，服务器会后端并没有这个路径对应的内容，所以返回了 Error Page。为了获取到我们需要的内容，我们要==想办法触发前端路由==，即在后端添加处理内容，把 通过这个 URL 渲染出的 index.html 返回到浏览器。在后端项目中新建一个 package 名为 error，新建实现 ErrorPageRegistrar 接口的类 ErrorConfig，把默认的错误页面设置为 /index.html，代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.song.wj.error;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.ErrorPage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.server.ErrorPageRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorConfig</span> <span class="keyword">implements</span> <span class="title">org</span>.<span class="title">springframework</span>.<span class="title">boot</span>.<span class="title">web</span>.<span class="title">server</span>.<span class="title">ErrorPageRegistrar</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerErrorPages</span><span class="params">(ErrorPageRegistry registry)</span> </span>&#123;</span><br><span class="line">        ErrorPage error404Page = <span class="keyword">new</span> ErrorPage(HttpStatus.NOT_FOUND,<span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">        registry.addErrorPages(error404Page);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>注意@Component注解，这个是组件的意思，会自动注入到Spring容器中。> 1、[@controller](https://my.oschina.net/u/1774615) 控制器（注入服务）>> 用于标注控制层，相当于struts中的action层>> 2、[@service](https://my.oschina.net/service) 服务（注入dao）>> 用于标注服务层，主要用来进行业务的逻辑处理>> 3、@repository（实现dao访问）>> 用于标注数据访问层，也可以说用于标注数据访问组件，即DAO组件.>> 4、[@component](https://my.oschina.net/u/3907912) （把普通pojo实例化到spring容器中，相当于配置文件中的>> `<bean id="" class=""/>`）泛指各种组件，就是说当我们的类不属于各种归类的时候（不属于@Controller、@Services等的时候），我们就可以使用@Component来标注这个类。重新启动项目，访问 http://localhost:8443/login ，成功进入登录页面。> 因为默认的错误页面是index.html了，然后index.html前端里面又有vue映射login的路由：> ![img](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329165156.png)> 就是之前router/index.js了，不过现在被封装到static里面了。所以说能通过login访问到登录页面。而其他的404页面会是空白的因为现在没做处理。# **三、后端拦截器**为了完善登录功能，我们需要限制未登录状态下对核心功能页面的访问。登录拦截可以由多种方式来实现，我们首先讲解后端拦截器的开发。（注意如果==没有把前后端项目整合起来，就没有办法使用这种方式==）一个简单拦截器的逻辑如下：1. 用户访问 URL，检测是否为登录页面，如果是登录页面则不拦截2. 如果用户访问的不是登录页面，检测用户是否已登录，如果未登录则跳转到登录页面## **1.LoginController**首先我们修改 LoginController 的内容。之前我们实现了通过查询数据库验证用户名是否正确，但仅此而已。为了保存登录状态，我们可以把用户信息存在 Session 对象中（当用户在应用程序的 Web 页之间跳转时，存储在 Session 对象中的变量不会丢失），这样在访问别的页面时，可以通过判断是否存在用户变量来判断用户是否登录。这是一种比较简单的方式，感兴趣的同学可以尝试别的方法。修改后的代码内容如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CrossOrigin</span></span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/api/login&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">login</span><span class="params">(<span class="meta">@RequestBody</span> User requesterUser, HttpSession session)</span> </span>&#123;</span><br><span class="line">        String username = requesterUser.getUsername();</span><br><span class="line">        <span class="comment">//对html标签进行转义，防止XSS攻击</span></span><br><span class="line">        username = HtmlUtils.htmlEscape(username);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这样只需要查一次sql（我想的是用户名查一次然后密码还要查一次）</span></span><br><span class="line">        User user = userService.get(username, requesterUser.getPassword());</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == user) &#123;</span><br><span class="line">            String message = <span class="string">&quot;账号密码错误&quot;</span>;</span><br><span class="line">            System.out.println(<span class="string">&quot;账号密码错误&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//登录成功后放到session里（这里用户名和密码都放进去了？！）</span></span><br><span class="line">            session.setAttribute(<span class="string">&quot;user&quot;</span>,user);</span><br><span class="line">            System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Result(<span class="number">200</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>其实只是添加了一条语句` session.setAttribute("user", user);` 也就是说在登录成功的时候把user放到session里面了。## **2.LoginInterceptor**新建 package 名为 interceptor，新建类 LoginInterceptor。Interceptor 即拦截器，在 Springboot 我们可以直接继承拦截器的接口（在我的SpringBoot版本里改成了**extends** HandlerInterceptorAdapter），然后实现 preHandle 方法。preHandle 方法里的代码会在访问需要拦截的页面时执行。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.song.wj.interceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.song.wj.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang.StringUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.handler.HandlerInterceptorAdapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpSession;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">begingWith</span><span class="params">(String page, String[] requiredAuthPages)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> result = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (String requiredAuthPage : requiredAuthPages) &#123;</span><br><span class="line">            <span class="comment">//判断page是否以requiredAuthPage开头</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.startsWith(page, requiredAuthPage)) &#123;</span><br><span class="line">                result = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="comment">//从session中得到要访问的地址</span></span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        <span class="comment">//从session中得到服务器地址：localhost</span></span><br><span class="line">        String contextPath = session.getServletContext().getContextPath();</span><br><span class="line">        <span class="comment">//得到整个uri----localhost/index</span></span><br><span class="line">        String uri = request.getRequestURI();</span><br><span class="line">        <span class="comment">//StringUtils是apach的包而不是spring的</span></span><br><span class="line">        <span class="comment">//这里是去除服务器地址，只剩下/index</span></span><br><span class="line">        uri = StringUtils.remove(uri, contextPath + <span class="string">&#x27;/&#x27;</span>);</span><br><span class="line">        String page = uri;</span><br><span class="line"></span><br><span class="line"><span class="comment">//要拦截的页面，登录了才能访问</span></span><br><span class="line">        String[] requireAuthPages = <span class="keyword">new</span> String[]&#123;</span><br><span class="line">                <span class="string">&quot;index&quot;</span>,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断当前访问的页面是否要拦截的页面，比如index</span></span><br><span class="line">        <span class="keyword">if</span> (begingWith(page, requireAuthPages)) &#123;</span><br><span class="line">            <span class="comment">//从session中得到user，如果为空就是没登录就跳转到login</span></span><br><span class="line">            User user = (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">null</span> == user) &#123;</span><br><span class="line">                response.sendRedirect(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>注释里写的比较清楚了，不再详细说了。看起来似乎比较长，其实就是==判断 session 中是否存在 user 属性，如果存在就放行，如果不存在就跳转到 login 页面==。这里使用了一个路径列表（requireAuthPages），可以在里面写下需要拦截的路径。当然我们也可以拦截所有路径，那样就不用写这么多了，但会有逻辑上的问题，就是你访问了 \login 页面，仍然会需要跳转，这样就会引发多次重定向问题。## **3.WebConfigurer**我们写完了拦截器，但是它却并不会生效，因为我们还没有把它配置到项目中。新建 package 名为 config，新建类 MyWebConfigurer，代码如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.song.wj.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.song.wj.interceptor.LoginInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringBootConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootConfiguration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebConfigurer</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LoginInterceptor <span class="title">getLoginIntercepter</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LoginInterceptor();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(getLoginIntercepter()).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/index.html&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>通过这个配置类，我们添加了之前写好的拦截器。这里有一句非常重要的语句，即<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">registry.addInterceptor(getLoginIntercepter()).addPathPatterns(<span class="string">&quot;/**&quot;</span>).excludePathPatterns(<span class="string">&quot;/index.html&quot;</span>);</span><br></pre></td></tr></table></figure>这条语句的作用是对所有路径应用拦截器，除了 /index.html。之前我们在拦截器 LoginInterceptor 中配置的路径，即 index，触发的时机是在拦截器生效之后。也就是说，我们访问一个 URL，会首先通过 Configurer 判断是否需要拦截，如果需要，才会触发拦截器 LoginInterceptor，根据我们自定义的规则进行再次判断。==/index 与 /index.html 是不同的==，也就是说 /index 会触发拦截器而 /index.html 不会，但根据拦截器 LoginInterceptor 中我们定义的判断条件，以 /index 开头的路径都会被转发，包括 index.html。因为我们做的是单页面应用，之前通过配置 ErrorPage，实际上访问所有路径都会重定向到 /index.html 。我们直接在浏览器地址栏输入 /index 会触发拦截器，经过拦截器重定向到 /login，然后 /login 再经过 Configurer 的判断，再次触发拦截器，由于不在需要拦截的路径中，所以被放行，页面则重新定向到了 /index.html，如果没有再 Configurer 中取消对 /index.html 的拦截，则会再次触发拦截器，再次重定向到 /login，引发如下错误（多次重定向）。![img](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329165557.png)## **4.效果检验**运行后端项目，访问 http://localhost:8443/index ，发现页面自动跳转到了 http://localhost:8443/login ，输入用户名和密码登录，跳转到 http://localhost:8443/index ， 这时可以把浏览器标签关掉，再在一个新标签页输入 http://localhost:8443/index ，发现不会被拦截。# **四、Vuex与前端登录拦截器**前面我们使用了后端拦截器，但这种拦截器只有在将前后端项目整合在一起时才能生效，而前后端分离的项目实际上不推荐这么做，接下来我们尝试用前端实现相似的功能。实现前端登录器，需要在前端判断用户的登录状态。我们可以像之前那样在组件的 data 中设置一个状态标志，但登录状态应该被视为一个全局属性，而不应该只写在某一组件中。所以我们需要引入一个新的工具——Vuex，它是专门为 Vue 开发的状态管理方案，我们可以把需要在各个组件中传递使用的变量、方法定义在这里。之前我一直没有使用它，所以在不同组件传值的问题上十分头疼，要写很多多余的代码来调用不同组件的值，所以推荐大家从一开始就去熟悉这种管理方式。## **1.引入Vuex**在我们的项目文件夹中，运行 `npm install vuex --save`，之后，在 src 目录下新建一个文件夹 store，并在该目录下新建 index.js 文件，在该文件中引入 vue 和 vuex，代码如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br></pre></td></tr></table></figure>之后，我们在 index.js 里设置我们需要的状态变量和方法。为了实现登录拦截器，我们需要一个记录用户信息的变量。为了方便日后的扩展（权限认证等），我们使用一个用户对象而不是仅仅使用一个布尔变量。同时，设置一个方法，触发这个方法时可以为我们的用户对象赋值。完整的代码如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    user: &#123;</span><br><span class="line">      username: <span class="built_in">window</span>.localStorage.getItem(<span class="string">&#x27;user&#x27;</span> || <span class="string">&#x27;[]&#x27;</span>) == <span class="literal">null</span> ? <span class="string">&#x27;&#x27;</span> : <span class="built_in">JSON</span>.parse(<span class="built_in">window</span>.localStorage.getItem(<span class="string">&#x27;user&#x27;</span> || <span class="string">&#x27;[]&#x27;</span>)).username</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    login (state, user) &#123;</span><br><span class="line">      state.user = user</span><br><span class="line">      <span class="built_in">window</span>.localStorage.setItem(<span class="string">&#x27;user&#x27;</span>, <span class="built_in">JSON</span>.stringify(user))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>mutations应该是触发器的意思；这里我们还用到了 localStorage，即本地存储，在项目打开的时候会判断本地存储中是否有 user 这个对象存在，如果存在就取出来并获得 username 的值，否则则把 username 设置为空。这样我们只要不清除缓存，登录的状态就会一直保存。## **2.修改路由设置**为了区分页面是否需要拦截，我们需要修改一下 src\router\index.js，在需要拦截的路由中加一条元数据，设置一个 requireAuth 字段如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">meta: &#123;</span><br><span class="line">        requireAuth: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure>完整代码<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">&#x27;@/components/Login&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Appindex <span class="keyword">from</span> <span class="string">&#x27;@/components/home/Appindex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 在这里导入Login组件</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">// 修改前端路由模式为History</span></span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  routes: [</span><br><span class="line">    <span class="comment">// 导入的Login组件，应该是写一下路由路径</span></span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;Login&#x27;</span>,</span><br><span class="line">      component: Login</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/index&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;AppIndex&#x27;</span>,</span><br><span class="line">      component: Appindex,</span><br><span class="line">      meta: &#123;</span><br><span class="line">        requireAuth: <span class="literal">true</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>> meta属性是啥？>> 在html里好像是叫元标签，就是html开头的那个。但是在这里的这个vue的属性好像就是和data一个样，只是在路由里面放个数据，在别的地方可以取出来的。## **3.使用钩子函数判断是否拦截**钩子函数是指在某些时机会被调用的函数。这里我们使用 router.beforeEach()，意思是在访问每一个路由前调用。打开 src\main.js ，首先添加对 store 的引用：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  router,</span><br><span class="line">  <span class="comment">// 这里加了个store</span></span><br><span class="line">  store,</span><br><span class="line">  components: &#123;App&#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>然后就是写钩子函数：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断to这个路由，也就是要去的页面，是否需要权限requireAuth</span></span><br><span class="line">  <span class="keyword">if</span> (to.meta.requireAuth) &#123;</span><br><span class="line">    <span class="comment">// 需要权限的情况</span></span><br><span class="line">    <span class="comment">// 判断store里面是否有用户名</span></span><br><span class="line">    <span class="keyword">if</span> (store.state.user.username) &#123;</span><br><span class="line">      <span class="comment">// 有用户名，也就是登录了，就可以继续执行了</span></span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 没有用户名，没登录，重定向到login</span></span><br><span class="line">      next(&#123;</span><br><span class="line">        path: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">        query: &#123;<span class="attr">redirect</span>: to.fullPath&#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不需要权限，直接继续就行</span></span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>完整的修改后的main.js<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The Vue build version to load with the `import` command</span></span><br><span class="line"><span class="comment">// (runtime-only or standalone) has been set in webpack.base.conf with an alias.</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里需要先安装axios：npm install --save axios</span></span><br><span class="line"><span class="comment">// 设置反向代理，前端请求默认发送到http://localhost:8443/api</span></span><br><span class="line"><span class="keyword">var</span> axios = <span class="built_in">require</span>(<span class="string">&#x27;axios&#x27;</span>)</span><br><span class="line">axios.defaults.baseURL = <span class="string">&#x27;http://localhost:8443/api&#x27;</span></span><br><span class="line"><span class="comment">// 全局注册，之后可以在其他组件中通过this.axios发送数据</span></span><br><span class="line">Vue.prototype.$axios = axios</span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 判断to这个路由，也就是要去的页面，是否需要权限requireAuth</span></span><br><span class="line">  <span class="keyword">if</span> (to.meta.requireAuth) &#123;</span><br><span class="line">    <span class="comment">// 需要权限的情况</span></span><br><span class="line">    <span class="comment">// 判断store里面是否有用户名</span></span><br><span class="line">    <span class="keyword">if</span> (store.state.user.username) &#123;</span><br><span class="line">      <span class="comment">// 有用户名，也就是登录了，就可以继续执行了</span></span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 没有用户名，没登录，重定向到login</span></span><br><span class="line">      next(&#123;</span><br><span class="line">        path: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">        query: &#123;<span class="attr">redirect</span>: to.fullPath&#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 不需要权限，直接继续就行</span></span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App),</span><br><span class="line">  router,</span><br><span class="line">  <span class="comment">// 加了个store</span></span><br><span class="line">  store,</span><br><span class="line">  components: &#123;App&#125;,</span><br><span class="line">  template: <span class="string">&#x27;&lt;App/&gt;&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>## **4.修改Login.vue**之前的登录组件中，我们只是判断后端返回的状态码，如果是 200，就重定向到首页。在经过前面的配置后，我们需要修改一下登录逻辑，以最终实现登录拦截。修改后的逻辑如下：1.点击登录按钮，向后端发送数据2.收到后端返回的成功代码时，触发 store 中的 login() 方法，把 loginForm 对象传递给 store 中的 user 对象（*这里只是简单的实现，在后端我们可以通过用户名和密码查询数据库，获得 user 表的完整信息，比如用户昵称、用户级别等，返回前端，并传递给 user 对象，以实现更复杂的功能）3.获取登录前页面的路径并跳转，如果该路径不存在，则跳转到首页修改后的 login() 方法如下：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  login () &#123;</span><br><span class="line">    <span class="comment">// 指针重定向？_this是指这个Login.vue的vue对象</span></span><br><span class="line">    <span class="keyword">var</span> _this = <span class="built_in">this</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.$store.state)</span><br><span class="line">    <span class="built_in">this</span>.$axios</span><br><span class="line">      .post(<span class="string">&#x27;login&#x27;</span>, &#123;</span><br><span class="line">        username: <span class="built_in">this</span>.loginForm.username,</span><br><span class="line">        password: <span class="built_in">this</span>.loginForm.password</span><br><span class="line">      &#125;)</span><br><span class="line">      .then(<span class="function"><span class="params">successResponse</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (successResponse.data.code === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="comment">// this.$router.replace(&#123;path: &#x27;/index&#x27;&#125;)</span></span><br><span class="line">          <span class="comment">// 将loginForm表单提交到store里面的mutations的login方法</span></span><br><span class="line">          <span class="comment">// 第一个参数是store中的函数名，第二个是提交过去的user</span></span><br><span class="line">          _this.$store.commit(<span class="string">&#x27;login&#x27;</span>, _this.loginForm)</span><br><span class="line">          <span class="comment">// 这个路由重定向，访问的是/根目录或者未知的话就跳转到index，否则就就访问那个页面</span></span><br><span class="line">          <span class="keyword">var</span> path = <span class="built_in">this</span>.$route.query.redirect</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;path === &#x27;</span> + path)</span><br><span class="line">          <span class="built_in">this</span>.$router.replace(&#123; <span class="attr">path</span>: (path === <span class="string">&#x27;/&#x27;</span> || path === <span class="literal">undefined</span>) ? <span class="string">&#x27;/index&#x27;</span> : path &#125;)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          alert(<span class="string">&#x27;账号或密码错误！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function"><span class="params">failResponse</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(failResponse.toString())</span><br><span class="line">        alert(<span class="string">&#x27;登录失败&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>==注意！这里的 `var path = this.$route.query.redirect` 千万要分清router和route！被这个bug坑了半天==## **5.效果检验**同时运行前后端项目，访问 http://localhost:8080/index ，发现页面直接跳转到了 http://localhost:8080/login?redirect=%2Findex![](https://gitee.com/songx86/SongPicBed/raw/master/img/20200329172247.png)输入账号密码后登录，成功跳转到 http://localhost:8080/index ，之后再次访问则无需登录（除非清除缓存）。<template>  <el-menu    :default-active="'/index'"    router    mode="horizontal"    background-color="white"    text-color="#222"    active-text-color="red"    style="min-width: 1300px">   <el-menu-item v-for="(item,i) in navList" :key="i" :index="item.name">        </el-menu-item>    <a href="#nowhere" style="color: #222;float: right;padding: 20px;">更多功能</a>    <i class="el-icon-menu" style="float: right; font-size: 45px; color: #222; padding-top: 8px;"></i>    <span style="position: absolute;padding-top: 20px;right: 43%;font-size: 20px;font-weight: bold">White Jotter - Your Mind Palace</span>  </el-menu></template><script>export default {  name: 'NavMenu',  data () {    return {      navList: [        {name: '/index', navItem: '首页'},        {name: '/jotter', navItem: '笔记本'},        {name: '/library', navItem: '图书馆'},        {name: '/admin', navItem: '个人中心'}      ]    }  }}</script><style scoped="">  a{  text-decoration: none;}  span{    pointer-events: none;  }</style></div>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于知识图谱的用户理解</title>
      <link href="2020/12/24/1109%E8%82%96%E4%BB%B0%E5%8D%8E%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F/"/>
      <url>2020/12/24/1109%E8%82%96%E4%BB%B0%E5%8D%8E%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<p>本文整理自肖仰华教授在三星电子中国研究院做的报告，题目为《Understanding users with knowldge graphs》。</p><h1 id="基于知识图谱的用户理解"><a href="#基于知识图谱的用户理解" class="headerlink" title="基于知识图谱的用户理解"></a>基于知识图谱的用户理解</h1><h2 id="背景问题"><a href="#背景问题" class="headerlink" title="背景问题"></a>背景问题</h2><blockquote><p>现有的方法，包括机器学习和深度学习的方法，某种程度上都是在吃大数据的红利，机器学习的效果，模型的效果本质上是由大数据来喂养，我们灌进去的数据越多，模型的效果就越好，尤其是深度学习，随着它的层次结构越来越深以后，它对样本数据的规模和质量的要求也会更高，那么当我们把大数据的红利吃完之后，我们该怎么办呢？</p><p>事实上，学术界和工业界在这里年越来越多的意识到这个问题的严重性，就是当我们把大数据红利吃完之后，我们的模型效果应该如何进一步的提升？</p></blockquote><p>对于这个问题，从我这个研究方向给出的答案是什么呢？就是知识。知识的重要性将会越来越突出，我相信很多模型，推荐模型，机器学习算法都将会<strong>从数据驱动走向知识引导，越来越多的模型和算法将从基于行为的模型走向基于语义的模型</strong>。</p><p>我会更多的谈论如何<strong>摆脱行为数据的影响来做用户画像和推荐</strong>。</p><blockquote><p>因为很多场景下是没有行为数据的，在一些极端的情况下，根本没有用户信息，那么这个时候我们怎么推荐？再比如说在互联网搜索用户画像，高频用户和VIP用户都可以解决的很好，那是因为它数据量足够，但是关键的问题是，很多长尾用户压根没有什么数据，那这个时候我们的模型怎么办？</p></blockquote><p>这时候我们就要借鉴语义和背景知识来给我们力量。这也是为什么我想跟大家分享<strong>利用知识图谱来理解用户，给用户画像，来解决推荐的问题</strong>的原因。</p><h2 id="用户画像"><a href="#用户画像" class="headerlink" title="用户画像"></a>用户画像</h2><p>那么在各种各样的画像当中，<strong>最流行的一种方法是基于标签的</strong>。</p><p>在很多实际应用中，大家都在广泛的应用这一类基于标签的画像方法。</p><p>基于画像的标签方法其实很简单，就是给用户打一组标签，每个标签给一个权重，权重代表了用户在这个方面兴趣的强烈程度，如图我们给出了一个豆瓣用户的标签云，也给出了一个微博用户的标签云。</p><p>不同平台的语言风格，语言体系是不完全一样的，豆瓣的语言倾向于书面化，而微博的语言倾向于碎片化，口语化。</p><hr><p>基于标签的用户画像U：一个权重标签的集合</p><p>$$ U = {&lt;t_i,w_i&gt;} $$</p><p>$t_i$：兴趣标签</p><p>$w_i$：权重，代表了用户在这个方面兴趣的强烈程度</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201109211415093.png" alt="image-20201109211415093"></p><hr><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>时至今日，我们已经有很多方法来帮助解决画像和推荐的问题。</p><p>这些方法里面还存在一些问题，问题集中在两个方面。</p><ul><li><p>第一个方面就是用户画像<strong>某种程度上还是不完整的</strong>。<br>导致这个问题可能有两个原因：</p><ul><li>第一个原因就是任何画像的<strong>来源数据都是有一定偏差的</strong>，一般描述的都是用户画像的<strong>某一方面</strong>，很难有一个非常完整的画像。</li><li>还有一个非常重要的原因就是<strong>隐私</strong>，举个例子，大家会发现在微博上其实还是有很多人不愿谈及自己的，比如说宗教信仰，政治观念等等，但是很多时候可能了解用户不愿谈及的这个方面的内容对于我们做产品，做服务又是非常重要的。</li></ul><p>基于这两个原因，我们对用户的理解就是一个碎片式的，很难召回完整的目标客户。</p></li><li><p>用户画像第二个关键的问题就是<strong>不正确性</strong>，也就是说我们对用户画像的理解很多时候是错误的，这导致就会出现错误的推荐。<br>导致不正确性的原因有很多，</p><ul><li>第一个就是机器还无法理解这些标签，也就无法做出精准推荐。</li><li>第二个原因就是在跨领域场景下，由于缺失用户的商品，也就是缺失推荐对象之间的历史交互信息，使得冷启动变成一个非常突出的问题，<strong>没有历史信息</strong>，一切基于这个的推荐就会失效。<br>这个时候我们可能会采取一些基于语义的办法，但是基于语义的办法前提是要有精准的语义匹配，这就需要一个庞大精准的知识库来作为背景知识来支持。</li><li>第三个原因就是<strong>没有针对推荐给出解释</strong>。这个是非常重要的，当且仅当你给出一个非常合理的解释的时候，用户才会很好的接受推荐。<br>那如何给出解释呢？以前，解释在人脑里面，现在我们可以利用大规模知识库来产生解释，从而实现能够给出带解释的推荐给用户。</li></ul></li></ul><hr><p>当前基于标签的用户画像方法和推荐方法存在的问题</p><ul><li><p>不完整的用户画像</p><ul><li>数据不平衡</li><li>隐私问题</li></ul></li><li><p>不准确的推荐</p><ul><li>机器无法理解标签</li><li>不同领域语义不匹配</li><li>不可解释性</li></ul></li></ul><hr><h3 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h3><p>理解用户是我们的终极目标，但是我们要先理解由于用户的行为而产生的标签，这就非常难了，为什么呢？标签可以认为是自然语言的一部分，是一个简单形式，比如可以给我打标签，“IT教师”、“复旦大学”，“知识图谱”，那机器如何理解这些标签呢？目前机器还不能有效的准确的理解人类的自然语言，因为我们的自然语言很多时候是有歧义的，需要通过上下文才能理解的。很多时候语言的表达式是隐含的，比如我们中国人说两个人是爱人关系的时候，不会直接说他们俩是伴侣关系，而会说他们共进晚餐或者看电影之类的，很少直接去谈及这块，所以很多关系是隐含的。语言还有一个重要的难点，就是它的多样性，同一个意思，可以有很多种说法。</p><p>那么再进一步分析为什么语言理解这么困难？从根本上来讲，是因为语言理解是建立在人对世界认知的基础之上。你为什么能够理解语言？是因为你已经对这个世界，对在你身边发生的事情有了充分的认知。机器现在还达不到认知世界的能力，机器的大脑里还缺乏非常重要的<strong>背景知识</strong>，比如这里有几个卡通人物，大家一看就理解了，那是因为你已经有这个背景知识在背后，<strong>那么机器想要理解语言，理解标签，就需要有海量的背景知识去支撑它认知这些概念。</strong></p><hr><p>为何标签/语言难以理解</p><ul><li><p>标签/语言复杂性</p><ul><li>歧义性，上下文关联性，含蓄性</li><li>同样的意思有多种表达方式</li></ul></li><li><p>标签/语言理解困难</p><ul><li>仅以人类认知为基础</li><li>需要大量的背景知识</li></ul><p>钢铁侠，蜘蛛侠，美国队长，蝙蝠侠都是卡通英雄</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201109165431955.png" alt="image-20201109165431955"></p></li></ul><hr><p>机器需要怎样的背景知识呢？</p><ul><li>第一个是要有足够大的规模，必须覆盖足够多的实体，足够多的概念。</li><li>第二个是语义要足够丰富，当说到各种各样的关系的时候，机器必须都能够理解。</li><li>第三个就是质量足够精良。</li><li>第四个就是结构必须足够友好。</li></ul><p>大家都知道机器最喜欢的是有结构的数据，最怕的是纯文本，无结构的数据，我们希望知识库是以一种机器友好的结构形式来组织的。</p><h3 id="知识图谱与本体语义网络"><a href="#知识图谱与本体语义网络" class="headerlink" title="知识图谱与本体语义网络"></a>知识图谱与本体语义网络</h3><p>也有人发出疑问，知识图谱跟传统的本体语义网有什么差别呢？</p><ul><li>先来说本体，以前在特定领域尤其是医疗领域积累了大量的本体，但是大部分都是<strong>人工构建</strong>的，<strong>规模十分有限</strong>，而且当要把传统知识工程从<strong>一个领域转移到另一个领域</strong>的时候，就会发现代价极大，因为<strong>人工构建的成本极为高昂</strong>。</li><li>再来看看以前的语义网络，它往往是集中在<strong>单一的语义关系</strong>上，而不像知识图谱，涵盖了上千数万种语义关系。</li><li>再比如说文本，文本<strong>结构不友好</strong>。</li></ul><p>这么一看大家就知道传统的知识表示都不行。</p><p>这样，知识图谱成为了机器语言认知所需要的知识表示，所谓知识图谱，本质上是一种语义网络，它表达了各种各样实体概念及其之间的语义关系。与之前的知识表示作比较，会发现知识图谱有非常多的优势：</p><ul><li>第一，它规模巨大，像google的知识图谱现在已经到了几百亿的实体规模。</li><li>第二，它的语义关系也很丰富，比如说我们自己的CN-DBpedia里涵盖了成千上万种语义关系。</li><li>第三，知识图谱通常是用RDF来表示的，对于机器来讲，结构足够友好。</li><li>第四，知识图谱是通过大数据众包的手段来校验它的质量，也就是靠人来校验质量，所以有着比较好的质量。</li></ul><p>所以利用知识图谱来帮助机器理解标签，最终理解用户是有可能的。</p><hr><p>机器理解语言，需要良好的背景知识</p><ul><li>机器理解语言需要背景知识<ul><li>大规模</li><li>语义丰富</li><li>高质量</li><li>良好结构</li></ul></li><li>传统的知识表示不饿能满足这些要求<ul><li>本体</li><li>语义网络</li><li>纯文本</li></ul></li></ul><hr><h3 id="解决两个问题"><a href="#解决两个问题" class="headerlink" title="解决两个问题"></a>解决两个问题</h3><p>怎样利用知识图谱来解决刚才提到的<strong>不完整</strong>和不正确的两个问题呢？<br>我们利用知识图谱来做<strong>标签扩展，标签推断</strong>，来提高机器对标签的理解水平，实现基于标签的，基于知识图谱的精准推荐。</p><hr><p>不完全性：</p><ul><li>使用社交网络和知识图谱来做标签扩展<ul><li>1.1 社交图谱中的标签传播</li><li>1.2 知识图谱中的标签推断</li></ul></li></ul><p>不准确性：</p><ul><li>使用知识图谱来提高机器对标签的理解水平，提升推荐质量<ul><li>2.1 用概念来理解标签</li><li>2.2 知识图谱中的用户项语义匹配</li><li>2.3 概念解释的实体推荐</li></ul></li></ul><hr><h4 id="不完整性"><a href="#不完整性" class="headerlink" title="不完整性"></a>不完整性</h4><p>基于社交图谱的标签扩展</p><p>这里有一个实际案例，我们在微博上做实验，结果显示这种传播方法很有效，尤其是在宗教信仰，政治观念，教育等方面的推断准确率能高达95%。</p><p>比如在这个user case，基于label propagation这么一个思路，用LTPA算法，user A的real tags是music和fashion，但是通过标签传播，你会发现实际上他是一个基督教徒，因为传播出来很多类似Christian，Bible，faith等等这样的标签，那我们看他的微博发现他确实就是一个基督教徒。</p><p>这就是tag propagation，通过传播来找到用户的缺失标签。</p><hr><h5 id="基于社交图谱的标签传播"><a href="#基于社交图谱的标签传播" class="headerlink" title="基于社交图谱的标签传播"></a>基于社交图谱的标签传播</h5><ul><li><p>问题：很多用户处于隐私考虑，不愿发布标签，或者刻意隐藏自己的行为</p></li><li><p>思路：从你的好友，寻求关于你的合适标签</p></li><li><p>方法：基于PageRank机制，让好友的标签传播到特定用户</p><ul><li>越多好友具有某个标签，用户越可能具有某个标签</li><li>关系越强，标签越可能传播到某个用户</li></ul><h5 id=""><a href="#" class="headerlink" title=""></a><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201109211542652.png" alt="image-20201109211542652"></h5><p>x与a之间相关性：$f_{xa} = 0.5$</p><p>x与c之间的相关性：$f_{xc} = 0.3$</p><p>a的标签Christ，权重为0.33；</p><p>c的Christ标签，权重为0.25；</p><p>传播：x的Christ标签权重为:<br>$$a_{Christ} \times f_{xa}+b_{Christ} \times f_{xb}\ = 0.33 \times 0.5+0.25 \times 0.3\ = 0.24$$</p></li></ul><hr><p>在微博上的评估显示：<br>当标签涉及宗教、地点、教育、政治时，传播标签的准确性几乎为95%</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201109202103788.png" alt="image-20201109202103788"></p><blockquote><p>论文：An Integrated Tag Recommendation Algorithm Towards Weibo User Profiling，针对微博用户分析的集成标签推荐算法。Springer期刊。</p></blockquote><hr><h5 id="基于知识图谱的标签扩展"><a href="#基于知识图谱的标签扩展" class="headerlink" title="基于知识图谱的标签扩展"></a>基于知识图谱的标签扩展</h5><p>关于标签的不正确性，我们做一个tag inference。</p><p>这里有两个真实的案例，</p><p>第一个案例就是季建业受审的案子，我们要给这个新闻打合理的标签，这个标签难在什么地方呢？大家都知道季建业是南京市长，在山东烟台受审，结果“烟台”出现的频率显著高于“南京”，但是这个新闻按道理应该是“南京”打的这个标签权重高于“烟台”，那么怎样识别出更准确的标签呢？怎么把“烟台”这个标签弱化，而把“南京”这个标签给强调出来？</p><p>第二个例子就是枪决案件，打的标签是“朝鲜”，“崔英建”，“枪决”这三个标签，虽然通篇没有提到平壤，但这件事肯定跟平壤是有关系的。</p><p>实际上这样的例子很多，一篇讲姚明的文章，即便通篇没有讲篮球，但肯定跟篮球有关系，打上“篮球”的标签准没错。</p><p>我想表达什么意思呢？就是有很多应该打的标签，由于这个事实太显然，以至于文本里没有提，而我们现在所有的办法都基于一个假设，就是文本里提到才能打上标签，那么我们有没有办法推断出这些不存在与文本中的标签呢？</p><hr><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201109205612552.png" alt="image-20201109205612552"></p><hr><p>实际上我们用知识图谱是可以做到的。我们建构一个语义网络，利用CN-DBpedia把新闻里提到的<strong>候选实体之间的语义关联建立起来。</strong></p><p>我们的算法怎么实现呢？其实也很简单，我们可以用一些<strong>随机游走</strong>的办法，可以从新闻中观察到的这个实体去随机游走，看它们能都倾向于走到哪些未被观察到的实体，而这些实体就是很有可能作为标签出现的。实验结果证实这个办法的确能够找到更多人工判断下来的更为准确的标签。</p><hr><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201109205803069.png" alt="image-20201109205803069"></p><p>NER：命名实体识别</p><p>Forward RW：向前随机游走？一维随机游走？</p><hr><h4 id="不正确性"><a href="#不正确性" class="headerlink" title="不正确性"></a>不正确性</h4><h5 id="基于知识图谱的标签泛化"><a href="#基于知识图谱的标签泛化" class="headerlink" title="基于知识图谱的标签泛化"></a>基于知识图谱的标签泛化</h5><p>再进一步我们想通过知识图谱<strong>让机器准确理解这些标签</strong>。</p><p>人类是在<strong>合适的概念层次</strong>来理解标签的。比如说人类看这么一组标签“中国，日本，印度，韩国”，很快就会理解，讲的是亚洲国家。基于概念级别去理解这些标签对于后面做精准推荐是十分重要的。那现在问题来了，我们<strong>怎么让机器去理解这些标签？怎么为标签产生一个合适的概念呢？</strong></p><p>首先我们用一个叫probase的知识库，它<strong>包含了大量的实体，也可以认为是标签及其概念</strong>。比如“苹果”，它可以是一个企业，也可以是一个水果，企业和水果都是“苹果”的概念。</p><p>我们利用probase去产生概念标签的时候，要解决两个问题</p><ul><li>第一个问题就是我们希望找到的这个概念的覆盖率高，</li><li>第二问题就是概念的信息尽可能详细。</li></ul><p>比如第一个例子“中国，日本，印度，韩国”，可以用“亚洲国家”这个标签，也可以用“国家”这个标签，但显然“亚洲国家”比较好。</p><p>我们要处理的最核心的问题就是<strong>覆盖率和最小值</strong>这么一对矛盾。我们采用的是一个非常通用的模型，是基于信息论的，也就是<strong>最小描述长度的方法</strong>。</p><hr><p>标签泛化</p><ul><li><p>问题:粒度太细</p><ul><li>海贼王、柯南、千与千寻&gt;动漫</li><li>china, japan, india, korea -&gt; asian country</li><li>dinner, lunch, food, child, girl -&gt;meal, child</li><li>-bride, groom, dress, celebration -&gt; wedding</li></ul></li><li><p>难点:标签泛化</p><ul><li>Coverage:覆盖给定标签</li><li>Minimality:粒度足够细</li></ul></li><li><p>思路:</p><ul><li>算法框架:最小描述长度</li><li>引入外部isA知识库:Probase</li></ul></li></ul><p>我们把刚才那个<strong>概念标签选择问题</strong>建模成<strong>找一堆概念来encoding我们看到的tag</strong>这么一个问题。那么很显然，刚才的两个标准，就可以体现在这里的两个目标里。</p><p>第一部分，就是我们要用尽可能少的概念去cover这些实例，那么也就是说<strong>概念自身的编码代价要尽可能小</strong>。</p><p>第二个利用这种概念去encoding知识图谱的tag的代价尽可能小，也就是<strong>基于知识图谱的条件的length尽可能小</strong>。就有这么一个优化的问题。当然了，这是一个很general的model。在这个general的model下面，我们还要处理一些很实际的情况。</p><hr><p>假设一袋单词X调用一个概念。使用概念c编码X的代码长度如下：</p><h6 id="基于MDL的概念标签"><a href="#基于MDL的概念标签" class="headerlink" title="基于MDL的概念标签"></a>基于MDL的概念标签</h6><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201110083029041.png" alt="image-20201110083029041"></p><p>问题：给出一个标签袋；找出C* = argmin CL(X,C)</p><p>最小性：概念编码的描述长度</p><p>覆盖范围：按概念编码单词的描述长度</p><p>这里C是概念，X是词袋，L(C)就是描述词典所需的信息，也就是记录模型需要信息；L(X|C)为分词后的语料</p><p><a href="https://blog.csdn.net/wangliang_f/article/details/25371055">分词研究中的最小描述长度(Minimum description length)方法</a></p><blockquote><p>On Conceptual Labeling of a Bag of Words,词袋的概念标记</p><p>会议论文：Proceedings of the Twenty-Fourth International Joint Conference on Artificial Intelligence (IJCAI 2015)，第二十四届国际人工智能联合会议论文集（IJCAI 2015）</p><p>在本文中，我们介绍了概念标签（CL）的任务，该任务旨在生成最少的概念标签集，以最好地概括词袋</p></blockquote><hr><p>我们这里很多都是很实际的案例，来自很多实际的数据的标签。比如在<strong>实际的用户的标签、图像或者文件往往会有噪音</strong>。比如这个标签里面有很多“苹果、香蕉、早餐、晚餐、猪肉、牛肉”，突然出现一个“子弹”，那这个很可能就是个噪音，所以这个模型要<strong>能够噪音容忍</strong>，这是第一个问题。</p><p>第二个问题就是说有很多像“人口、总统、地点”，实际上最好的概念是“国家”。但你要注意“国家”跟“人口、总统、地点”实际上<strong>不是严格的isA关系</strong>。人口，总统都是“国家”的一个属性，而不是isA关系。像刚才“中国”和“亚洲国家”那是isA关系。但是人口只能说是国家的一个属性。所以我们在建模的时候<strong>不仅仅要考虑isA关系，还需要能够应用这里的属性关系</strong>，这是在模型方面的两个改进。</p><hr><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201110091732615.png" alt="image-20201110091732615"></p><p>1.我们需要做出选择：要么独立编码离群值，要么使用概念c对其进行编码。我们使用MDL原理进行选择。也就是说，我们计算两个选项产生的代码长度，然后选择长度较短的代码。</p><p>2.其中：</p><ul><li>Pe（c | x）表示等式1中定义的isA典型性，</li><li>Pa（c | x）表示等式3中定义的属性典型性。直观上讲，P（c |  x）是单词x调用的可能性conceptc，可以是其实例或属性。反向的典型性P（x | c）使用贝叶斯规则推论：P（x | c）= P（c | x）P（x）/  P（c）。</li></ul><hr><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201110093509658.png" alt="image-20201110093509658"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201110093524718.png" alt="image-20201110093524718"></p><h5 id="基于知识图谱的跨平台推荐"><a href="#基于知识图谱的跨平台推荐" class="headerlink" title="基于知识图谱的跨平台推荐"></a>基于知识图谱的跨平台推荐</h5><p>我们怎样利用这个知识图谱来做一些精准推荐呢？在推荐中最难的一类是跨领域推荐，不同的领域要不共有user，要不共有item，要不共有feature，可是也有非常情况，比如说给微博用户推荐淘宝商品，当然可以用传统的ontology的办法，但是ontology的覆盖率比较低，所以我们要用知识图谱。</p><p>如果一个微博用户经常谈论各种旅游名胜，我们能不能把淘宝上的登山杖，旅游鞋推荐给他呢？要知道旅游名胜和登山杖，旅游鞋的描述是风马牛不相及的，是没有办法直接匹配的，那就需要一些间接匹配的方式，通过什么呢？就是通过背景知识图谱来做一个桥接，也就是CN-DBpedia。</p><p>“九寨沟”会在知识图谱在里面，知识图谱 里可能有一些相关实体，比如“旅游”，“旅游”和“九寨沟”直接相关，“旅游”与“登山杖”“旅游鞋”也相关，就可以用这种中间实体和概念来桥接两个完全不相关的物品和用户。</p><p>实际上我们利用knowledge base构建了很多concept vector来进行描述，分别描述user和item，然后来实现匹配，最终的效果也是相当不错的。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201110110027179.png" alt="image-20201110110027179"><br>微博用户谈论自然观光，如{九寨沟，长城…}将通过旅行与淘宝的旅行鞋类和cn-dbpedia中的许多其他实体相匹配。</p><p>推荐场景：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201110111836980.png" alt="image-20201110111836980"></p><p>跨域推荐的不同设置。实线表示用户与项目的互动关系，例如评分，评论等。在子图（a）和（b）中，可以找到共享的用户或项目。在子图（c）中，存在可以用来发现两个域之间关系的共同特征。我们专注于子图（d）的设置，该图比前者更具挑战性，因为无法获得用户-项目关系或跨域的共同特征。</p><p>语义相似度计算：</p><p>接下来，我们提出一种度量标准，以计算两个标签集的概念向量的相似度。通过使用维基百科文章之间的链接，已证明归一化Google距离[20]是衡量两个术语之间语义相关性的有效方法。但是，它忽略了每个链接的权重。在我们的方案中，配置文件集中的每个标签具有不同的权重，即LTPA计算的标签得分。因此，我们提出了一种更细粒度的度量，即加权普通Google距离（简称WNGD），以在测量两个标签集而不是两个术语的语义相关性时实现更高的准确性。假定CaandCb是解释两个标签集语义的两个概念向量，令A和B代表在CaandCb中遇到的具有非零值的条目集。然后，我们将两个标签集的语义相关性定义为：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201110112806605.png" alt="image-20201110112806605"></p><blockquote><p>Semantic-based Recommendation across Heterogeneous Domains，跨异构域的基于语义的推荐</p><p>会议：ICDM.2015</p></blockquote><p>基于知识图谱的实体描述</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201110112434073.png" alt="image-20201110112434073"></p><p>在线百科全书中的文章推导了标签的概念向量。左侧部分显示在线百科全书中的一些文章。在这种情况下，将tagx和tagy分别映射到Conceptx和Concepty，然后通过一些百科全书概念将tagxis与tagy语义相关，尽管它们没有用相同的术语表示。</p><blockquote><p>A Graph-based Recommendation across Heterogeneous Domains,</p><p>会议：(CIKM 2015),<br>跨异构域的基于图的建议</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
            <tag> Knowledge Graph </tag>
            
            <tag> 用户画像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot创建父子多级项目</title>
      <link href="2020/12/12/SpringBoot%E5%88%9B%E5%BB%BA%E7%88%B6%E5%AD%90%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/"/>
      <url>2020/12/12/SpringBoot%E5%88%9B%E5%BB%BA%E7%88%B6%E5%AD%90%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Git创建项目"><a href="#1-Git创建项目" class="headerlink" title="1. Git创建项目"></a>1. Git创建项目</h2><ol><li><p>从Gitee中创建初始仓库。</p></li><li><p>通过IDEA创建SpringBoot Initializr项目。<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201015201427170.png" alt="阿里云的SpringBoot创建器"><br>这里使用aliyun的Spring Boot创建器，速度快还能使用阿里云的微服务的相关模块。</p></li><li><p>在IDEA菜单中，创建一个本地git仓库。<br>VCS –&gt; Import Into Version Control –&gt; Create Git Repository<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/aE2iSyAQpxC7foz.png" alt="IDEA中VCS菜单Import Into Version Control"><br>选择项目文件夹，会在项目文件夹下生成一个.git文件夹。</p></li><li><p>修改：VCS –&gt; Git –&gt; Remotes<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201015201230441.png" alt="修改Remotes"></p><p>将其改为Git的地址，我这里用的是Gitee的仓库。<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201015201350653.png" alt="Remotes修改为git地址"></p></li><li><p>修改.gitignore文件，忽略无关的文件。这里使用.ignore插件来进行的。</p><ol><li><p>安装插件后，在项目上右键点击新建文件：<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201015202831023.png" alt="image-20201015202831023"><br>选择这个Git忽略文件。</p></li><li><p>在弹出窗口中选择相应的应该忽略的文件。这里加了Java和IDEA还有Maven的。<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201015203023884.png" alt="image-20201015203023884"></p><p>添加了之后确定就行了。如果有原来的.gitignore文件，会自动加到里面去。</p></li></ol></li><li><p>之后将其他的没有忽略的文件，右键菜单，Git–&gt;Add,添加到Git版本控制中。Commit，Push即可。<br>但是我Push的时候出现了错误。<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201015203637873.png" alt="image-20201015203637873"></p><blockquote><p>Push rejected<br>Push to origin/master was rejected</p></blockquote><p>这个错误是因为：<strong>因为本地仓库和远程仓库的代码不一样</strong></p><p>Gitee上初始创建的项目仓库，和本地的项目仓库并不一样。所以说先检出一下。</p></li><li><p>但是检出也出错了。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201015204001154.png" alt="image-20201015204001154"></p><blockquote><p>下午 8:37    Can’t Update</p><pre><code>                No tracked branch configured for branch master or the branch doesn't exist.                To make your branch track a remote branch call, for example,                git branch --set-upstream-to=origin/master master (show balloon)</code></pre><p>下午 8:37    Update canceled</p></blockquote></li></ol><p>按照提示，执行：<code> git branch --set-upstream-to=origin/master master</code></p><p>这个命令的意思是，上传的代码中的origin或者master分支，设为仓库中的master分支。（origin/master是个“或者”，选项，所以说不能直接输入。。）<br>执行<code>git push –set-upstream origin master</code><br>还是报错。</p><ol start="8"><li>爷不演了，反正远程仓库里面并没有什么东西，是新建的一个仓库，暴力点，直接强制Push: <code>git push origin master -f</code>。这个命令会强制把本地的Push到仓库中。这样会将本地的项目，将远程仓库中的完全覆盖。<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201015205118654.png" alt="image-20201015205118654"></li></ol><h2 id="2-项目架构"><a href="#2-项目架构" class="headerlink" title="2. 项目架构"></a>2. 项目架构</h2><h3 id="2-1父项目"><a href="#2-1父项目" class="headerlink" title="2.1父项目"></a>2.1父项目</h3><ol><li><p>修改pom.xml文件<br>这里要用父子项目结构，所以说首先在<code>&lt;artifactId&gt;</code> 节点后面添加  pom类型</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>guli_parent3<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>并且增加一个继承spring-boot-starter的parent节点：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加partent标签，上面继承SpringBoot启动器--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>替换掉properties下的版本控制</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">guli.version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">guli.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">velocity.version</span>&gt;</span>2.0<span class="tag">&lt;/<span class="name">velocity.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">swagger.version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">swagger.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aliyun.oss.version</span>&gt;</span>2.8.3<span class="tag">&lt;/<span class="name">aliyun.oss.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jodatime.version</span>&gt;</span>2.10.1<span class="tag">&lt;/<span class="name">jodatime.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">poi.version</span>&gt;</span>3.17<span class="tag">&lt;/<span class="name">poi.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-fileupload.version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">commons-fileupload.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-io.version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">commons-io.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">httpclient.version</span>&gt;</span>4.5.1<span class="tag">&lt;/<span class="name">httpclient.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jwt.version</span>&gt;</span>0.7.0<span class="tag">&lt;/<span class="name">jwt.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aliyun-java-sdk-core.version</span>&gt;</span>4.3.3<span class="tag">&lt;/<span class="name">aliyun-java-sdk-core.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aliyun-sdk-oss.version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">aliyun-sdk-oss.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aliyun-java-sdk-vod.version</span>&gt;</span>2.15.2<span class="tag">&lt;/<span class="name">aliyun-java-sdk-vod.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aliyun-java-vod-upload.version</span>&gt;</span>1.4.13<span class="tag">&lt;/<span class="name">aliyun-java-vod-upload.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aliyun-sdk-vod-upload.version</span>&gt;</span>1.4.11<span class="tag">&lt;/<span class="name">aliyun-sdk-vod-upload.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fastjson.version</span>&gt;</span>1.2.28<span class="tag">&lt;/<span class="name">fastjson.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">gson.version</span>&gt;</span>2.8.6<span class="tag">&lt;/<span class="name">gson.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">json.version</span>&gt;</span>20170516<span class="tag">&lt;/<span class="name">json.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-dbutils.version</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">commons-dbutils.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">canal.client.version</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">canal.client.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">docker.image.prefix</span>&gt;</span>zx<span class="tag">&lt;/<span class="name">docker.image.prefix</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">cloud-alibaba.version</span>&gt;</span>0.2.2.RELEASE<span class="tag">&lt;/<span class="name">cloud-alibaba.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>删除depentcys，替换dependencyMangment:</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--Spring Cloud--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>Hoxton.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-alibaba-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${cloud-alibaba.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--mybatis-plus 持久层--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${mybatis-plus.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${velocity.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${swagger.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--swagger ui--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${swagger.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--            &amp;lt;!&amp;ndash;aliyunOSS&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;version&gt;${aliyun.oss.version}&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/dependency&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--日期时间工具--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>joda-time<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${jodatime.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--xls--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${poi.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--xlsx--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${poi.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--文件上传--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${commons-fileupload.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--commons-io--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${commons-io.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--httpclient--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${httpclient.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${gson.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- JWT --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.jsonwebtoken<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jjwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${jwt.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--aliyun--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${aliyun-java-sdk-core.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${aliyun-sdk-oss.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-vod<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${aliyun-java-sdk-vod.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;groupId&gt;com.aliyun&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;artifactId&gt;aliyun-java-vod-upload&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;version&gt;${aliyun-java-vod-upload.version}&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;groupId&gt;com.aliyun&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;artifactId&gt;aliyun-sdk-vod-upload&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;version&gt;${aliyun-sdk-vod-upload.version}&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/dependency&gt;--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>fastjson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${fastjson.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.json<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${json.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${commons-dbutils.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba.otter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>canal.client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>${canal.client.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol><h3 id="2-2子项目"><a href="#2-2子项目" class="headerlink" title="2.2子项目"></a>2.2子项目</h3><h4 id="新建子项目service"><a href="#新建子项目service" class="headerlink" title="新建子项目service"></a>新建子项目service</h4><ol start="2"><li><p>New –&gt; Module，新建子项目。选择Maven工程。<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201016195347364.png" alt="image-20201016195347364"><br>修改pom打包方式：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>增加依赖：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!--hystrix依赖，主要是用  @HystrixCommand --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-netflix-hystrix<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!--服务注册--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-alibaba-nacos-discovery<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--服务调用--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-openfeign<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!-- velocity 模板引擎, Mybatis Plus 代码生成器需要 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.velocity<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>velocity-engine-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!--xls--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.poi<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>poi-ooxml<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="comment">&lt;!--httpclient--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--commons-io--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--gson--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">   </span><br></pre></td></tr></tbody></table></figure></li></ol><h4 id="导包之坑"><a href="#导包之坑" class="headerlink" title="导包之坑"></a>导包之坑</h4><h5 id="阿里云maven镜像"><a href="#阿里云maven镜像" class="headerlink" title="阿里云maven镜像"></a>阿里云maven镜像</h5><p>2020年最新的阿里云的maven镜像库变了，修改一下。把原来的都删掉了。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span>  //不要怀疑，就是中文的</span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="父项目pom"><a href="#父项目pom" class="headerlink" title="父项目pom"></a>父项目pom</h5><p>修改springboot的版本为2.2.1.RELEASE。</p><p>   首先，先把父项目pom里面的aliyun-skd-oss给注释了，因为写重复了一个</p>   <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--            &amp;lt;!&amp;ndash;aliyunOSS&amp;ndash;&amp;gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;dependency&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;groupId&gt;com.aliyun.oss&lt;/groupId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;artifactId&gt;aliyun-sdk-oss&lt;/artifactId&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--                &lt;version&gt;${aliyun.oss.version}&lt;/version&gt;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;/dependency&gt;--&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>   之后，阿里云上传组件飘红，暂未解决。</p>   <figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-vod-upload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${aliyun-java-vod-upload.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-vod-upload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>${aliyun-sdk-vod-upload.version}<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h5 id="子项目pom"><a href="#子项目pom" class="headerlink" title="子项目pom"></a>子项目pom</h5><p>提示几个unknow，给它写上特定版本。这里版本是根据IDEA提示随机添加的</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.21<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里mysql的版本改了一下，用了个比较新的，因为旧的mysql驱动是<code>com.mysql.jdbc.Driver</code>而新的是<code>com.mysql.cj.jdbc.Driver</code>，多了个cj，不太一样。</p><p>新建子项目service-edu</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201016205021480.png" alt="image-20201016205021480"></p><p>新建配置文件application.properties</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 服务端口</span></span><br><span class="line"><span class="meta">server.port</span>=<span class="string">8001</span></span><br><span class="line"><span class="comment"># 服务名</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">service-edu</span></span><br><span class="line"><span class="comment"># 环境设置：dev、test、prod</span></span><br><span class="line"><span class="meta">spring.profiles.active</span>=<span class="string">dev</span></span><br><span class="line"><span class="comment"># mysql数据库连接</span></span><br><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="comment">#mybatis日志</span></span><br><span class="line"><span class="meta">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></tbody></table></figure><p>在test文件夹下，新建Mybatis-Plus代码生成器：<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201016211954717.png" alt="image-20201016211954717"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songx64.eduservice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.AutoGenerator;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.DataSourceConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.GlobalConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.PackageConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.StrategyConfig;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.DateType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.generator.config.rules.NamingStrategy;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerator</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1、创建代码生成器</span></span><br><span class="line">        AutoGenerator mpg = <span class="keyword">new</span> AutoGenerator();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2、全局配置</span></span><br><span class="line">        GlobalConfig gc = <span class="keyword">new</span> GlobalConfig();</span><br><span class="line">        String projectPath = System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">        System.out.println(projectPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//        gc.setOutputDir(projectPath + "/src/main/java");</span></span><br><span class="line">        <span class="comment">//改为绝对路径，系统自动获取可能会有问题</span></span><br><span class="line">        gc.setOutputDir(<span class="string">"F:\\AWork\\Project\\MyLearn\\guli_parent3\\service\\service-edu"</span> + <span class="string">"/src/main/java"</span>);</span><br><span class="line"></span><br><span class="line">        gc.setAuthor(<span class="string">"songx64"</span>);</span><br><span class="line">        gc.setOpen(<span class="keyword">false</span>); <span class="comment">//生成后是否打开资源管理器</span></span><br><span class="line">        gc.setFileOverride(<span class="keyword">false</span>); <span class="comment">//重新生成时文件是否覆盖</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * mp生成service层代码，默认接口名称第一个字母有 I</span></span><br><span class="line"><span class="comment">         * UcenterService</span></span><br><span class="line"><span class="comment">         * */</span></span><br><span class="line">        gc.setServiceName(<span class="string">"%sService"</span>);    <span class="comment">//去掉Service接口的首字母I</span></span><br><span class="line">        gc.setIdType(IdType.ID_WORKER); <span class="comment">//主键策略</span></span><br><span class="line">        gc.setDateType(DateType.ONLY_DATE);<span class="comment">//定义生成的实体类中日期类型</span></span><br><span class="line">        gc.setSwagger2(<span class="keyword">true</span>);<span class="comment">//开启Swagger2模式</span></span><br><span class="line"></span><br><span class="line">        mpg.setGlobalConfig(gc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3、数据源配置</span></span><br><span class="line">        DataSourceConfig dsc = <span class="keyword">new</span> DataSourceConfig();</span><br><span class="line">        dsc.setUrl(<span class="string">"jdbc:mysql://localhost:3306/guli?serverTimezone=GMT%2B8"</span>);</span><br><span class="line">        dsc.setDriverName(<span class="string">"com.mysql.cj.jdbc.Driver"</span>);</span><br><span class="line">        dsc.setUsername(<span class="string">"root"</span>);</span><br><span class="line">        dsc.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">        dsc.setDbType(DbType.MYSQL);</span><br><span class="line">        mpg.setDataSource(dsc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4、包配置</span></span><br><span class="line">        PackageConfig pc = <span class="keyword">new</span> PackageConfig();</span><br><span class="line">        pc.setParent(<span class="string">"com.songx64"</span>);<span class="comment">//包名字com.songx64</span></span><br><span class="line">        pc.setModuleName(<span class="string">"eduservice"</span>); <span class="comment">//模块名</span></span><br><span class="line"></span><br><span class="line">        pc.setController(<span class="string">"controller"</span>);<span class="comment">//包名字com.songx64.controller</span></span><br><span class="line">        pc.setEntity(<span class="string">"entity"</span>);</span><br><span class="line">        pc.setService(<span class="string">"service"</span>);</span><br><span class="line">        pc.setMapper(<span class="string">"mapper"</span>);</span><br><span class="line">        mpg.setPackageInfo(pc);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5、策略配置</span></span><br><span class="line">        StrategyConfig strategy = <span class="keyword">new</span> StrategyConfig();</span><br><span class="line">        strategy.setInclude(<span class="string">"edu_teacher"</span>);</span><br><span class="line">        strategy.setNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表映射到实体的命名策略</span></span><br><span class="line">        strategy.setTablePrefix(pc.getModuleName() + <span class="string">"_"</span>); <span class="comment">//生成实体时去掉表前缀</span></span><br><span class="line"></span><br><span class="line">        strategy.setColumnNaming(NamingStrategy.underline_to_camel);<span class="comment">//数据库表字段映射到实体的命名策略</span></span><br><span class="line">        strategy.setEntityLombokModel(<span class="keyword">true</span>); <span class="comment">// lombok 模型 @Accessors(chain = true) setter链式操作</span></span><br><span class="line"></span><br><span class="line">        strategy.setRestControllerStyle(<span class="keyword">true</span>); <span class="comment">//restful api风格控制器</span></span><br><span class="line">        strategy.setControllerMappingHyphenStyle(<span class="keyword">true</span>); <span class="comment">//url中驼峰转连字符</span></span><br><span class="line"></span><br><span class="line">        mpg.setStrategy(strategy);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 6、执行</span></span><br><span class="line">        mpg.execute();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>修改相关配置，主要是</p><ul><li>生成路径，最好用绝对路径；</li><li>数据库连接的名字，用户名密码；</li><li>包名，author名</li></ul><p>之后运行即可。会自动生成代码：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201016212139439.png" alt="image-20201016212139439"></p><h1 id="编辑Teacher的控制类，启动类"><a href="#编辑Teacher的控制类，启动类" class="headerlink" title="编辑Teacher的控制类，启动类"></a>编辑Teacher的控制类，启动类</h1><h2 id="EduTeacherController"><a href="#EduTeacherController" class="headerlink" title="EduTeacherController"></a>EduTeacherController</h2><ol><li>自动注入Service，@Autowired</li><li>编写查询函数，@GetMapping</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songx64.eduservice.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/eduservice/edu-teacher")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EduTeacherController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EduTeacherService eduTeacherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/findAll")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;EduTeacher&gt; <span class="title">findAllTeacher</span><span class="params">()</span></span>{</span><br><span class="line">        List&lt;EduTeacher&gt; list = eduTeacherService.list(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="EduConfig"><a href="#EduConfig" class="headerlink" title="EduConfig"></a>EduConfig</h2><p>创建配置类，扫描mapper。不加入的话mapper扫描不到可能会报错。</p><p>创建config包，<code>com.songx64.eduservice.config</code></p><p>@MapperScan(包名)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songx64.eduservice.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@MapperScan("com.songx64.eduservice.mapper")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EduConfig</span> </span>{</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h2 id="启动类"><a href="#启动类" class="headerlink" title="启动类"></a>启动类</h2><p>在Edu-Service根目录下添加启动类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songx64.eduservice;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EduApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(EduApplication.class, args);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>报错：java.lang.ClassNotFoundException: org.springframework.boot.web.servlet.filter.OrderedHttpPutFormContentFilter</p><h2 id="报错解决："><a href="#报错解决：" class="headerlink" title="报错解决："></a>报错解决：</h2><h3 id="版本问题解决"><a href="#版本问题解决" class="headerlink" title="版本问题解决"></a>版本问题解决</h3><p>错误：springboot的各种包都找不到。</p><p>原因：在父配置文件中，少加了个标签：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这个自然是从Springboot官方的parent节点继承spring-boot-starter，没有这个原来的各种starter都没有集成进去。<br>原来我的方式是在一个个的子模块中重新集成了springboot的starter，而不是继承过来的。</p><h3 id="启动报错问题解决"><a href="#启动报错问题解决" class="headerlink" title="启动报错问题解决"></a>启动报错问题解决</h3><p>错误：</p><blockquote><p>org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name ‘eduTeacherController’: Unsatisfied dependency expressed through field ‘eduTeacherService’; </p><p>nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name ‘eduTeacherServiceImpl’: Unsatisfied dependency expressed through field ‘baseMapper’; </p><p>nested exception is org.springframework.beans.factory.NoSuchBeanDefinitionException: No qualifying bean of type ‘com.songx64.eduservice.mapper.EduTeacherMapper’ available: expected at least 1 bean which qualifies as autowire candidate. Dependency annotations: {@org.springframework.beans.factory.annotation.Autowired(required=true)}</p></blockquote><p>这个是说找不到eduTeacherServiceImpl，还有baseMapper。</p><p>原因：忘了在config类中添加<code>@Configuration</code>注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songx64.eduservice.config;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="meta">@MapperScan("com.songx64.eduservice.mapper")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EduConfig</span> </span>{</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="访问报错："><a href="#访问报错：" class="headerlink" title="访问报错："></a>访问报错：</h3><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201030172436277.png" alt="image-20201030172436277"></p><p>原因：用的https访问的。<a href="https://localhost:8001/eduservice/edu-teacher/findAll">https://localhost:8001/eduservice/edu-teacher/findAll</a></p><p>解决：修改为http协议即可。<a href="http://localhost:8001/eduservice/edu-teacher/findAll">http://localhost:8001/eduservice/edu-teacher/findAll</a></p><h1 id="Swagger2"><a href="#Swagger2" class="headerlink" title="Swagger2"></a>Swagger2</h1><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p><h2 id="1-新建common模块"><a href="#1-新建common模块" class="headerlink" title="1.新建common模块"></a>1.新建common模块</h2><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201102185152951.png" alt="image-20201102185152951"></p><h2 id="2-在common-pom-xml中引入相关模块"><a href="#2-在common-pom-xml中引入相关模块" class="headerlink" title="2.在common/pom.xml中引入相关模块"></a>2.在common/pom.xml中引入相关模块</h2> <dependencies>        <dependency>            <groupid>org.springframework.boot</groupid>            <artifactid>spring-boot-starter-web</artifactid>            <scope>provided </scope>        </dependency><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">    <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--lombok用来简化实体类：需要安装lombok插件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided <span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- redis --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring2.X集成redis所需common-pool2</span></span><br><span class="line"><span class="comment">    &lt;dependency&gt;</span></span><br><span class="line"><span class="comment">        &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span></span><br><span class="line"><span class="comment">        &lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span></span><br><span class="line"><span class="comment">        &lt;version&gt;2.6.0&lt;/version&gt;</span></span><br><span class="line"><span class="comment">    &lt;/dependency&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="3-新建SwaggerConfig配置类"><a href="#3-新建SwaggerConfig配置类" class="headerlink" title="3.新建SwaggerConfig配置类"></a>3.新建SwaggerConfig配置类</h2><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201102191706272.png" alt="image-20201102191706272"></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songx64.servicebase.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.common.base.Predicates;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.ApiInfoBuilder;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.builders.PathSelectors;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.ApiInfo;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.service.Contact;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spi.DocumentationType;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.spring.web.plugins.Docket;</span><br><span class="line"><span class="keyword">import</span> springfox.documentation.swagger2.annotations.EnableSwagger2;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2020/11/2,下午 7:06</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SongX64</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@desc</span> Swagger配置类，该类里面的应该是固定的，主要用来设置文档的主题信息，比如文档的大标题，副标题，公司名等</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span><span class="comment">//托管spring</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span><span class="comment">//开启swagger功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SwaggerConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Docket <span class="title">webApiConfig</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过调用下面的自定义方法webApiInfo，获得文档的主要信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class="line">                .groupName(<span class="string">"MySwaggerTest"</span>)</span><br><span class="line">                .apiInfo(webApiInfo())</span><br><span class="line">                .select()</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">"/admin/.*"</span>)))</span><br><span class="line">                .paths(Predicates.not(PathSelectors.regex(<span class="string">"/error.*"</span>)))</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在线文档的信息，展现在文档页面中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> ApiInfo <span class="title">webApiInfo</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ApiInfoBuilder()</span><br><span class="line">                .title(<span class="string">"网站-课程中心API文档"</span>)</span><br><span class="line">                .description(<span class="string">"本文档描述了课程中心微服务接口定义"</span>)</span><br><span class="line">                .version(<span class="string">"1.0"</span>)</span><br><span class="line">                .contact(<span class="keyword">new</span> Contact(<span class="string">"Song"</span>, <span class="string">"http://项目实际访问地址.com"</span>, <span class="string">"666666@qq.com"</span>))</span><br><span class="line">                .build();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>配置类中的信息显示在页面中：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201115180034982.png" alt="image-20201115180034982"></p><h2 id="4-引入service-base模块"><a href="#4-引入service-base模块" class="headerlink" title="4.引入service-base模块"></a>4.引入service-base模块</h2><p>去service模块中的pom文件，引入自己的service-base模块</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入自己写的service-base模块--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.songx64<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service-base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="5-编写文档说明注解"><a href="#5-编写文档说明注解" class="headerlink" title="5.编写文档说明注解"></a>5.编写文档说明注解</h2><p>EduTeacherController.java类中：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = "讲师管理控制器")</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping("/eduservice/edu-teacher")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EduTeacherController</span> </span>{</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EduTeacherService eduTeacherService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = "列出所有讲师")</span></span><br><span class="line">    <span class="meta">@GetMapping("/findAll")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;EduTeacher&gt; <span class="title">findAllTeacher</span><span class="params">()</span> </span>{</span><br><span class="line">        List&lt;EduTeacher&gt; list = eduTeacherService.list(<span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(value = "删除讲师", notes = "根据Id删除讲师")</span></span><br><span class="line">    <span class="meta">@DeleteMapping("/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">deleteTeacherById</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@ApiParam(name = "id", value = "讲师ID", required = true)</span></span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="meta">@PathVariable</span> String id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> eduTeacherService.removeById(id);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>新增了一个deleteTeacherById方法，用来测试。</p><p>同时一些Swagger的注解：<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201115175729745.png" alt="image-20201115175729745"></p><h2 id="6-测试"><a href="#6-测试" class="headerlink" title="6.测试"></a>6.测试</h2><p>最终进行测试，访问<a href="http://localhost:8001/swagger-ui.html">http://localhost:8001/swagger-ui.html</a></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201115174930198.png" alt="image-20201115174930198"></p><h1 id="错误记录"><a href="#错误记录" class="headerlink" title="错误记录"></a>错误记录</h1><h2 id="找不到同项目的包"><a href="#找不到同项目的包" class="headerlink" title="找不到同项目的包"></a>找不到同项目的包</h2><p>因为找不到包，从而没能扫描到swaggerConfig，显示：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201115180342063.png" alt="image-20201115180342063"></p><p>最终也没找到原因，只能用另外办法了：<br>在子项目中引入另一个子项目：</p><p>service-edu的pom.xml中，引入service_base模块</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service-edu<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.songx64<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>service_base<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>compile<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="swagger配置报错"><a href="#swagger配置报错" class="headerlink" title="swagger配置报错"></a>swagger配置报错</h2><p>太长的完整报错不贴了，主要就是：</p><blockquote><p>org.springframework.beans.factory.BeanDefinitionStoreException: </p><p>Failed to process import candidates for configuration class <strong>[springfox.documentation.swagger2.configuration.Swagger2DocumentationConfiguration];</strong> </p><p>nested exception is java.io.FileNotFoundException: <strong>class path resource [com/google/common/base/Supplier.class] cannot be opened because it does not exist</strong></p></blockquote><p>删除了service目录下的swagger依赖：</p><p>service的pom.xml中，删除：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h1><h2 id="pom文件中的-lt-scope-gt-标签"><a href="#pom文件中的-lt-scope-gt-标签" class="headerlink" title="pom文件中的<scope>标签"></a>pom文件中的&lt;scope&gt;标签</h2><ul><li><p>对于scope=compile的情况（默认scope),<br>也就是说这个项目在编译，测试，运行阶段都需要这个artifact对应的jar包在classpath中。</p></li><li><p>而对于scope=provided的情况，则可以认为这个provided是目标容器已经provide这个artifact。<br>换句话说，它只影响到编译，测试阶段。<br>在编译测试阶段，我们需要这个artifact对应的jar包在classpath中，<br>而在运行阶段，假定目标的容器（比如我们这里的liferay容器）已经提供了这个jar包，所以无需我们这个artifact对应的jar包了。</p></li></ul><p>总之就是，provided不会把jar包打进去。</p><blockquote><p>比如父级已经把这个包打进去了，在子项目中就可以用provided，子项目的包不会被打进去，这样就可以避免包冲突了。</p></blockquote><h1 id="08-统一结果返回"><a href="#08-统一结果返回" class="headerlink" title="08.统一结果返回"></a>08.统一结果返回</h1><h2 id="为啥"><a href="#为啥" class="headerlink" title="为啥"></a>为啥</h2><p>项目中我们会将响应封装成json返回，一般我们会将所有接口的数据格式统一， 使==前端(iOS Android, Web)==对数据的操作更一致、轻松。</p><p>也就是说，后端和显示是无关的。前端接受数据就可以。后端就是提供数据的。</p><p>一般会包含状态码、返回消息、数据这几部分内容。</p><p>在这里，我们定义统一结果：</p><figure class="highlight json"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">{</span><br><span class="line">  <span class="attr">"success"</span>: 布尔, <span class="comment">//响应是否成功</span></span><br><span class="line">  <span class="attr">"code"</span>: 数字, <span class="comment">//响应码</span></span><br><span class="line">  <span class="attr">"message"</span>: 字符串, <span class="comment">//返回消息</span></span><br><span class="line">  <span class="attr">"data"</span>: HashMap <span class="comment">//返回数据，放在键值对中</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h2 id="咋整"><a href="#咋整" class="headerlink" title="咋整"></a>咋整</h2><ol><li>在common下创建子模块common_utils，新建包com.songx64.commonutils</li><li>新建接口ResultCode：</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ResultCode</span></span>{</span><br><span class="line">    <span class="comment">//成功</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer SUCCESS = <span class="number">20000</span>;</span><br><span class="line">    <span class="comment">//失败</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Integer ERROR = <span class="number">20001</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ol start="3"><li>新建结果类R</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">R</span></span>{</span><br><span class="line"><span class="comment">//四个属性</span></span><br><span class="line"><span class="meta">@ApiModelProperty(value = "是否成功")</span></span><br><span class="line"><span class="keyword">private</span> Boolean success;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty("状态码")</span></span><br><span class="line"><span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty("消息")</span></span><br><span class="line"><span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty("数据")</span></span><br><span class="line"><span class="keyword">private</span> HashMap&lt;String,Object&gt; data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//私有化构造方法，单例模式</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">R</span><span class="params">()</span></span>{}</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回函数</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><ul><li><a href="https://blog.csdn.net/u013126379/article/details/57463285">构造函数私有化1</a></li><li><a href="https://www.cnblogs.com/yanliang12138/p/9810472.html">构造函数私有化2</a></li><li><a href="https://www.cnblogs.com/yanliang12138/p/9810472.html">return this</a>：链式编程，R.ok().data(XXX).message(XXX)</li><li>Lombok支持链式编程，加注解@Accessors（chain=true）即可</li></ul></blockquote><h2 id="咋用"><a href="#咋用" class="headerlink" title="咋用"></a>咋用</h2><ol><li><p>引入模块，service，pom.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.songx64<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>common_utils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></li><li><p>修改Controller里的方法，返回结果改为R<br>com\songx64\eduservice\controller\EduTeacherController.java</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">   </span><br></pre></td></tr></tbody></table></figure></li><li><p>运行，进入swagger查看</p></li><li><p>有个TODO，删除的地方有问题</p></li></ol><h1 id="后台讲师管理模块"><a href="#后台讲师管理模块" class="headerlink" title="后台讲师管理模块"></a>后台讲师管理模块</h1><h2 id="1-分页查询"><a href="#1-分页查询" class="headerlink" title="1.分页查询"></a>1.分页查询</h2><h3 id="1-1-配置分页插件"><a href="#1-1-配置分页插件" class="headerlink" title="1.1 配置分页插件"></a>1.1 配置分页插件</h3><p>com.songx64.eduservice.config.EduConfig类中，粘贴mybatis的config配置插件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EduConfig</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 逻辑删除插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="1-2-编写讲师分页查询接口的方法"><a href="#1-2-编写讲师分页查询接口的方法" class="headerlink" title="1.2 编写讲师分页查询接口的方法"></a>1.2 编写讲师分页查询接口的方法</h3><p>主要过程就是：</p><ol><li>新建一个Page对象</li><li>调用page方法查询到Page对象中</li><li>从Page对象中取出数据，返回</li></ol><p>EduTeacherController类中的分页查询方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 3.分页查询方法</span></span><br><span class="line"><span class="comment">     * current 当前页</span></span><br><span class="line"><span class="comment">     * limit 每页记录数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@ApiOperation("分页查询讲师")</span></span><br><span class="line"><span class="meta">@GetMapping("pageTeacher/{current}/{limit}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">pageListTeacher</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@ApiParam(name = "current", value = "当前页数")</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@PathVariable</span> Long current,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@ApiParam(name = "limit", value = "每页记录数")</span></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="meta">@PathVariable</span> Long limit)</span> </span>{</span><br><span class="line">    <span class="comment">//创建Page对象，传入参数当前页1和每页记录数3</span></span><br><span class="line">    Page&lt;EduTeacher&gt; pageTeacher = <span class="keyword">new</span> Page&lt;&gt;(current, limit);</span><br><span class="line">    <span class="comment">//调用方法实现分页:分页对象，条件</span></span><br><span class="line">    <span class="comment">//封装自带的page方法，直接分页查询，结果放入Page对象中</span></span><br><span class="line">    eduTeacherService.page(pageTeacher, <span class="keyword">null</span>);</span><br><span class="line">    <span class="comment">//从Page对象中得到查询结果,total是总条数</span></span><br><span class="line">    List&lt;EduTeacher&gt; records = pageTeacher.getRecords();</span><br><span class="line">    Long total = pageTeacher.getTotal();</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">"total"</span>, total).data(<span class="string">"rows"</span>, records);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>Page<eduteacher> pageTeacher = new Page&lt;&gt;(current, limit);    //新建对象</eduteacher></li><li>eduTeacherService.page(pageTeacher, null);//通过page方法查询，放入对象</li><li>List<eduteacher> records = pageTeacher.getRecords();//得到数据List</eduteacher></li><li>Long total = pageTeacher.getTotal(); //total是总条数</li></ul><h2 id="2-条件分页查询"><a href="#2-条件分页查询" class="headerlink" title="2.条件分页查询"></a>2.条件分页查询</h2><p>多条件分页查询</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210301105424957.png" alt="image-20210301105424957"></p><ol><li>新建VO对象 </li><li>新建查询方法(先写到Controller中,之后放到Service中)</li><li>查询方法中:<ol><li>创建Page对象</li><li>构造QueryWrapper查询条件</li><li>调用page查询</li><li>返回结果</li></ol></li></ol><h3 id="传入参数对象实现"><a href="#传入参数对象实现" class="headerlink" title="传入参数对象实现"></a>传入参数对象实现</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 4. 条件分页查询方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="meta">@GetMapping("pageTeacherCondition/{current}/{limit}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">pageTeacherCondition</span><span class="params">(<span class="meta">@ApiParam(name = "current", value = "当前页数")</span></span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="meta">@PathVariable</span> Long current,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="meta">@ApiParam(name = "limit", value = "每页记录数")</span></span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="meta">@PathVariable</span> Long limit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              EduTeacherQuery eduTeacherQuery)</span> </span>{</span><br><span class="line">    <span class="comment">//新建Page对象</span></span><br><span class="line">    Page&lt;EduTeacher&gt; pageTeahcer = <span class="keyword">new</span> Page&lt;&gt;(current, limit);</span><br><span class="line">    QueryWrapper&lt;EduTeacher&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line">    <span class="comment">//多条件查询，可以通过xml动态sql</span></span><br><span class="line">    <span class="comment">//这里单表可以直接通过判断拼接，条件值不为空就拼接条件</span></span><br><span class="line">    String name = eduTeacherQuery.getName();</span><br><span class="line">    Integer level = eduTeacherQuery.getLevel();</span><br><span class="line">    String begin = eduTeacherQuery.getBegin();</span><br><span class="line">    String end = eduTeacherQuery.getEnd();</span><br><span class="line">    <span class="comment">//StringUtils是springframework包中的字符串工具类</span></span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(name)) {</span><br><span class="line">        <span class="comment">//构造条件</span></span><br><span class="line">        wrapper.like(<span class="string">"name"</span>, name);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(level)) {</span><br><span class="line">        wrapper.eq(<span class="string">"level"</span>, level);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(begin)) {</span><br><span class="line">        wrapper.ge(<span class="string">"gmt_create"</span>, begin);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">if</span> (!StringUtils.isEmpty(end)) {</span><br><span class="line">        wrapper.le(<span class="string">"gmt_create"</span>, end);</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//条件查询</span></span><br><span class="line">    eduTeacherService.page(pageTeahcer, wrapper);</span><br><span class="line"></span><br><span class="line">    Long total = pageTeahcer.getTotal();</span><br><span class="line">    List&lt;EduTeacher&gt; records = pageTeahcer.getRecords();</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">"total"</span>, total).data(<span class="string">"rows"</span>, records);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210301114457743.png" alt="image-20210301114457743"></p><h3 id="关于-RequestBody和-ResponseBody注解"><a href="#关于-RequestBody和-ResponseBody注解" class="headerlink" title="关于@RequestBody和@ResponseBody注解"></a>关于@RequestBody和@ResponseBody注解</h3><ul><li>@ResponseBody是用来返回数据的,返回JSON格式的数据;</li><li>@RequestBody是使用JSON来传递数据,把传过来的数据封装到对象中；</li></ul><p>上面的方法如果要使用@ResponseBody注解的话,要改为Post方式进行请求,Get方式不行</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping("pageTeacherCondition/{current}/{limit}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">pageTeacherCondition</span><span class="params">(<span class="meta">@ApiParam(name = "current", value = "当前页数")</span></span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="meta">@PathVariable</span> Long current,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="meta">@ApiParam(name = "limit", value = "每页记录数")</span></span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="meta">@PathVariable</span> Long limit,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="meta">@RequestBody(required = false)</span> EduTeacherQuery eduTeacherQuery)</span> </span>{</span><br><span class="line">……</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里要加上required=false，保证为空的时候也能传入；</p><p>改为@ResponeBody注解后，传入的是一个JSON字符串：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210301114301637.png" alt="image-20210301114301637"></p><blockquote><p>提醒：面试时候可能问问题“你用过什么注解”，这里最好不要说太基础的Controller之类的，可以提一嘴刚才这两个以及他们的区别之类的东西。</p></blockquote><h3 id="相关知识-关于VO和DTO"><a href="#相关知识-关于VO和DTO" class="headerlink" title="相关知识:关于VO和DTO"></a>相关知识:关于VO和DTO</h3><blockquote><p>关于VO和DTO：<a href="https://blog.csdn.net/zjrbiancheng/article/details/6253232">https://blog.csdn.net/zjrbiancheng/article/details/6253232</a></p><ul><li>VO（View Object）：视图对象，用于展示层，它的作用是把某个指定页面（或组件）的所有数据封装起来。</li><li>DTO（Data Transfer Object）：数据传输对象，这个概念来源于J2EE的设计模式，原来的目的是为了EJB的分布式应用提供粗粒度的数据实体，以减少分布式调用的次数，从而提高分布式调用的性能和降低网络负载，但在这里，我泛指用于展示层与服务层之间的数据传输对象。</li></ul><h4 id="VO与DTO的区别"><a href="#VO与DTO的区别" class="headerlink" title="VO与DTO的区别"></a>VO与DTO的区别</h4><p>​       大家可能会有个疑问（在笔者参与的项目中，很多程序员也有相同的疑惑）：既然DTO是展示层与服务层之间传递数据的对象，为什么还需要一个VO呢？对！对于绝大部分的应用场景来说，DTO和VO的属性值基本是一致的，而且他们通常都是POJO，因此没必要多此一举，但不要忘记这是实现层面的思维，对于设计层面来说，概念上还是应该存在VO和DTO，因为两者有着本质的区别，DTO代表服务层需要接收的数据和返回的数据，而VO代表展示层需要显示的数据。<br>​       用一个例子来说明可能会比较容易理解：例如服务层有一个getUser的方法返回一个系统用户，其中有一个属性是gender(性别)，对于服务层来说，它只从语义上定义：1-男性，2-女性，0-未指定，而对于展示层来说，它可能需要用“帅哥”代表男性，用“美女”代表女性，用“秘密”代表未指定。说到这里，可能你还会反驳，在服务层直接就返回“帅哥美女”不就行了吗？对于大部分应用来说，这不是问题，但设想一下，如果需求允许客户可以定制风格，而不同风格对于“性别”的表现方式不一样，又或者这个服务同时供多个客户端使用（不同门户），而不同的客户端对于表现层的要求有所不同，那么，问题就来了。再者，回到设计层面上分析，从职责单一原则来看，服务层只负责业务，与具体的表现形式无关，因此，它返回的DTO，不应该出现与表现形式的耦合。<br>​       理论归理论，这到底还是分析设计层面的思维，是否在实现层面必须这样做呢？一刀切的做法往往会得不偿失，下面我马上会分析应用中如何做出正确的选择。</p><h4 id="VO与DTO的应用"><a href="#VO与DTO的应用" class="headerlink" title="VO与DTO的应用"></a>VO与DTO的应用</h4><p>​       上面只是用了一个简单的例子来说明VO与DTO在概念上的区别，本节将会告诉你如何在应用中做出正确的选择。<br>​       在以下才场景中，我们可以考虑把VO与DTO二合为一（注意：是实现层面）：<br>当需求非常清晰稳定，而且客户端很明确只有一个的时候，没有必要把VO和DTO区分开来，这时候VO可以退隐，用一个DTO即可，为什么是VO退隐而不是DTO？回到设计层面，服务层的职责依然不应该与展示层耦合，所以，对于前面的例子，你很容易理解，DTO对于“性别”来说，依然不能用“帅哥美女”，这个转换应该依赖于页面的脚本（如JavaScript）或其他机制（JSTL、EL、CSS）<br>即使客户端可以进行定制，或者存在多个不同的客户端，如果客户端能够用某种技术（脚本或其他机制）实现转换，同样可以让VO退隐</p><h4 id="以下场景需要优先考虑VO、DTO并存："><a href="#以下场景需要优先考虑VO、DTO并存：" class="headerlink" title="以下场景需要优先考虑VO、DTO并存："></a>以下场景需要优先考虑VO、DTO并存：</h4><p>上述场景的反面场景<br>因为某种技术原因，比如某个框架（如Flex）提供自动把POJO转换为UI中某些Field时，可以考虑在实现层面定义出VO，这个权衡完全取决于使用框架的自动转换能力带来的开发和维护效率提升与设计多一个VO所多做的事情带来的开发和维护效率的下降之间的比对。<br>如果页面出现一个“大视图”，而组成这个大视图的所有数据需要调用多个服务，返回多个DTO来组装（当然，这同样可以通过服务层提供一次性返回一个大视图的DTO来取代，但在服务层提供一个这样的方法是否合适，需要在设计层面进行权衡）。</p></blockquote><h2 id="3-添加讲师"><a href="#3-添加讲师" class="headerlink" title="3.添加讲师"></a>3.添加讲师</h2><h3 id="3-1-修改自动填充时间"><a href="#3-1-修改自动填充时间" class="headerlink" title="3.1 修改自动填充时间"></a>3.1 修改自动填充时间</h3><p>1.实体类EduTeacher上面加注解@TableField，插入时和更新时填充</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModelProperty(value = "创建时间")</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date gmtCreate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ApiModelProperty(value = "更新时间")</span></span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date gmtModified;</span><br></pre></td></tr></tbody></table></figure><p>2.自定义实现接口功能，自动填充</p><p>封装至common模块，servicebase下，新建handler包，新建MyMetaObjectHandler类</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songx64.servicebase.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2021/3/1,下午 3:35</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> SongX64</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>{</span><br><span class="line">        <span class="comment">//这里传入的是属性名称，不是字段名称</span></span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"gmtCreate"</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"gmtModified"</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"gmtModified"</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这里大概就是通过@TableFiled注解，然后通过MyMetaObjectHandler处理填充值</p><blockquote><p>Mybatis-Plus文档：<a href="https://baomidou.com/guide/auto-fill-metainfo.html">https://baomidou.com/guide/auto-fill-metainfo.html</a></p></blockquote><h3 id="3-2-添加讲师方法"><a href="#3-2-添加讲师方法" class="headerlink" title="3.2 添加讲师方法"></a>3.2 添加讲师方法</h3><p>wdnmd，修改实体类之后Jrebel热部署不管用？</p><p>遇到问题：说是id字段的类型不匹配，dismatch。修改重启换版本之后，不用Jrebel运行而是用原来的运行，可以了就。草</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 5.添加讲师方法</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line"><span class="meta">@PostMapping("addTeacher")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">addTeacher</span><span class="params">(<span class="meta">@RequestBody</span> EduTeacher eduTeacher)</span> </span>{</span><br><span class="line">    <span class="keyword">boolean</span> save = eduTeacherService.save(eduTeacher);</span><br><span class="line">    <span class="keyword">if</span> (save) {</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>tmd为啥行了呢？为啥不行呢？</p><h2 id="4-修改讲师"><a href="#4-修改讲师" class="headerlink" title="4.修改讲师"></a>4.修改讲师</h2><h3 id="4-1-根据Id来查询讲师"><a href="#4-1-根据Id来查询讲师" class="headerlink" title="4.1 根据Id来查询讲师"></a>4.1 根据Id来查询讲师</h3><p>这个没啥好说的，直接调用就完事了。不过要回忆一下这个@PathVariable注解。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 6.根据讲师id进行查询</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@ApiOperation("根据Id查询讲师")</span></span><br><span class="line"><span class="meta">@GetMapping("getTeacher/{id}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">getTeacher</span><span class="params">(<span class="meta">@PathVariable</span> String id)</span> </span>{</span><br><span class="line">    EduTeacher eduTeacher = eduTeacherService.getById(id);</span><br><span class="line">    <span class="keyword">return</span> R.ok().data(<span class="string">"teacher"</span>, eduTeacher);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-2-根据ID修改讲师"><a href="#4-2-根据ID修改讲师" class="headerlink" title="4.2 根据ID修改讲师"></a>4.2 根据ID修改讲师</h3><p>这里用了两种方式，一种Post请求，一种Put请求</p><p>Post请求方式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 7.1 讲师修改功能</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@ApiOperation("根据ID修改讲师，Post方法")</span></span><br><span class="line"><span class="meta">@PostMapping("updateTeacher")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">updateTeacher</span><span class="params">(<span class="meta">@RequestBody</span> EduTeacher eduTeacher)</span> </span>{</span><br><span class="line">    <span class="keyword">boolean</span> flag = eduTeacherService.updateById(eduTeacher);</span><br><span class="line">    <span class="keyword">if</span> (flag) {</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>Put请求方式</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 7.2 Put方式修改讲师</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="meta">@ApiOperation("根据ID修改讲师，Put方法")</span></span><br><span class="line"><span class="meta">@PutMapping("{id}")</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> R <span class="title">updateTeacherById</span><span class="params">(<span class="meta">@PathVariable</span> String id, <span class="meta">@RequestBody</span> EduTeacher eduTeacher)</span> </span>{</span><br><span class="line">    eduTeacher.setId(id);</span><br><span class="line">    <span class="keyword">boolean</span> flag = eduTeacherService.updateById(eduTeacher);</span><br><span class="line">    <span class="keyword">if</span> (flag) {</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    } <span class="keyword">else</span> {</span><br><span class="line">        <span class="keyword">return</span> R.error();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="相关知识-关于Put和Post"><a href="#相关知识-关于Put和Post" class="headerlink" title="相关知识:关于Put和Post"></a>相关知识:关于Put和Post</h3><blockquote><p><a href="https://blog.csdn.net/qq_36183935/article/details/80570062">https://blog.csdn.net/qq_36183935/article/details/80570062</a></p><p>PUT和POST</p><p>PUT和POS都有更改指定URI的语义.但PUT被定义为idempotent的方法，POST则不是.idempotent的方法:如果一个方法重复执行</p><p>多次，产生的效果是一样的，那就是idempotent的。也就是说：</p><p>PUT请求：如果两个请求相同，后一个请求会把第一个请求覆盖掉。（所以PUT用来改资源）</p><p>Post请求：后一个请求不会把第一个请求覆盖掉。（所以Post用来增资源）</p></blockquote><blockquote><p><a href="https://www.zhihu.com/question/48482736">https://www.zhihu.com/question/48482736</a></p><p>一个例子是网不好的时候，post提交后没收到响应，于是客户端再次尝试提交，成功后刷新看到新建了两条资源，如果用put的话就不会出现这样的情况。所以尽量使用put去代替post</p></blockquote></dependencies>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> 常用组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用文本聚类自动构建多方面的用户画像并将其应用于专家发现和过滤问题</title>
      <link href="2020/11/04/1004%E4%BD%BF%E7%94%A8%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%A4%9A%E9%9D%A2%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B9%B6%E5%B0%86%E5%85%B6%E5%BA%94%E7%94%A8%E4%BA%8E%E4%B8%93%E5%AE%B6%E6%8E%A8%E8%8D%90%E5%92%8C%E8%BF%87%E6%BB%A4%E9%97%AE%E9%A2%98/"/>
      <url>2020/11/04/1004%E4%BD%BF%E7%94%A8%E6%96%87%E6%9C%AC%E8%81%9A%E7%B1%BB%E8%87%AA%E5%8A%A8%E6%9E%84%E5%BB%BA%E5%A4%9A%E9%9D%A2%E7%94%A8%E6%88%B7%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%B9%B6%E5%B0%86%E5%85%B6%E5%BA%94%E7%94%A8%E4%BA%8E%E4%B8%93%E5%AE%B6%E6%8E%A8%E8%8D%90%E5%92%8C%E8%BF%87%E6%BB%A4%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="使用文本聚类自动构建多方面的用户画像并将其应用于专家发现和过滤问题"><a href="#使用文本聚类自动构建多方面的用户画像并将其应用于专家发现和过滤问题" class="headerlink" title="使用文本聚类自动构建多方面的用户画像并将其应用于专家发现和过滤问题"></a>使用文本聚类自动构建多方面的用户画像并将其应用于专家发现和过滤问题</h1><p>2019年文章</p><p>关键字：</p><ul><li>聚类 </li><li>基于内容的推荐 </li><li>专家发现</li><li> 过滤</li><li> 用户分析</li></ul><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>在当今的信息时代，我们不仅对访问多媒体对象（如文档，视频等）感兴趣，而且还对寻找专业专家，人物或名人（可能出于专业需求或娱乐目的）感兴趣。</p><p>信息访问系统需要能够提取和利用有关此类个体的各种信息源（通常为文本格式），并通常以用户画像/用户数据/配置文件的形式以合适的方式表示它们。</p><p>在本文中，我们通过<strong>聚类专家文本源以构建画像</strong>并捕获专家感兴趣的不同隐藏主题，从机器学习的角度解决了基于画像的<strong>专家推荐和文档过滤</strong>的问题。然后，专家将通过多方面画像来表示。</p><p>我们的实验表明，这是提高专家发现和文档过滤性能的有效技术。</p><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h2><h3 id="背景问题："><a href="#背景问题：" class="headerlink" title="背景问题："></a>背景问题：</h3><p>万维网的内容极其广泛多样，因此一个常见的搜索任务是<strong>寻找能够帮助我们解决特定问题的人</strong>。</p><blockquote><p>例如，我们可以寻找医生来治疗特定的疾病，寻找建筑工人来修理漏水的屋顶，或者寻找政治家来讨论当地的问题，以便找到解决方案。</p></blockquote><p>这种类型的信息搜索是建立在更广泛的<strong>专家发现领域</strong>[1]的基础上的，用户可以在给定的领域找到专家。</p><h3 id="存储表示：文档"><a href="#存储表示：文档" class="headerlink" title="存储表示：文档"></a>存储表示：文档</h3><p>为了使这项任务成功，<strong>专家有必要以某种方式在检索系统中来进行表示</strong>。最专业和准确的方法是考虑专家的个人资料，因为这些资料存储了最具代表性的关键词来定义他们的专业领域。</p><blockquote><p>这些简介将通过考虑最能代表专家的文件来建立:</p><p>例如，对于科学家来说，这将是他们的期刊或会议出版物；对于作家来说，他们出版的书；对于程序员来说，他们写的源代码；对于律师来说，他们审理的法庭案件；对于政治家来说，他们在议会会议上的干预。</p></blockquote><p>有了所有这些文档，系统可以通过为专家的专业领域选择最佳<strong>关键词</strong>来自动建立专家档案。然后，专家查找系统将使用该信息源来匹配以查询形式表示的用户信息需求。</p><h3 id="查找问题：两种"><a href="#查找问题：两种" class="headerlink" title="查找问题：两种"></a>查找问题：两种</h3><p>基本上有两个主要问题与查找使用画像的相关人员有关:</p><ul><li>给定一组专家或专业人员，问题在于返回最适合<strong>用户所表达需求</strong>的人员（通常以短查询的形式）。<br>在这种情况下，只会<strong>推荐排名最高的</strong>。这被认为是专家发现的问题，或更广泛地说是==<strong>基于内容的推荐</strong>==[2]。<br>在这种情况下，我们只需要排名最高的专家，因为这些专家与查询最相关。</li><li>当==新文档==第一次到达系统时（以长查询为模型的情况），目的是<strong>确定应由哪些专家接收该文档</strong>。<br>这是一个==过滤问题==[3]，此处的目的是找到每个相关人员，而不考虑其排名。</li></ul><p>尽管这两个问题都可以看作是同一枚硬币的“两面” [4]，并且可以用相似的方法解决，但在本文中，我们将证明在它们的配方和解决方案方面确实存在差异。</p><h3 id="问题：为什么要多面画像"><a href="#问题：为什么要多面画像" class="headerlink" title="问题：为什么要多面画像"></a>问题：为什么要多面画像</h3><p>在本文中，我们将认为专家的专业领域通常<strong>不限于单个主题</strong>：</p><blockquote><p>例如，科学家虽然专攻信息检索，但也可能会沿着不同的研究方向发表论文（例如检索模型，个性化，推荐系统等）或政客可以坐在三个不同的议会委员会（例如，农业，环境和经济）中，并与这些领域有联系。</p></blockquote><p>如果从所有专家的文档中建立一个个人资料，则他们所有感兴趣的主题都将混在其中。这可能导致较一般的主题优先于较特殊的主题，因此，个人资料无法正确反映专家的兴趣，并且可能意味着在搜索特定主题时找不到这些兴趣。</p><p>因此，一种解决方案可能是认为==用户画像不是整体的==，而是<strong>包含其他用户画像或子用户画像的多面结构</strong>，每个用户画像或子用户画像都与不同的主题相关。这样，上面的政治家将由三个子用户画像代表。</p><h3 id="举例：议会会员"><a href="#举例：议会会员" class="headerlink" title="举例：议会会员"></a>举例：议会会员</h3><p>沿着这些思路，本文的作者进行了研究，以在议会中寻找相关人员。</p><p>在最初的方法中，从国会议员的演说中为国会议员建立了简介，然后可用于查找相关国会议员[5]。</p><p>这些画像是通过考虑他们所有的处置措施（intervention？）来创建的，为每一个议员建立一个整体的用户画像。</p><p>由于国会议员的许多演讲来自专门的议会委员会，因此在复合画像中被认为是，根据国会议员对她/他所属委员会的干预，每个国会议员可以拥有各种子画像。</p><p>本文证明，从个人档案性能和可解释性两方面来看，这种组织用户画像的方法对于推荐问题而言更为有趣。</p><p>在本文中，我们走得更远，因为我们的目标是==确定使用机器学习技术（更具体地说是集群）是否可以自动发现用户感兴趣的不同主题并在此基础上构建子画像==。</p><p>如果没有明确的文档<strong>关联</strong>，或者如果没有文档的关联，<strong>自动发现主题（组）</strong>将特别有用，因为它不是推荐或筛选任务中最佳性能的最佳选择（主题应该呗划分和一起分组在相同的子画像中），这在议会上下文中非常普遍。</p><blockquote><p> 例如，如果我们考虑一个出于政治原因而成立的议会委员会，以同时涵盖农业，畜牧业和渔业的三个领域，那么对该议员的所有议员干预都将包含在同一子用户画像中，尽管它们可能代表不同的主题。</p></blockquote><p>此外，委员会的结构通常随<strong>任期</strong>而变化，因此，根据这些委员会将国会议员的干预归类，可以在任何给定时间提供取决于组织政治决策的主题分布。</p><p>最后，通过考虑从上一学期学到的集群主题，可以减少任期开始时的冷启动问题，即尚无委员会存在。</p><p>在本文中，我们将展示==聚类==是一种合适的技术，该技术可用于从文档中发现隐藏的主题并创建表示用户兴趣的复合用户画像。</p><p>我们的实验结果还表明，聚类技术如何成功地应用于<strong>专家推荐</strong>和<strong>过滤问题</strong>，以构建<strong>多方面的用户画像</strong>，其中每个<strong>子用户画像</strong>均从与用户相关的文档中获取并分组在一起。可以从统一的角度解决这两个问题，因为从概念上讲，<strong>在两种情况下，给定查询，结果都是要推荐或推荐的专家用户的排名。</strong></p><p>我们还研究了将聚类应用于文档集的两种方法：</p><ul><li>一种全局方法，其中通过考虑所有专家的文档进行聚类；</li><li>局部方法，只对每个专家的文档进行聚类。</li></ul><h3 id="文章结构"><a href="#文章结构" class="headerlink" title="文章结构"></a>文章结构</h3><p>为了描述如何将聚类应用于这些问题及其性能，本文的组织方式如下：</p><ul><li>第2节介绍了有关用户用户画像和聚类的介绍性信息，以便对本文的其余部分进行背景介绍。</li><li>第3节包含本文的核心，并描述了用于构建子用户画像的聚类建议。</li><li>第4节介绍了实验设计和相应的结果，并讨论了主要发现；</li><li>第5节回顾了现有技术，提出了类似的方法，并通过强调我们的贡献来研究这些方法与我们的建议之间的区别；</li><li>最后，最后一部分概述了我们的主要结论和未来的研究方向。</li></ul><h2 id="2-背景知识"><a href="#2-背景知识" class="headerlink" title="2. 背景知识"></a>2. 背景知识</h2><p>鉴于本文的背景是将用户画像的构造和使用，信息访问以及聚类方法的应用结合起来以更准确地组织此类用户画像，</p><p>在本节中，我们将介绍与这两个主题及其组合有关的一些概念和技术。</p><p>第5节将详细介绍现有技术。</p><h3 id="2-1-用户画像"><a href="#2-1-用户画像" class="headerlink" title="2.1 用户画像"></a>2.1 用户画像</h3><h4 id="用户画像概念"><a href="#用户画像概念" class="headerlink" title="用户画像概念"></a>用户画像概念</h4><p>用户画像可以==定义==为用户模型的表示，存储用户的基本信息（例如年龄，性别或位置），知识，背景和技能，行为和互动，上下文信息，兴趣或偏好和意图[7,8]  。</p><p>学习用户画像的过程称为用户画像构建：</p><ul><li>它基于==显式==收集信息（用户明确表达其兴趣或偏好[9]）</li><li>==隐式==收集信息（系统负责通过基本分析浏览数据来自动检测用户感兴趣的信息项）。</li></ul><p>本文关注的是==<strong>主要表达兴趣的个人资料</strong>==，因此需要一种有效的方法来有效地表示他们的兴趣。  </p><h4 id="用户画像的表示"><a href="#用户画像的表示" class="headerlink" title="用户画像的表示"></a>用户画像的表示</h4><h5 id="机器学习，关键词方法"><a href="#机器学习，关键词方法" class="headerlink" title="机器学习，关键词方法"></a>机器学习，关键词方法</h5><p>Gauch等人在[9]中认为概况通常可以==用关键词，语义网络或概念来表示用户画像==。</p><p>同时，基于<strong>机器学习和数据挖掘的智能技术</strong>也被用来代表用户模型[7]。他们专注于<strong>基于关键字的用户画像</strong>，存储从用于构建它们的来源（文档，网页，任何类型的项目的文字描述等）中<strong>提取的相关单词</strong>的列表。对这些关键词或术语进行加权以反映其对用户的重要性，并且通常建模为加权向量（例如，通过使用TF–IDF加权方案[2]）。</p><h5 id="抽象概念"><a href="#抽象概念" class="headerlink" title="抽象概念"></a>抽象概念</h5><p>兴趣也可以表达为<strong>抽象概念</strong>而不是关键字。在第5节中将讨论通过组合不同元素（例如，主题和关键字）构建的更详细的用户画像表示形式。</p><p>尽管可以获得基于知识的用户画像（可能是用户兴趣的人类可读表示形式），但它们无法成功推荐或过滤问题，<strong>尤其是涉及代表演讲和口头讨论的文档时。</strong></p><p>在计算机科学的广泛领域中，用户画像被认为是用户精准营销的基本工具[8]，更具体地说，[7]指出了与信息访问相关的各个领域。考虑到本文的背景，这些包括个性化信息检索[10]，推荐系统[11]和专家发现[12]。</p><h3 id="2-2-聚类"><a href="#2-2-聚类" class="headerlink" title="2.2 聚类"></a>2.2 聚类</h3><p>从一般的角度来看，聚类分析的主要目的是试图==在未标记数据集的实例上找到一个通用结构，以便将它们分成具有相似特征的组（集群）==[13]。</p><h4 id="聚类方法"><a href="#聚类方法" class="headerlink" title="聚类方法"></a>聚类方法</h4><p>在所有现有的各种聚类技术中[14-16]，我们应该强调两个主要的族。</p><hr><p>其中第一个是<strong>基于连接的聚类或基于层次聚类</strong>[13,17-19]。</p><p>这将构建一个距离树（或树状图），以表示以下事实：同一分支中的项目比其他分支中的项目根据其接近程度更相似。</p><p>根据树状图的构建方式，第一个家族分为两个不同的类别：</p><ul><li><p>凝聚方法[20]，其中每个实例在开始时都属于一个独立的集群，而成对的相似集群以与凝聚相同的方式递归组合嵌套算法（AGNES，[13]）</p><blockquote><p>凝聚层次聚类：AGNES算法(自底向上)<br>首先将每个对象作为一个簇，然后合并这些原子簇为越来越大的簇，直到某个终结条件被满足</p></blockquote></li><li><p>分裂方法[21]，其中所有实例均始于一个独特的簇，该簇按照与分裂分析聚类类似的相似性，根据相似性递归分为两个不同的组（例如DIANA  [13]） 。</p><blockquote><p>分裂层次聚类：DIANA算法(自顶向下)<br>首先将所有对象置于一个簇中，然后逐渐细分为越来越小的簇，直到达到了某个终结条件。</p></blockquote></li></ul><hr><p>第二类是<strong>基于质心的聚类</strong>。</p><p>其中，不同的聚类围绕一个中间点成形，该中间点不一定是数据集的实例，并且每个项目被分配给中间点在附近的聚类[22，23]。</p><p>我们将着重于两种不同的方法来比较不同方法中的数据行为。</p><p><strong>K-Means (分散性聚类)</strong> [24，25]算法通过将n个实例分成K个不同的组，并将每个实例迭代地分配给具有最近平均值的组，并在每次迭代后重新计算组平均值点来工作。</p><p><strong>PAM</strong>  [13，26]算法函数也与前一个相似，尽管PAM中聚类的中点是代表聚类中值的一个实例。</p><blockquote><p><a href="https://blog.csdn.net/sinat_19596835/article/details/78303744">K-means和PAM聚类算法Python实现及对比</a></p><ul><li><p>K-means（K均值划分）聚类</p></li><li><p>PAM（Partition Around Medoids）是K-medoid（K中心点划分）的基础算法</p></li></ul></blockquote><blockquote><p>K近邻与K-means算法区别</p><p>K近邻是一种分类算法，属于有监督范围，需要样本标签；<br>而K-means是无监督学习算法，属于聚类</p><ul><li><p>K近邻的算法流程：<br>① 确定计算点与各分类点的距离；<br>②选取K个机理最近的点<br>③选取K个点中，属于某一类点数最多的类作为归类点</p></li><li><p>K-means算法的流程：<br>①确定K个聚类中心<br>②针对某一个计算点，计算其与每个聚类中心的距离，选取距离最小聚类类别，将该点判为该聚类。<br>③利用均值重新计算该聚类的中心。返回新的聚类</p></li></ul></blockquote><h4 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h4><p>除了这组经典的聚类方法之外，我们可以在文献中找到其他技术，这些技术并不完全是聚类算法，而是试图捕捉数据的<strong>潜在语义</strong>，并且可以适应或应用于这个问题。</p><p>在文本文档集合的上下文中，第一个例子是潜在狄利克雷分配(LDA)  [27，28]，这是一种主要用于自然语言处理的算法。LDA是一个三层层次的贝叶斯模型。它从文档集合中找到<strong>潜在的主题</strong>，并为每个文档分配主题的概率分布以及每个主题的术语的概率分布。</p><p>另一个例子是自组织特征映射(SOM)，这是一个有效的工具，通过将数据的<strong>维度减少到低维度</strong>(通常是二维)映射来提供高维空间的数据可视化。SOM实现了一个人工神经网络，该网络使用无监督数据集进行训练，目标是<strong>浓缩训练集的所有信息</strong>，同时保留数据之间最重要的拓扑和度量关系，创建输入空间的某种抽象[29]。</p><blockquote><p><a href="https://blog.csdn.net/weixin_38347387/article/details/80342662">SOM算法简介</a><br>SOM是一类“无监督学习”模型，一般的用法是将高维的input数据在低维的空间表示[1]，因此SOM天然是一种降维方法。除了降维，SOM还可以用于数据可视化，以及聚类等应用中。</p></blockquote><h4 id="总结表"><a href="#总结表" class="headerlink" title="总结表"></a>总结表</h4><p>表1总结了所考虑的六种算法的主要特征。关于许多聚类算法的更详细的研究，包括它们的优点和缺点，见[30]。</p><blockquote><p>表1 所考虑算法的主要特征。<br>    | 算法    | 系列     | 类型       |<br>    | ——- | ——– | ———- |<br>    | AGNES   | 层次     | 聚集       |<br>    | DIANA   | 层次     | 划分       |<br>    | K-MEANS | 基于质心 | 基于均值   |<br>    | PAM     | 基于质心 | 基于中值   |<br>    | LDA     | 主题模型 | 贝叶斯网络 |<br>    | SOM     | 神经网络 | 竞争学习   |</p></blockquote><h4 id="聚类的类别个数"><a href="#聚类的类别个数" class="headerlink" title="聚类的类别个数"></a>聚类的类别个数</h4><p>在数据聚类分析中，一个重要的问题是<strong>建立聚类的个数以及如何计算</strong>。</p><p>有许多方法可以估计最适合数据集的聚类数。</p><p>在众所周知的问题中，很常见的是<strong>自然地确定聚类的数量</strong>，以便获得定义明确的组的数量，但是在其他情况下，这是非常困难的，因为没有关于这个数量的线索。</p><p>更具体地说，<strong>在文本数据库中，确定聚类数的另一种方法是考虑n(文档总数)、m(术语总数)和t(相应文档术语矩阵中非零条目的数量)的值</strong>。然后将<strong>簇数k定义为k  = mn/t</strong> [31]。确定该参数值的另一个突出方法是用一般有效的方法<strong>√n/2</strong> [13]计算。</p><h4 id="聚类的评估"><a href="#聚类的评估" class="headerlink" title="聚类的评估"></a>聚类的评估</h4><p>关于聚类过程质量的评估，典型的评估措施试图最大化聚类内的相似性，即放置在同一聚类中的文档必须非常相似，并且最小化每个聚类间的相似性，即放置在不同聚类中的文档必须非常不相似。</p><blockquote><p>同类紧密程度：同类内之间，其中每个文档之间相似性最大</p><p>类间分散程度：类与类之间，每个类之间的相似性最小</p></blockquote><p>这就是众所周知的<strong>轮廓系数</strong>[32]的情况，它计算给定对象与最近簇的对象的平均距离，并从其自身簇中减去对象相对于元素的平均距离(所有对象的平均距离)。</p><blockquote><p><a href="https://blog.csdn.net/wangxiaopeng0329/article/details/53542606">聚类评估算法-轮廓系数（Silhouette Coefficient ）</a></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/643534-20180806003425095-366653197.png" alt="img"><br>o与o所属的簇内其他对象之间的平均距离a(o):</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/643534-20180806003305230-1291457275.png" alt="img"></p><p>b(o)是o到不包含o的所有簇的最小平均距离：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/643534-20180806003351617-1844924092.png" alt="img"></p><p>轮廓系数的值在-1和1之间。(1好，-1不好)</p><p>当o的轮廓系数值接近1时，包含o的簇是紧凑的，并且o远离其他簇，这是一种可取的情况。</p><p>当轮廓系数的值为负时，这意味在期望情况下，o距离其他簇的对象比距离与自己同在簇的对象更近，许多情况下，这很糟糕，应当避免。</p></blockquote><p>另一个例子是 戴维森堡丁指数(DBI) [33]，它是群内距离和群间距离之间的比率(也是平均值)。它确定了集群的紧密程度和分离程度。这些被称为内部有效性度量，因为它们只使用数据集和结果聚类的信息进行计算。</p><blockquote><p><a href="https://blog.csdn.net/a841454735/article/details/80237257">聚类算法评价指标——Davies-Bouldin指数(Dbi)</a></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/643534-20180806003007015-1288206809.png" alt="img"><br>DBI值越小越好</p></blockquote><p>另一种方法是根据应用领域进行外部评估。在那些聚类只是正在构建的系统的一部分的情况下，评估聚类算法如何影响系统的全局行为是很重要的[34]。在此，聚类质量将通过使用该<strong>信息检索(IR)领域中的标准度量获得的推荐的质量</strong>来间接测量(参见第4节)。</p><h2 id="3-通过对文档进行聚类来构建多方面用户画像"><a href="#3-通过对文档进行聚类来构建多方面用户画像" class="headerlink" title="3. 通过对文档进行聚类来构建多方面用户画像"></a>3. 通过对文档进行聚类来构建多方面用户画像</h2><p>正如我们在本文简介中提到的那样，由于用户可能对许多不同的主题感兴趣，并且他们的用户画像由<strong>一组概念或包含加权术语的主题</strong>组成，因此我们可以说用户画像是<strong>多方面</strong>的，因为它尝试捕获与用户相关联的文档集中包含的不同方面。</p><p>在本文中，一个用户画像的每一面将会被称为<strong>子画像</strong>。</p><p>这些多面的用户画像与整体式用户画像相反，在整体式用户画像中，底层主题并不明确。</p><p>在大多数情况下，这些<strong>概念是隐藏</strong>的，即它们隐含在文档集中。这意味着需要一个<strong>自动提取或学习它们的过程</strong>。</p><p>在我们的案例中，我们应用了<strong>聚类分析</strong>。这个想法是将文档集聚类，以获得k组文档。</p><h3 id="3-1-文档聚类"><a href="#3-1-文档聚类" class="headerlink" title="3.1 文档聚类"></a>3.1 文档聚类</h3><p>当要聚类的<strong>对象是文本</strong>时，就像我们的情况一样，这个过程称为<strong>文档聚类</strong>。</p><p>这种机器学习技术第一次应用于信息检索是在40多年前，其目的是提高检索过程的效率，由此产生了基于聚类的检索模型[35]。</p><p>一旦文档被聚类并且相关文档被放置在同一组中，给定由用户提交的查询，这将面对聚类的代表，并且系统将返回属于那些其代表最接近查询的聚类的文档。</p><p>应用这种基于聚类的检索模型的基本假设是<strong>聚类假设，即“紧密关联的文档往往与相同的请求相关”</strong>[36]。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201005151946809.png" alt="image-20201005151946809"></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line"> 1(文档集合)--&gt;A&gt;预处理] --&gt;2(预处理后的集合)--&gt;B&gt;特征选择]--&gt;</span><br><span class="line"> </span><br><span class="line"> 3(降维后的集合)--&gt;c&gt;文档术语矩阵格式]--&gt;4(文档划分矩阵)--&gt;d&gt;聚类]--&gt;5(文档聚类)--&gt;e&gt;信息检索任务] </span><br><span class="line"> </span><br></pre></td></tr></tbody></table></figure><p>图1示出了应用于信息检索聚类的一般过程。</p><p>给定要对其执行聚类的文档集合，第一步是对其进行==预处理==，这可能包括标记化(提取标记或术语，通常在非字母字符处进行拆分)、停止单词移除(移除集合中最常见的单词，如虚词)和词干(移除单词后缀，并将单词保留在其词汇词干中)。</p><p>下一步可能是==特征(术语)的降维==，因为我们正在处理一个高维问题[37]，通常移除非常罕见的术语(那些出现在少于给定百分比的文档中的术语)。</p><p>==文档术语矩阵的构建==是流程的下一步。<br><strong>行对应于集合中的文档，列对应于术语。</strong><br>因此，文档由包含列中集合中不同术语的向量表示。如果文档包含一个术语，则在相应的单元格中会有一个反映该术语在该文本中的重要性的权重(通常使用TF-IDF方案)，否则为0.0。</p><p><strong>该矩阵</strong>通常非常稀疏，它将和要生成的<strong>聚类数量</strong>，作为==聚类算法的输入==。作为输出，它将在这样数量的聚类中提供语料库的划分，</p><p>并且在每个聚类中，所有文档之间的相似度很高（可以说聚类中的所有文档都处理相同的主题），而与文档与来自其他集群的文档之间的相似度较低。</p><p>这些集群可以应用于许多IR任务[38]，例如，文档组织和浏览，文本摘要，文档检索等。</p><h3 id="3-2-全局和局部的聚类方法"><a href="#3-2-全局和局部的聚类方法" class="headerlink" title="3.2 全局和局部的聚类方法"></a>3.2 全局和局部的聚类方法</h3><p>为了基于用户文档的内容创建用户个人资料，我们可以考虑两种将用户文档聚类的方法。</p><p>第一种是==局部方法==，它为每个用户在局部查找基础文档组，即仅考虑他们的文档。</p><p>另一种方法是==全局方法==，因为它对每个用户的所有文档执行聚类过程。</p><p>第一种方法<strong>捕获特定用户的主题</strong>，而第二种方法尝试找到通常<strong>每个用户都共享的通用概念</strong>。</p><p>这意味着在本地群集中，学习到的组对每个用户都是独占的，因此仅包含该用户的文档。在全局群集中，群集将包含来自不同用户的文档。</p><p>因此，通过将每个全局群集中属于给定用户的文档进行分组，可以从此全局群集中获得每个用户的特定群集。</p><p>图2说明了这两种方法。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201005200932158.png" alt="image-20201005200932158"></p><p>应当注意，在局部方法中，对于给定的用户，实例的数量等于与其<strong>相关联的文档的数量</strong>。对系统中的<strong>每个用户重复集群过程</strong>，因此所有用户都将获得自己的集群。</p><p>另一方面，在全局方法中，实例数是<strong>系统中的文档数</strong>，并且<strong>聚类算法仅执行一次</strong>。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201005202052528.png" alt="image-20201005202052528"></p><p>图3中，左侧的图显示了所有用户X的文档的排列以及它们如何被分组为相似文档的局部簇。通过此聚合，将为用户构建三个子用户画像。</p><p>就将所有用户（X，Y和Z）的文档合并到聚类算法中的全局方法而言，中间的图显示了找到的假设组。集群c2，c3，c5和c6在它们集成了来自不同用户的文档的意义上是异构的。</p><p>如果我们再次关注用户X，则遵循此全局方法要构建的用户画像的数量将取决于文档所属的集群的数量。</p><p>右侧的图，我们可以看到为X考虑了新的群集，因此X的群集的最终数量为6，因此，这将是与此用户相关联的子用户画像的数量。</p><h3 id="3-3-从集群建立子画像"><a href="#3-3-从集群建立子画像" class="headerlink" title="3.3 从集群建立子画像"></a>3.3 从集群建立子画像</h3><p>在本地方法和全局方法中，无监督学习过程的==最终输出==都是从给定用户到群集的每个文档的关联。</p><p>在同一集群中分组在一起的用户的所有文档都应该处理相同的概念。</p><p>然后，我们将从与用户相关联的每个群集中构建一个子画像。</p><p>为此，对于每个用户和给定的群集，通过编译<strong>同一群集中包含的所有文档</strong>来创建“<strong>宏文档</strong>”。该文档将对应一个子用户画像。</p><p>生成一个新文档集合，其中包含来自所有用户的所有子用户画像文档。这将被索引以供信息检索系统（IRS）使用。</p><p>当查询提交到系统时，它返回一个排名，在该排名中，来自同一用户的不同子画像可能会分布在整个系统中。</p><p>正如我们向专家推荐的那样，最终排名必须由用户组成，因此有必要使用某种<strong>融合策略</strong>为每个用户计算最终得分，同时考虑排名中所有不同的子画像。</p><p>图4说明了此过程。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201006095300455.png" alt="image-20201006095300455"></p><h2 id="4-评估"><a href="#4-评估" class="headerlink" title="4. 评估"></a>4. 评估</h2><p>本文解决了寻找人（专家）的一般问题，但我们的<strong>评估将集中在议会环境</strong>上。基本目标是根据公民提出的查询找到相关的国会议员（MP），或确定哪些国会议员可能对阅读系统收到的新文档感兴趣。</p><p>为了做到这一点，我们选择了<strong>以议员的身份来代表国会议员的利益</strong>，该简介将在议员对公开议会会议上<strong>提出的政治倡议</strong>进行干预的基础上建立。更具体地说，让我们考虑到这样一个事实，即<strong>国会议员可能会参加多个委员会</strong>，而且就议员人数而言，这些委员会的人数较少，并且涵盖了更具体的主题。由于<strong>用户可能对几个政治主题（例如农业，教育，经济等）感兴趣</strong>，因此，<strong>目的是为每个国会议员创建子画像</strong>，以代表国会议员对这些不同主题的兴趣。</p><p>该评估的<strong>总体目标是确定文本聚类是否是自动识别用户感兴趣的不同主题的有效工具，以及向他们推荐专家并为他们过滤信息是否有用</strong>。为了实现这一目标，我们建议通过本节中描述的评估来回答以下特定的研究问题：</p><ul><li>RQ1：文本聚类是否是一种适当的技术，可以通过考虑议会背景的特定特征来自动提取某个人感兴趣的主题？</li><li>RQ2：基于聚类的子画像是否对筛选和推荐任务有效？</li><li>RQ3：在局部和全局范围内构建集群之间有什么区别吗？</li><li>RQ4：集群数量与推荐质量相关吗？</li><li>RQ5：这些任务的最佳群集算法是什么？</li></ul><p>因此，在本节中，我们将描述实验设计以及在此评估阶段进行的实验结果。</p><h3 id="4-1-测试集"><a href="#4-1-测试集" class="headerlink" title="4.1 测试集"></a>4.1 测试集</h3><p>我们用于实验的数据集是<strong>西班牙安达卢西亚议会的议会会议记录的集合</strong>，更具体地说是属于第八届任期的会议记录。1<a href="http://irutai2.ugr.es/ColeccionPA/legislatura8.tgz">数据集下载</a></p><p>这是根据委员会和全体会议上讨论的倡议组织的，其中包括共有5258条记录，涉及12633项干预措施。有26个不同的委员会，共有132名发言人。</p><p>出于实验目的，我们仅选择了具有至少10种干预措施的国会议员。</p><h3 id="4-2-推荐器和筛选系统概述"><a href="#4-2-推荐器和筛选系统概述" class="headerlink" title="4.2 推荐器和筛选系统概述"></a>4.2 推荐器和筛选系统概述</h3><h4 id="检索模型"><a href="#检索模型" class="headerlink" title="检索模型"></a>检索模型</h4><p>为了推荐给 市民查询 或 要过滤文档 的议员，我们使用了开源<a href="https://lucene.apache.org/">Apache Lucene Library 2</a>，将众所周知的<strong>BM25模型</strong>实现为检索模型[39]。</p><p><strong>对于每个$ MP_i $，索引器的输入是其子画像的集合。</strong>例如，要为$MP_5$索引的文档是三个群集c1，c2和c3（因此总共3个，分别称为$MP_{5_c1}$，$MP_{5_c2}$和$MP_{5_c3}$）的子画像。</p><blockquote><p><em>Lucene</em>是<em>apache</em>软件基金会4 jakarta项目组的一个子项目，是一个开放源代码的全文检索引擎工具包，但它不是一个完整的全文检索引擎，而是一个全文检索引擎的架构，提供了完整的查询引擎和索引引擎，部分文本分析引擎（英文与德文两种西方语言）。</p></blockquote><blockquote><p>bm25 是一种用来评价搜索词和文档之间相关性的算法，它是一种基于<strong>概率检索模型</strong>提出的算法</p></blockquote><h4 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h4><p>使用在Lucene西班牙<strong>文本分析器</strong>中实现的词干分析器，可以过滤掉这些词中包含的术语，删除停用词，并将其简化为词根。然后删除少于1％的干预措施中出现的任何术语。</p><p>给定查询，将<strong>MP子画像的排名作为输出</strong>给出。</p><p>但是，由于<strong>最终目标是根据MP与查询的相关性对MP进行排名</strong>，因此通过考虑[6]中介绍的CombLgDCS方法对原始排名进行过滤。此策略通过<strong>汇总其子画像</strong>的不同分数，但根据其在排名中的对数进行贬值，为每个$MP_i$计算单个分数。公式如下：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201006121510757.png" alt="image-20201006121510757"></p><ul><li>$MP_i$是一个议员，</li><li>q是一个用户查询</li><li>$MP_{i_cj}$是此政治人物排名中的一个子画像，</li><li>$s(MP_{i_cj})$表示其得分值（画像与查询q之间的相似性），</li><li>$rank(MP_{i_cj})$是$MP_{i_cj}$子画像在排名中的位置。</li></ul><p>一旦为每个MP计算了分数，它们就会相应地得出一个排名。</p><h3 id="4-3-聚类算法"><a href="#4-3-聚类算法" class="headerlink" title="4.3 聚类算法"></a>4.3 聚类算法</h3><p>在我们的实验中，我们测试了以下聚类算法的R实现：</p><ul><li>作为分层方法的AGNES和DIANA（分别为自底向上和自顶向下），</li><li>作为基于质心的方法的K-Means和PAM，</li><li>最后是分别是<br>基于生成统计模型的潜在的Dirichlet分配（LDA）方法和<br>基于人工神经网络的自组织图（SOM）方法</li></ul><p>选择这些算法是因为它们是最新的聚类方法，或者已在聚类过程中使用。</p><ol><li>基于质心的方法和分层方法都使用余弦相似度来计算个体之间的距离。</li><li>对于用于聚类的LDA算法[27]，一旦该算法找到了所有文档的主题分布，便会将每个文档分配给与其最可能的主题相关联的聚类。</li><li>关于SOM，它也可以用于将相似数据分组在一起。<br>一旦获得SOM输出，并且<strong>每个文档都与一个神经元相关联</strong>，就会有一组<strong>权重向量</strong>，它们代表<strong>神经元在数据离散空间中的位置</strong>，并且可以使用任何聚类根据它们的相似性对这些向量进行分组的方法，从而创建实际数据的相似实例的群集，这些群集附加到群集的神经元。</li></ol><p>在我们的案例中，我们将<strong>SOM与K-Means算法（称为SOM-KM）</strong>结合使用，因为它已被视为一般聚类任务中的最新技术[40-42]。</p><h3 id="4-4-选择聚类数量"><a href="#4-4-选择聚类数量" class="headerlink" title="4.4 选择聚类数量"></a>4.4 选择聚类数量</h3><p>正如我们已经提到的，在应用聚类的任何问题中，作为<strong>输出给出的聚类数k</strong>都是重要的问题。理想的情况是自动选择最佳值，但这并不容易。</p><p>在我们的实验中，我们尝试了不同的方法，其中<strong>k是固定的</strong>或<strong>通过考虑一些依赖于集合的数据自动计算得出</strong>。更具体地说，我们使用以下替代方法进行了实验：</p><ul><li><p>k = #Com（常量） ⇒ </p><ul><li>对于全局群集，这表示安达卢西亚议会第八届任期的<strong>委员会数目，即26</strong>。</li><li>对于局部群集，此数目特定于每个国会议员，是<strong>每个国会议员MP参加的委员会的数目：平均为6.02个委员会，标准差为4.52。</strong></li></ul><p>将此值设置为k的目的是确定聚类算法能够重现官方委员会给出的议会倡议组的程度，这被视为基本事实。</p></li><li><p>k = m * n / t ⇒</p><ul><li>m =安达卢西亚议会集合中的术语数； </li><li>n =集合中的干预次数；</li><li>t =文档项矩阵中非零条目的数量。</li></ul><p>这适用于两种聚类方法，尽管m，n和t的值将取决于其相应的类型。</p><ul><li>在全局聚类的情况下，<br>m为4208；<br>MP干预的总数（n）为10025（干预总数的80％（训练分区），<br>t = 1,702,296。</li><li>对于局部聚类，这些数字有所不同，因为它们取决于每个MP干预的数量，但是平均，<br>m = 3427.45±2056.15，<br>n = 58.11±58.55，<br>t = 12106.66±12064.64。</li></ul><p>全局聚类的k的最终值为k = 24，而局部局部的k的最终值为15.85±9.67。</p></li><li><p>$k =\sqrt{n/2}$ ⇒</p><ul><li>对于全局聚类，该值是70，通过考虑n = 10025（干预总数的80％-训练分区）计算得出，</li><li>而对于局部聚类，则为a的干预数量给定MP对每个政客而言都是特定的，则平均值为4.25±2.60。</li></ul></li></ul><h3 id="4-5-实验环境"><a href="#4-5-实验环境" class="headerlink" title="4.5 实验环境"></a>4.5 实验环境</h3><p>这组倡议集合被随机分为一个训练集（80％）和一个测试集（20％）。</p><p>训练集用于从获得的聚类开始构建MP子画像，而测试集用于评估目的。</p><p>此过程重复五次，在本文中，报告的结果为平均值。换句话说，我们使用重复的保留重采样方法。</p><p>我们将使用<strong>倡议的内容（全文）作为过滤过程的查询</strong>（在这种情况下，我们的<strong>目标是将倡议分发给可能感兴趣的任何MP</strong>）</p><p>以及<strong>MP的倡议标题推荐方法</strong>（例如，目的是找到一个可以与之交谈的国会议员，因此我们可能希望获得排名最高的相关国会议员）。</p><p>在这两种情况下，并着重于相关判断，由于<strong>目标是找到可能熟悉该主题的国会议员</strong>，因此每个查询的基本事实仅包括那些参加其相应倡议的国会议员。</p><p>由于可以很合理地假设一项倡议也可能与其他未参与计划的议员相关且感兴趣，因此我们可以说，这是一个相当保守的假设，需要评估，尤其是对于过滤任务。</p><p>给定查询，搜索引擎将返回MP排名。因此，为了评估质量，我们将使用众所周知的<strong>精度和召回率指标</strong>，<strong>重点关注前10个结果</strong>（分别为p @ 10 /用户画像前10/ 和r @ 10 / 排名前10/）。我们还将考虑<strong>归一化DCG</strong>（Discounted Cumulative Gain（DCG）是衡量排名质量的一种方法）[43]（ndcg @ 10），以便考虑相关文件的排名</p><p>为了确定学习子画像是否是表示MP画像的好方法，我们选择将结果与三个不同的基准进行比较：</p><ul><li><strong>每个MP的单个用户画像</strong>（整体用户画像）。从国会议员对他们所有不同倡议的干预中，只会为他们建立一个档案。此用户画像将包含他们感兴趣的所有主题。我们可以说<strong>k = 1</strong>。</li><li>根据每个MP所涉及的委员会为其构建了几个子用户画像（<strong>基于委员会的子用户画像</strong>）。通过考虑他们的差异委员会干预，每个国会议员将具有不同的关联子用户画像。委员会的干预将成为建立相应子用户画像的输入。从实践的角度来看，如果给定的国会议员参加了k个委员会，则其档案将包括k个子用户画像。</li><li>国会议员参与的每个计划的一个子用户画像（<strong>基于干预/倡议的子用户画像</strong>）。这是极端情况，每个国会议员<strong>对一项倡议</strong>的干预都将包括其自己的子用户画像。因此，与MP相关的子用户画像的数量将与她/他的主动干预的数量相同。</li></ul><p>这些基准背后的基本思想是有两种极端情况（即，每位国会议员有一个画像简介，或与其干预措施的数量一样多的画像），中间则有一个，由他们参加的委员会确定子简介的数量。预期的情况是，MP推荐和筛选任务在基于聚类的子用户画像中将比基线获得的性能更好。</p><h3 id="4-6-结果"><a href="#4-6-结果" class="headerlink" title="4.6 结果"></a>4.6 结果</h3><p>在以下各节中，我们将介绍实验结果并回答以下研究问题：</p><h4 id="4-6-1-RQ1：文本聚类是否是一种合适的技术，可以在议会中自动提取主题？"><a href="#4-6-1-RQ1：文本聚类是否是一种合适的技术，可以在议会中自动提取主题？" class="headerlink" title="4.6.1 RQ1：文本聚类是否是一种合适的技术，可以在议会中自动提取主题？"></a>4.6.1 RQ1：文本聚类是否是一种合适的技术，可以在议会中自动提取主题？</h4><p>为了回答第一个研究问题，我们将展示集群如何涵盖会议中讨论的<strong>政治主题</strong>，同时考虑到针对特定国会议员的定性分析和针对<strong>委员会</strong>的广泛定性分析。</p><p>个体定性分析。<br>该分析考虑了伊兹奎尔达·尤尼达（Izquierda Unida）政党的国会议员。我们之所以选择他，是因为他是一名多产议员（在第八届任期中，他在172个不同的会议上讲话）涵盖了广泛的主题（在全体会议上有97项干预措施，他还参加了14个专门委员会或工作组的干预，其余75项干预措施） 。那么，国会议员“真正”感兴趣的主题是什么？可以说，这些问题与他所参加的委员会有关，但是为了国会议员的利益，有些话题比其他话题更具力量是很常见的。</p><p>为了量化这个想法，我们可以在表2中看到第二列，在这里，我们显示了他不同干预措施的规模（以术语的百分比表示）（请注意，一半的权重位于全体会议上，其中可能讨论几个主题）。请注意，从这些数据中我们可以看到他专注于平等与社会福利，文化与健康（代表他在委员会中的干预措施的70％，即不考虑全体会议）。</p><blockquote><p>表2 MP干预措施在任期内的分布（按个人资料的大小）。<br>第二列显示了考虑到议会中的实际会议的“真实”分配。<br>第三列显示了考虑学习集群的分布。</p></blockquote><table><thead><tr><th>实际分配</th><th></th><th>聚集</th></tr></thead><tbody><tr><td>全体会议委员会</td><td>0.500</td><td></td></tr><tr><td>性别平等和社会福利</td><td>0.128</td><td>0.286</td></tr><tr><td>文化</td><td>0.121</td><td>0.151</td></tr><tr><td>健康</td><td>0.103</td><td>0.144</td></tr><tr><td>总统职位</td><td>0.046</td><td></td></tr><tr><td>旅游和商业</td><td>0.018</td><td>0.021</td></tr><tr><td>欧洲事务</td><td>0.015</td><td>0.052</td></tr><tr><td>公共工作和住房</td><td>0.011</td><td>0.013</td></tr><tr><td>公共工作和运输</td><td>0.010</td><td>0.030</td></tr><tr><td>技术，科学和商业</td><td>0.009</td><td>0.063</td></tr><tr><td>贸易，技术与科学</td><td>0.009</td><td></td></tr><tr><td>治理</td><td>0.008</td><td></td></tr><tr><td>司法</td><td>0.008</td><td></td></tr><tr><td>广播电视</td><td>0.007</td><td>0.016</td></tr><tr><td>环境</td><td>0.005</td><td></td></tr><tr><td>经济话题</td><td></td><td>0.139</td></tr><tr><td>性别暴力话题</td><td></td><td>0.066</td></tr><tr><td>劳工运动话题</td><td></td><td>0.007</td></tr><tr><td>教育话题</td><td></td><td>0.007</td></tr><tr><td>年轻人话题</td><td></td><td>0.006</td></tr></tbody></table><p>让我们首先考虑那些不执行任何聚类算法的情况，即，整体式和基于委员会的用户画像。着眼于整体用户画像，我们发现它由与议会程序相关的术语所占据，这些术语难以识别国会议员所感兴趣的主题，如图5左侧的单词cloud所示。</p><p>另一方面，如果我们考虑基于委员会的子用户画像，例如参见图5中从“性别平等和社会福利委员会Gender Equality and Social Welfare Committee”获得的正确词云，尽管与该委员会相关，但与委员会相关的术语仍占主导地位议会中出现了一些用语，但出现频率较低。着重于全体会议上的大量干预措施，我们之前与给定主题没有任何关联，因此它们以较大的轮廓加入，显示出与基于整体的轮廓相同的模式。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201006134706409.png" alt="image-20201006134706409"></p><blockquote><p>图5. 不同配置文件的词云表示形式：左图显示了Monolithic（所有干预措施都形成一个唯一的配置文件），右图显示了基于委员会的配置文件，该配置文件是使用“性别平等和社会福利委员会——Gender Equality and Social Welfare Committee ”的数据获得的。</p></blockquote><p>现在，<strong>我们将集中讨论应用聚类算法（尤其是全局K均值）后获得的结果，K值等于26</strong>。<br>在这种情况下，MP的所有干预（包括全体会议）均分布在14个26个候选集群。表2的最后一列显示了每个群集的大小（以术语的百分比表示）。<br>为了<strong>确定每个群集的主要主题</strong>，一种逻辑方法是查看群集中最常见的术语，即那些对此贡献最大，并为集群分配他们建议的主题，出现不同的情况：</p><ul><li>如图6的左侧所示，红色字样暗示该集群与文化有关，因此可以在集群中的文档和给定委员会之间找到1对1匹配。</li><li>同样，一个委员会可以分为不同的主题，即1对n。例如，如图6右侧的图形所示，聚类能够发现“性别暴力”作为新话题。该集群中的干预措施与“性别平等和社会福利”委员会高度相关，但是集群能够区分“性别暴力”和“社会福利”。</li><li>将两个不同的委员会以2对1的方式加入集群：“技术，科学和商业”，“贸易，技术和科学” 这两个高度相关的委员会的干预措施被归为同一集群。</li><li>发现横向主题，从n对1：存在由多个委员会干预的集群，例如“经济”主题，代表了国会议员的横向兴趣。本主题包括全体会议和大量委员会的发言。这反映出经济是所有政治活动所共有的多学科主题，尽管没有明确说明。</li><li>在其他情况下，全局集群仅包含该MP的一个干预，因此可以认为它们代表MP兴趣的边缘主题（表2中的最后三行）。</li></ul><blockquote><p>图6. 使用全局K均值作为聚类方法的两个不同学习配置文件的词云表示形式。 （有关此图例中颜色参考的解释，请参考本文的网络版本。）</p></blockquote><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201006145147030.png" alt="image-20201006145147030"></p><p>因此，可以说，聚类能够确定国会议员所关注的话题，而不仅仅是他所担任的委员会。此外，它可以帮助在全体会议上将他的发言分配给各个主题。</p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
            <tag> 论文翻译 </tag>
            
            <tag> 用户画像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>知识图谱简单了解</title>
      <link href="2020/09/30/1017%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/"/>
      <url>2020/09/30/1017%E7%9F%A5%E8%AF%86%E5%9B%BE%E8%B0%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="知识图谱"><a href="#知识图谱" class="headerlink" title="知识图谱"></a>知识图谱</h1><h1 id="1-定义"><a href="#1-定义" class="headerlink" title="1. 定义"></a>1. 定义</h1><h3 id="概念："><a href="#概念：" class="headerlink" title="概念："></a>概念：</h3><p>知识图谱技术是人工智能技术的重要组成部分，是一种揭示实体之间<strong>关系</strong>的<strong>语义网络</strong>，可以对现实世界的<strong>事物及其相互关系</strong>进行<strong>形式化</strong>地描述。语义网中的节点表示实体或概念，边则由属性或关系构成。</p><h3 id="应用："><a href="#应用：" class="headerlink" title="应用："></a>应用：</h3><p>建立一个具有语义处理能力与开放互联能力的知识库，可以在<strong>智能搜索、智能问答、个性化推荐</strong>等智能信息服务重产生应用价值。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201017105719896.png" alt="image-20201017105719896"></p><p>知识图谱已被用来泛指各种<strong>大规模的知识库</strong>。</p><h3 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h3><ol><li>互联网信息量暴增 2. 智能化知识表示，知识图谱最初就是应用于信息检索方面。</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">1[web1.0时代文档互联]--&gt;2[web2.0时代数据互联]</span><br><span class="line">2--正在迈向--&gt;3[web3.0时代知识互联]</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201017112549311.png" alt="image-20201017112549311"></p><blockquote><p>2012 年 5 月 17 日，Google 正式提出了知识图谱（Knowledge Graph）的概念，其初衷是为了优化搜索引擎返回的结果，增强用户搜索质量及体验。</p><p>实际上，知识图谱并不是一个全新的概念，早在 2006 年就有文献提出了语义网（Semantic Network）的概念，呼吁推广、完善使用本体模型来形式化表达数据中的隐含语义，RDF（resource description framework，资源描述框架）模式和 OWL（Web ontology language，万维网本体语言）就是基于上述目的产生的。用电子科技大学徐增林教授的论文原文来说：</p><blockquote><p>知识图谱技术的出现正是基于以上相关研究，是对语义网标准与技术的一次扬弃与升华。</p></blockquote></blockquote><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/202005131.png" alt="img"></p><h3 id="表示形式"><a href="#表示形式" class="headerlink" title="表示形式"></a>表示形式</h3><p>基于三元组是知识图谱的一种通用表示方式，<br>即$$ G=(E,R,S)$$：</p><ul><li>$E={ e_1,e_2,……,e_{|E|} }$，其中 E是知识库中的实体集合，共有|E|种不同实体</li><li>$R={r_1,r_2,……,r_{|R|}}$R是知识库中的关系集合，共包含***|R|***种不同关系；</li><li>$S \subseteq E \times R \times E  $，S代表知识库中的三元组集合。</li></ul><p>三元组的基本形式主要包括(实体1-关系-实体2)和(实体-属性-属性值)等。</p><ul><li>每个实体(概念的外延)可用一个全局唯一确定的ID来标识，</li><li>每个属性-属性值对(attribute-value pair，AVP)可用来刻画实体的内在特性，</li><li>而关系可用来连接两个实体，刻画它们之间的关联。</li></ul><p>如下图1的知识图谱例子所示：</p><ul><li>中国是一个实体，北京是一个实体，<ul><li>中国-首都-北京 是一个（实体-关系-实体）的三元组样例</li></ul></li><li>北京是一个实体 ，人口是一种属性2069.3万是属性值。<ul><li>北京-人口-2069.3万构成一个（实体-属性-属性值）的三元组样例。</li></ul></li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201017110948417.png" alt="image-20201017110948417"></p><h3 id="知识图谱构建"><a href="#知识图谱构建" class="headerlink" title="知识图谱构建"></a>知识图谱构建</h3><ul><li>自顶向下(top-down)<br>自顶向下指的是先为知识图谱定义好本体与数据模式，再将实体加入到知识库。该构建方式需要利用一些现有的结构化知识库作为其基础知识库，例如 Freebase 项目就是采用这种方式，它的绝大部分数据是从维基百科中得到的。</li><li>自底向上(bottom-up)<br>目前大多数知识图谱都采用<br>自底向上指的是从一些开放链接数据（也就是 “信息”）中<strong>提取出实体</strong>，选择其中<strong>置信度较高</strong>的加入到知识库，<strong>再构建实体与实体之间的联系</strong>。</li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20201017113016407.png" alt="image-20201017113016407"></p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
            <tag> Knowledge Graph </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国内外用户画像研究综述 - 徐芳</title>
      <link href="2020/09/13/0913%E5%9B%BD%E5%86%85%E5%A4%96%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0-%E5%BE%90%E8%8A%B3/"/>
      <url>2020/09/13/0913%E5%9B%BD%E5%86%85%E5%A4%96%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F%E7%A0%94%E7%A9%B6%E7%BB%BC%E8%BF%B0-%E5%BE%90%E8%8A%B3/</url>
      
        <content type="html"><![CDATA[<h1 id="国内外用户画像研究综述-徐芳"><a href="#国内外用户画像研究综述-徐芳" class="headerlink" title="国内外用户画像研究综述 - 徐芳"></a>国内外用户画像研究综述 - 徐芳</h1><p>2020年论文</p><p>Research On Library Science</p><p>图书情报学论文？</p><h2 id="概论-论文讲了什么"><a href="#概论-论文讲了什么" class="headerlink" title="概论-论文讲了什么"></a>概论-论文讲了什么</h2><h3 id="摘要中提取出的信息"><a href="#摘要中提取出的信息" class="headerlink" title="摘要中提取出的信息"></a>摘要中提取出的信息</h3><ol><li>用户画像的概念，分析用户画像的流程</li><li>用户画像研究的4个流派<ul><li>行为流派</li><li>社交媒体流派</li><li>兴趣流派</li><li>基于本体的用户画像流派</li></ul></li><li>用户画像在一些领域应用的现状<ul><li>电子商务</li><li>医疗健康</li><li>旅游行业</li><li>图书馆</li></ul></li><li>用户画像现有研究的不足之处<ul><li>模型构建纬度单一</li><li>应用领域发展不均</li><li>模型构建缺乏评价</li><li>反馈机制</li><li>隐私问题</li></ul></li></ol><h3 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h3><ul><li>用户画像</li><li>研究流派</li><li>信息服务</li></ul><h2 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h2><h3 id="0-引言"><a href="#0-引言" class="headerlink" title="0.引言"></a>0.引言</h3><h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>互联网发展导致信息爆炸。需要解决的问题：<strong>在信息海洋中精确地捕获自己所需信息</strong></p><p><strong>用户画像（User Profile ）</strong>—— 提供<strong>精准信息服务</strong>的一种工具。</p><p>应用领域：图书馆，电子商务，健康医疗，旅游管理，精准营销</p><blockquote><p>最常见的，比如电子商务，淘宝的商品推荐应该就用到了用户画像相关的东西</p></blockquote><p>作用：更好的理解用户需求，实现个性化、精准化信息服务。</p><h4 id="国内相关工作"><a href="#国内相关工作" class="headerlink" title="国内相关工作"></a>国内相关工作</h4><h5 id="相关论文"><a href="#相关论文" class="headerlink" title="相关论文"></a>相关论文</h5><p>2017 年，陈慧香等从用户画像的基本概念、用户画像技术、用户画像模型等几个角度对国外用户画像的研究现状进行了较为系统的梳理</p><p>2018 年，刘海鸥等从用户画像的概念与界定、构成要素、模型与方法以及对图书情报学的启示等方面进行综述［3］<br>，并讨论国内外用户画像建模方法在图书馆领域的应用［4］</p><p>2019 年，宋美琦等研究者从用户画像的含义、用户画像的研究内容、用户画像技术及其应用价值 3 个方面回顾了国内外用户画像的研究动态并进行了述评［5］</p><p>2019 年，张海涛等研究者则从宏观视角运用 Cite space 等可视化工具对图书情报领域用户画像研究的发文量、研究机构、被引期刊、研究热点和研究热点的密度等内容进行了定量分析［6］</p><blockquote><p>[2]陈慧香，邵波．国外图书馆领域用户画像的研究现状及启示 [J] ．图书馆学研究，2017(20): 16-20.<br>[3]刘海鸥，孙晶晶，苏妍嫄，等．国内外用户画像研究综述 [J] ．情报理论与实践，2018(11): 155-160.<br>[4]刘海鸥，孙晶晶，陈晶，等．用户画像模型及其在图书馆领域中的应用 [J] .图书馆理论与实践，2018(10): 92-97.<br>[5]宋美琦，陈烨，张瑞．用户画像研究述评 [J] ．情报科学，2019 (4): 171-177.<br>[6]张海涛，徐海玲，张枭慧，等．国内外图书情报领域用户画像研究现状及展望 [J] .图书情报工作，2019(7):127-134.</p></blockquote><h5 id="局限"><a href="#局限" class="headerlink" title="局限"></a>局限</h5><p>在用户画像的<strong>研究流派划分、用户画像应用领域</strong>的梳理等方面尚存在一些局限，缺乏系统的回顾与分析。</p><h3 id="1-用户画像的概念与构建流程"><a href="#1-用户画像的概念与构建流程" class="headerlink" title="1.用户画像的概念与构建流程"></a>1.用户画像的概念与构建流程</h3><h4 id="1-1-用户画像概念"><a href="#1-1-用户画像概念" class="headerlink" title="1.1 用户画像概念"></a>1.1 用户画像概念</h4><p>用户画像的概念：</p><ul><li>Cooper提出：他认为用户画像是真实用户的虚拟表示，是基于一系列真实数据（Marketing dala，Usability data)的目标用户模型。</li><li>Massanari将用户画像用于描述产品的使用对象中并认为用户画像是按照用户姓名照片、兴趣爱好等特征对用户进行描述而形成的用户画像模型，强调了用户在产品开发过程中所起的决定性作用。</li><li>用户画像是参考用户性别、受教育程度等人口统计学特征、社交关系和行为模式等标准而分析、总结和构建出来的一种标签化了的用户模型</li><li>用户画像的过程包括搜集用户数据、分析用户相关的业务特色以及可视化数据分析结果等呵;用户画像代表了某类目标用户群的特征。</li></ul><blockquote><p>字如其名，画像，对用户进行刻画的一种印象，用来描输一个用户的各种特征。</p></blockquote><p>总结：用户画像是以大量真实用户数据为基础，对用户行为、兴趣等进行特征抽取而形成的虚拟用户模型</p><p>用户画像的特点：</p><ul><li>全面性</li><li>真实性</li><li>代表性</li><li>动态性</li><li>移情性（指企业和服务人员能设身处地为顾客着想，努力满足顾客的要求）</li></ul><h4 id="1-2-用户画像构建流程"><a href="#1-2-用户画像构建流程" class="headerlink" title="1.2 用户画像构建流程"></a>1.2 用户画像构建流程</h4><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200917204542.png" alt="image-20200917204542109"></p><h5 id="1-2-1-数据采集"><a href="#1-2-1-数据采集" class="headerlink" title="1.2.1 数据采集"></a>1.2.1 数据采集</h5><p><strong>用户数据是用户画像流程的基础</strong>。</p><p>目前研究缺点：真实性偏差，比如多人共用一个账号</p><h5 id="1-2-2-数据挖掘及过滤"><a href="#1-2-2-数据挖掘及过滤" class="headerlink" title="1.2.2 数据挖掘及过滤"></a>1.2.2 数据挖掘及过滤</h5><p><strong>数据挖掘及过滤是用户画像流程的核心和关键</strong></p><p>目前研究缺点：重点在收集，而缺少过滤及清洗</p><h5 id="1-2-3-标签提取及重组"><a href="#1-2-3-标签提取及重组" class="headerlink" title="1.2.3 标签提取及重组"></a>1.2.3 标签提取及重组</h5><p><strong>标签提取与重组，直接影响准确性</strong></p><h6 id="什么是标签"><a href="#什么是标签" class="headerlink" title="什么是标签"></a>什么是标签</h6><p><strong>标签</strong>是一个对采菜的用户数据进行挖掘与过滤，提取目标用户群的特征用高度精炼词语对这些特征进行标识的过程，具有语义化、短文本化、专一性等特点。</p><h6 id="动态-静态标签"><a href="#动态-静态标签" class="headerlink" title="动态/静态标签"></a>动态/静态标签</h6><ul><li>静态标签（2D标签）：不经常变的，相对稳定的<ul><li>人口属性</li><li>人格</li></ul></li><li>动态标签（3D标签）：具有动态特征<ul><li>Cookies记录</li><li>商品购买</li><li>社交行为</li></ul></li></ul><h6 id="用户画像标签的划分"><a href="#用户画像标签的划分" class="headerlink" title="用户画像标签的划分"></a>用户画像标签的划分</h6><ol><li>分类角度<ul><li>用户行为标签<ul><li>点击频率，浏览时间长短，搜索记录，评论</li></ul></li><li>社会网络标签<ul><li>用户角色，用户关系网络，个体与群体的关系</li></ul></li><li>兴趣标签<ul><li>用户兴趣偏好，历史偏好，兴趣转变</li></ul></li></ul></li><li>等级排列角度<ul><li>一年内的行为</li><li>一月内的行为</li><li>一日内的行为</li></ul></li><li>社会关系网络角度<ul><li>个人与群体的关系</li><li>个人与社会的关系</li></ul></li><li>兴趣角度<ul><li>当前兴趣</li><li>潜在兴趣</li></ul></li></ol><h5 id="技术支持"><a href="#技术支持" class="headerlink" title="技术支持"></a>技术支持</h5><ol><li>数据采集方法<ol><li>自编程序</li><li>八爪鱼爬虫软件</li><li>深度访谈</li></ol></li><li>数据挖掘和过滤方法<ul><li>聚类，分类：相似特征群体划分</li><li>关联规则： 相似性对象数据关系构建</li><li>决策树，协同过滤</li><li>常用数据挖掘算法如向量空间模型算法</li></ul></li><li>标签提取和重组方法<ul><li>用户兴趣模型构建：关联规则，标签评分，TF-IDF算法，社会网络分析</li><li>用户属性特征分析：数理统计，数据挖掘，机器学习</li></ul></li></ol><h3 id="2-用户画像研究流派"><a href="#2-用户画像研究流派" class="headerlink" title="2.用户画像研究流派"></a>2.用户画像研究流派</h3><h4 id="2-1-行为流派"><a href="#2-1-行为流派" class="headerlink" title="2.1 行为流派"></a>2.1 行为流派</h4><h5 id="相关研究"><a href="#相关研究" class="headerlink" title="相关研究"></a>相关研究</h5><blockquote><p>国外方面代表性的研究主要有:</p><ul><li>早在2005年，Barabasi的研究发现人们的行为轨迹服从“幂律分布（Power Law Distribution)”和人的行为都是可预测的。Adomavicius等研究者通过对用户阅读时间和点击率等行为进行分析来发现用户消费特征与规律，为用户画像构建提供支持</li><li>Svendsen等研究技术接受程度行为与人的性格之间的关系，发现外向人表现出行为积极接受行为</li><li>Iglesias 等研究人员应用聚类方法对不同用户群体行为的网络日志进行数据挖掘，为用户画像的构建提供支持</li></ul><p>国内方面代表性的研究成果主要有:</p><ul><li>郝增勇归纳了用户画像模型构建过程中用户行为分析的主要方法，如:用户流量统计、用户分布等。</li><li>王仁武等利用自编的 Python爬虫程序抓取高校教师和学生使用图书馆电子资源的访问时间、访问方式等日志数据，并对其进<br>行分析、标引、解析等处理，试图构建学术用户画像的行为标签。</li><li>刘锦宏等研究人员应用“用户行为理论”和“技术接受模型（TAM)”，构建移动图书馆用户行为模型。何胜等研究人员分析了用户日志库中的数据，发现用户的显性兴趣和隐性需求，为制定个性化的用户服务策略提供支持</li></ul></blockquote><h5 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h5><p>​    用户画像的行为流派是==以用户行为数据为依据==，从看似散乱无序的行为数据中==挖掘出用户行为的规律与特征==，构建用户画像模型。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">graph LR</span><br><span class="line">用户行为数据 --挖掘--&gt; 用户行为规律和特征</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h5 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h5><p>​    <strong>优点：</strong>根据用户画像模型，信息服务提供者可以预测用户的行动，实现精准信息服务的目的。用户画像行为流派的模型构建方法应用较为广泛。</p><p>​    <strong>缺点：</strong>用户画像行为流派的研究尚存在一些局限，如:用户画像模型构建方法与<strong>可视化、人工智能等技术手段</strong>的结合尚不够紧密，使得基于用户行为数据构建的户画像模型在<strong>动态性、立体感</strong>等方面尚有待完善。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">  subgraph 优点</span><br><span class="line">  预测用户行动--&gt;实现精准信息服务</span><br><span class="line">  构建方法应用较为广泛</span><br><span class="line">  end</span><br><span class="line">  subgraph 缺点</span><br><span class="line">    A[与一些方法结合不够紧密]---B1[可视化]</span><br><span class="line">    A---B2[人工智能]</span><br><span class="line">    B1--&gt;D[动态性/立体感等有所欠缺]</span><br><span class="line">    B2--&gt;D</span><br><span class="line">  end</span><br></pre></td></tr></tbody></table></figure><h4 id="2-2-社交媒体流派"><a href="#2-2-社交媒体流派" class="headerlink" title="2.2 社交媒体流派"></a>2.2 社交媒体流派</h4><h5 id="背景-1"><a href="#背景-1" class="headerlink" title="背景"></a>背景</h5><p> 社交媒体的出现改变了人类的信息行为，构建了现实社会中难以构建的虚拟社会关系。</p><p>在网络世界构建了各种各样的社会化联系，这种联系具有纽带的作用，增强了用户与用户之间的联系，且用户之间的联系具有实时性与动态性特征。</p><h5 id="相关研究-1"><a href="#相关研究-1" class="headerlink" title="相关研究"></a>相关研究</h5><blockquote><p>用户画像社交媒体流派的代表性研究主要有:</p><ul><li>Bhtacharyya等研究人员以Facebook用户关键词为样本，分析用户之间的相似性，找到交友中受影响的相似之处。</li><li>徐海玲等人以豆瓣网为例，通赶来集和分析衽交媒体网站正的用户数据，构建了用户画像模型和资源画像模型。</li><li>林燕霞等研究人员以微博为例，通过采集和分析用户微博上的动态来挖掘用户感兴趣的主题，构建微博用户画像，发现用户画像在社交媒体个性化信息服务、舆论治理等方面能够产生一定的作用。</li><li>张亚楠等研究人员以科研社交媒体平台为例，通过采集和分析科研社交平台的用户数据，构建科研社交平台的用户画像，对于提高科研社交平台信息服务的精准性具有一定的参考意义</li><li>张艳丰等研究人员以移动社交媒体为例，通过采集和分析移动社交媒体的用户数据，构建了潜水忽略型、忍耐使用型、<br>平台转移型和行为替代型等用户画像模型例。</li></ul></blockquote><h5 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h5><p>用户画像社交媒体流派用户画像模型构建的要点有:</p><p>一是注重对用户==社交媒体社会关系==的描绘;</p><p>二是注重用户数据的==群体性特征==，根据相似性等指标将用户划分为具有某一共同标签的群体。</p><h5 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h5><p>网络世界的虚拟性，可能与现实世界用户形象完全不同。</p><p>用户画像社交媒体流派的研究还需要对搜集到的社交媒体<strong>用户数据的真实性</strong>进行辨别，以便提高用户画像的准确性。</p><h4 id="2-3-兴趣流派"><a href="#2-3-兴趣流派" class="headerlink" title="2.3 兴趣流派"></a>2.3 兴趣流派</h4><h5 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h5><p>用户画像兴趣流派的研究特征主要体现在︰用户画像模型构建时是以==用户兴趣、偏好等用户数据==为基础。</p><h5 id="相关研究-2"><a href="#相关研究-2" class="headerlink" title="相关研究"></a>相关研究</h5><blockquote><p>国外代表性的研究成果主要有</p><ul><li>Godoy等研究者采用聚类方法对用户浏览过的网页痕迹数据进行分析，以此来挖掘用户的兴趣、偏好等特征;</li><li>Paxani等研究者对用户生成的兴趣标签进行分析，总结用户兴趣建档方法;</li><li>Li等研究者对用户和社会化标签进行共现分析(Co-occurrence Analysis）来发现用户兴趣，利用主题聚类方法来划分用户兴趣主题﹔依据用户兴趣进行用户画像模型构建，从而提高个性化搜索的性能﹔</li><li>采用潜在狄利克雷分布(Latent Dirichlet Allocation，LDA）主题模型来分析用户所关注的文档，挖掘用户兴趣主题并实现其可视化展示。</li></ul><p>国内代表性的研究成果主要有︰</p><ul><li>石宇等研究者以电影数据为例，采集和分析用户感兴趣资源的相关数据，构建用户兴趣画像模型﹔</li><li>王顺箸以图书馆智慧推荐系统为例，采集和分析了图书馆读者的数据，构建读者兴趣用户画像模型﹔</li><li>王庆等研究者以图书馆馆藏资源推荐为例，采集和分析了图书馆读者的兴趣数据，构建了单用户兴趣画像模型和多用户兴趣画像模型呵﹔</li><li>赵开慧采用聚类方法对用户标签和资源标签进行分析，实现用户内容的推荐R﹔</li><li>夏立新等研究者利用LDA主题模型分析用户标签的主题，探索用户兴趣层级演化规律，发现了始终处于核心层、核心层向边缘层淡化和始终处于边缘层的3种用户兴趣层级状态;</li><li>唐晓波等研究者以新浪微博为例，分析了新浪微博用户的兴趣主题，构建用户画像并实现个性化的信息推荐</li></ul></blockquote><p>可见，用户兴趣流派的用户画像模型构建主要是以==用户兴趣数据==为基础。</p><p>与用户画像行为流派和用户画像社交媒体流派不同，这种流派在描述用户画像时，<strong>重点关注用户的兴趣而非用户本身</strong>。</p><p>根据用户喜欢的商品或者兴趣点等数据进行深入的挖掘与分析，发现用户兴趣的特征与规律，以便将相似的产品或者服务推荐给感兴趣的用户。</p><h4 id="2-4-基于本体的用户画像流派"><a href="#2-4-基于本体的用户画像流派" class="headerlink" title="2.4 基于本体的用户画像流派"></a>2.4 基于本体的用户画像流派</h4><h5 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h5><p>基于本体（Ontology)的用户画像流派是从==本体的角度对用户数据进行规范化的提取、定义、表达、组织和评<br>价==，构建一套能被广为接受和理解的用户数据本体体系，以便用户画像模型构建的重用和共享。</p><h5 id="相关研究-3"><a href="#相关研究-3" class="headerlink" title="相关研究"></a>相关研究</h5><blockquote><p>国外代表性的研究有:</p><ul><li>Chen等研究者提出了一种基于本体的用户画像建模方法，以树图和空间图为基础;</li><li>Razmerita等人提出了基于本体的用户画像模型架构，并应用该用户画像架构进行知识管理领域的移动用户行为研究I;</li><li>Issam等人描述了一种基于通用本体的用户建模技术，以满足用户画像的需求;</li><li>Hawalah等人将用户兴趣表示为本体概念，本体概念通过将用户访问的网页映射到参考本体来构建，然后被用于学习短期和长期兴趣的挖掘与分析</li></ul><p>国内代表性的研究有:</p><ul><li>郑建兴等人以微博为例，利用本体的部分结构来表示用户画像模型，提出了neighbor - user画像的实现方法，以便全面地反映用户兴趣</li><li>唐晓波等人构建了一种基于本体和标签的个性化推荐模型，并发现该模型优于传统的基于社会化标签的推荐</li><li>姜建武等人用结构化信息本体来表示抽象的用户，构建数学模型来研究结构化信息本体的提取方法</li></ul></blockquote><h5 id="优缺点-1"><a href="#优缺点-1" class="headerlink" title="优缺点"></a>优缺点</h5><p>可见，基于本体的用户画像模型构建流派相较于其它用户画像构建流派能够<strong>考虑信息源包含的具体含义</strong>，并且在语义表达能力以及逻辑推理方面具有更强的优势。</p><p>但同时也应该注意的是，该流派的研究技术性比较强，通常要求研究人员具备计算机等学科知识。</p><h5 id="什么是本体"><a href="#什么是本体" class="headerlink" title="什么是本体"></a>什么是本体</h5><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200922154439.png" alt="image-20200922154439701"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200922154455.png" alt="image-20200922154455075"></p><h3 id="3-应用领域"><a href="#3-应用领域" class="headerlink" title="3. 应用领域"></a>3. 应用领域</h3><p>主要在电子商务，图书馆，健康医疗，旅游业等。</p><h4 id="3-1-电子商务领域"><a href="#3-1-电子商务领域" class="headerlink" title="3.1 电子商务领域"></a>3.1 电子商务领域</h4><p>在电子商务领域，用户画像的应用研究主要集中于针对客户特征的==个性化商品或服务信息的精准推荐==。</p><blockquote><p>例如:<br>YouTube、Neflix等根据用户的浏览记录、点击记录等向用户推送他们可能感兴趣的视频或电影。</p><p>在线购物网站等也会通过浏览器、网络爬虫等工具捕获用户行为数据，推荐用户浏览他们最有可能购买的商品。</p><p>洪亮等人以淘宝等电商平台为例，运用准确性、时效性、新颖性3个指标对不同电子商务网站的个性化信息推荐系统的用户体验认可度进行比较和分析﹔</p><p>李佳慧等人根据用户的消费习惯等特征和规律，利用RFM（最近一次消费(Recency)、消费频次(Frequency）以及消费金额（Monetary)〉模型辨别用户的潜在价值，构建用户画像以实现精准营销。</p></blockquote><p>主要作用：</p><ul><li>精准营销</li><li>广告投放</li><li>信息推荐</li></ul><h4 id="3-2-医疗健康领域"><a href="#3-2-医疗健康领域" class="headerlink" title="3.2 医疗健康领域"></a>3.2 医疗健康领域</h4><p>用户画像在医疗领域应用的研究成果较为丰富，研究主题主要聚焦于==高效率、高效益地处理好海量用户医疗数据==。</p><p>在此基础上对患者进行用户画像的构建，以便为每一位患者进行==精准医疗健康信息服务==。</p><blockquote><p>国外代表性的研究主要有:</p><ul><li>Lerouge等人通过用户数据构建老年慢性病用户画像，并根据这类用户的需求特征，研发面向老年慢性病用户的应用程序和健康信息推荐系统;</li><li>Wang等人提出了一个健康信息管理，该模型集中了个人信息的管理，使检索到的健康和医疗信息个性化。此前，该模型还考虑了检索信息的性能和用户隐私保护之间的权衡;</li><li>Abidi等人根据用户的谈话内容进行健康信息的推荐﹔</li></ul><p>国内代表性的研究主要有︰</p><ul><li>唐晖岚等研究者通过采集书签数据对用户健康信息行为的特征等属性进行提取，构建用户画像模型并对用户未来的健康行为进行预测﹔</li><li>马费成等研究者尝试通过语义网络，构建用户健康画像的方案来实现精准化智慧健康服务﹔</li><li>张海涛等研究者运用Python自编的程序采集和分析在线健康社区的用户数据，构建在线健康社区用户画像模型，采用关联规则方法来挖掘不同用户群体行为规律的差异。</li></ul></blockquote><p>文献调查表明，与国外相比，国内用户画像在医疗领域的应用尚处于==起步阶段==。</p><h4 id="3-3-旅游领域"><a href="#3-3-旅游领域" class="headerlink" title="3.3 旅游领域"></a>3.3 旅游领域</h4><p>用户画像在旅游行业的应用主要体现在旅游网站==在线旅游产品的精准推荐、旅游线路相关信息的精准服务==等方面。</p><blockquote><p>国内外代表性的研究主要有:</p><ul><li>Ravi等研究者对用户兴趣、用户评价等数据进行挖掘与分析、提取用户特征、构建用户画像模型，综合用户地理位置等数据，实现为不同的用户个性化推荐出游方案的目的;</li><li>Nilashi 采用协同过滤(Collaborative Filtering，CF）技术试图根据来自相似用户的数据来预测哪些信息将可以满足用户的需求，从而为潜在客户推荐适合的旅游线路﹔</li><li>单晓红等研究者以携程网北京地区酒店的在线评论为例，对酒店用户本体、用户评论中对产品的情感倾向进行构建，刻画酒店用户的用户画像，以便进行精准营销以及更完善的个性化服务﹔</li><li>常亮等研究者尝试构建基于用户个性化需求的旅游推荐系统，该系统主要包括用户模块以及成果展示即旅游信息推荐模块R。</li></ul></blockquote><p>国内外用户画像在旅游行业的应用尚处于==初级阶段==</p><p>现有研究：主要关注以用户基本数据、兴趣数据、行为数据为基础的用户画像</p><p>待加强：多维度、综合性的用户画像模型及其应用等方面</p><h4 id="3-4-图书馆领域"><a href="#3-4-图书馆领域" class="headerlink" title="3.4 图书馆领域"></a>3.4 图书馆领域</h4><p>图书馆作为公共文化场所，具有教育、提供信息服务的职能，为了更好地服务读者，为读者提供==精准的信息服务==，用户画像在图书馆领域的应用研究日益受到了学界的重视。</p><blockquote><ul><li>早在1985年，英国国家书目和Blaise - line通过电话采访和个人访谈的方式调查用户对英国国家书目和Blaise -line 的使用情况并形成相关分析，来优化信息服务</li><li>Thompson”发现用户画像是优秀的图书馆服务营销工具，应用用户画像技术可以实现图书馆的精准信息服务</li><li>Johannsen发现用户画像设计方法已经在工业、情报学研究和学术图书馆研究中得到了成功应用，相信他们能在公共图书馆中成功地应用。</li></ul><p>国内方面近年来关于用户画像在图书馆领域的研究逐渐增多，代表性的研究主要有:</p><ul><li>陈添源基于移动图书馆特定情境下，构建其用户画像标签体系，以标签体系设计问卷并调研高校移动图书馆用户的人口统计属性、使用行为和使用心理偏好等变量，利用因子分析、聚类分析和判别分析法选取适宜的用户画像个数，为图书馆应用用户画像提供支持﹔</li><li>梁荣贤回顾和梳理了国内外用户画像研究的动态与发展趋势，提出我国图书馆领域应用用户画像的建议﹔</li><li>李丹等研究者尝试通过构建图书馆读者用户画像来优化图书馆的推荐系统，以此提高图书馆的信息服务水平。</li></ul></blockquote><p>可见，目前用户画像在图书馆应用领域的研究主要集中在图书馆的==个性化信息推荐服务==上，其主要目的是通过用户画像的应用，<strong>提高图书馆用户信息服务的精准程度</strong>。</p><h3 id="4-现状述评"><a href="#4-现状述评" class="headerlink" title="4. 现状述评"></a>4. 现状述评</h3><p>尚有不足：</p><ol><li>用户画像构建维度较为单一<ul><li>显性/隐性：现研究基础/行为/兴趣等基本数据，多为显性；内容/社会关系网络等隐性信息不够深入。</li><li>纵向/横向：对不同平台，不同时间段</li><li>未来重点：动态跟踪挖掘用户数据特征与规律，动态性/真实性</li></ul></li><li>应用领域研究发展不均<ul><li>电商：较为成熟</li><li>图书馆：正在增加</li><li>旅游/医疗：起步较晚成果不多。</li><li>医疗目前只是已有信息，缺乏预测。</li></ul></li><li>缺乏评价和反馈机制<ul><li>真实性/准确性缺乏评价，可以增加“反馈”机制。</li><li>虚假信息/信息滞后性/研究人员理解能力偏差</li></ul></li><li>隐私问题凸显</li></ol><h4 id="5-总结"><a href="#5-总结" class="headerlink" title="5. 总结"></a>5. 总结</h4><p>背景</p><p>用户画像概念及作用</p><p>研究流派</p><p>构建流程</p><p>应用领域及现状</p><p>不足之处</p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
            <tag> 论文翻译 </tag>
            
            <tag> 用户画像 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Keras文本处理</title>
      <link href="2020/07/22/keras%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/"/>
      <url>2020/07/22/keras%E6%96%87%E6%9C%AC%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="Keras文本处理"><a href="#Keras文本处理" class="headerlink" title="Keras文本处理"></a>Keras文本处理</h1><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><p><u>1.只用带标签的数据和标签 不要关键字 用LSTM分一次类 tokennizer</u> </p><p><u>2.Word2vec</u></p><p>3.用标签 + 关键字  用1、2准确度高的方法做  cnn lstm双输入，智能合约放lstm，关键字放CNN</p><p>4.把dataset没有标签的分配标签和关键字，重复上面三个</p><p>5.选出文件最大的前几个，执行4</p><p>结果：  召回率   准确率   F1       迭代次数 2或5代</p><h2 id="Word2Vec"><a href="#Word2Vec" class="headerlink" title="Word2Vec"></a>Word2Vec</h2><h2 id="Tokenizer"><a href="#Tokenizer" class="headerlink" title="Tokenizer"></a>Tokenizer</h2><p>[Keras中文文档——关于文本预处理](<a href="https://keras-cn.readthedocs.io/en/latest/preprocessing/text/#_1">https://keras-cn.readthedocs.io/en/latest/preprocessing/text/#_1</a> ↩︎)</p><p>Tokenizer是一个用于向量化文本，或<strong>将文本转换为序列</strong>（即<strong>单个字词以及对应下标构成的列表，从1算起</strong>）的类。是用来文本预处理的第一步：<strong>分词</strong>。结合简单形象的例子会更加好理解些。</p><h3 id="1-语法"><a href="#1-语法" class="headerlink" title="1.语法"></a>1.语法</h3><p>官方语法如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">keras.preprocessing.text.Tokenizer(num_words=<span class="literal">None</span>,</span><br><span class="line">                                   filters=<span class="string">'!"#$%&amp;()*+,-./:;&lt;=&gt;?@[\]^_`{|}~\t\n'</span>,</span><br><span class="line">                                   lower=<span class="literal">True</span>,</span><br><span class="line">                                   split=<span class="string">" "</span>,</span><br><span class="line">                                   char_level=<span class="literal">False</span>)</span><br></pre></td></tr></tbody></table></figure><h4 id="1-1-构造参数"><a href="#1-1-构造参数" class="headerlink" title="1.1 构造参数"></a>1.1 构造参数</h4><ul><li>num_words： <strong>默认是None</strong>，处理所有字词。<pre><code>        但是如果设置成**一个整数**，那么最后返回的是最常见的、出现**频率最高的num_words个字词**。</code></pre></li><li>filters：<strong>过滤一些特殊字符</strong>，默认上文的写法就可以了。</li><li>lower：全部转为<strong>小写</strong></li><li>split：字符串，单词的<strong>分隔符</strong>，如空格</li><li><u><em>char_level: 如果为 True, 每个字符将被视为一个标记</em></u></li></ul><h4 id="1-2-返回值"><a href="#1-2-返回值" class="headerlink" title="1.2 返回值"></a>1.2 返回值</h4><p>字符串列表</p><h4 id="1-3-类方法"><a href="#1-3-类方法" class="headerlink" title="1.3 类方法"></a>1.3 类方法</h4><p>下面是相关的类方法，部分示例在下一节中均有描述应用。</p><table><thead><tr><th>方法</th><th align="left">参数</th><th>返回值</th><th>备注</th></tr></thead><tbody><tr><td>fit_on_texts(texts)</td><td align="left">texts：要用以训练的文本列表</td><td></td><td></td></tr><tr><td>texts_to_sequences(texts)</td><td align="left">texts：待转为序列的文本列表</td><td>序列的列表，列表中每个序列对应于一段输入文本</td><td></td></tr><tr><td>texts_to_sequences_generator(texts)</td><td align="left">texts：待转为序列的文本列表</td><td>每次调用返回对应于一段输入文本的序列</td><td>本函数是<code>texts_to_sequences</code>的生成器函数版</td></tr><tr><td>texts_to_matrix(texts, mode)</td><td align="left">texts：待向量化的文本列表 mode：‘binary’，‘count’，‘tfidf’，‘freq’之一，默认为‘binary’</td><td>形如<code>(len(texts), nb_words)</code>的numpy array</td><td></td></tr><tr><td>fit_on_sequences(sequences)</td><td align="left">sequences：要用以训练的序列列表</td><td></td><td></td></tr><tr><td>sequences_to_matrix(sequences)</td><td align="left">sequences：待向量化的序列列表 mode：‘binary’，‘count’，‘tfidf’，‘freq’之一，默认为‘binary’</td><td>形如<code>(len(sequences), nb_words)</code>的numpy array</td><td></td></tr></tbody></table><h4 id="1-4-属性"><a href="#1-4-属性" class="headerlink" title="1.4 属性"></a>1.4 属性</h4><ul><li>word_counts:字典，将单词（字符串）映射为它们在<strong>训练期间出现的次数</strong>。仅在调用fit_on_texts之后设置。</li><li>word_docs: 字典，将单词（字符串）映射为它们在<strong>训练期间所出现的文档或文本的数量</strong>。仅在调用fit_on_texts之后设置。</li><li>word_index: 字典，将单词（字符串）映射为它们的<strong>排名或者索引</strong>。仅在调用fit_on_texts之后设置。</li><li>document_count: 整数。分词器被训练的文档（文本或者序列）数量。仅在调用fit_on_texts或fit_on_sequences之后设置。</li></ul><h3 id="2-简单示例"><a href="#2-简单示例" class="headerlink" title="2.简单示例"></a>2.简单示例</h3>  <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">from</span> keras.preprocessing.text <span class="keyword">import</span> Tokenizer</span><br><span class="line">Using TensorFlow backend.</span><br><span class="line"></span><br><span class="line"><span class="comment">#  创建分词器 Tokenizer 对象</span></span><br><span class="line">&gt;&gt;&gt;tokenizer = Tokenizer()</span><br><span class="line"></span><br><span class="line"><span class="comment">#  text</span></span><br><span class="line">&gt;&gt;&gt;text = [<span class="string">"今天 北京 下 雨 了"</span>, <span class="string">"我 今天 加班"</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#  fit_on_texts 方法, 将要训练的文本传入</span></span><br><span class="line">&gt;&gt;&gt;tokenizer.fit_on_texts(text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#  word_counts属性，将单词（字符串）映射为它们在训练期间出现的次数。仅在调用fit_on_texts之后设置。</span></span><br><span class="line">&gt;&gt;&gt;tokenizer.word_counts</span><br><span class="line">OrderedDict([(<span class="string">'今天'</span>, <span class="number">2</span>),</span><br><span class="line">             (<span class="string">'北京'</span>, <span class="number">1</span>),</span><br><span class="line">             (<span class="string">'下'</span>, <span class="number">1</span>),</span><br><span class="line">             (<span class="string">'雨'</span>, <span class="number">1</span>),</span><br><span class="line">             (<span class="string">'了'</span>, <span class="number">2</span>),</span><br><span class="line">             (<span class="string">'我'</span>, <span class="number">1</span>),</span><br><span class="line">             (<span class="string">'加班'</span>, <span class="number">1</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment">#  word_docs属性，将单词（字符串）映射为它们在训练期间所出现的文档或文本的数量。仅在调用fit_on_texts之后设置。</span></span><br><span class="line">&gt;&gt;&gt;tokenizer.word_docs</span><br><span class="line">defaultdict(<span class="built_in">int</span>, {<span class="string">'下'</span>: <span class="number">1</span>, <span class="string">'北京'</span>: <span class="number">1</span>, <span class="string">'今天'</span>: <span class="number">2</span>, <span class="string">'雨'</span>: <span class="number">1</span>, <span class="string">'了'</span>: <span class="number">2</span>, <span class="string">'我'</span>: <span class="number">1</span>, <span class="string">'加班'</span>: <span class="number">1</span>})</span><br><span class="line"></span><br><span class="line"><span class="comment">#  word_index属性，将单词（字符串）映射为它们的排名或者索引。仅在调用fit_on_texts之后设置。</span></span><br><span class="line">&gt;&gt;&gt;tokenizer.word_index</span><br><span class="line">{<span class="string">'今天'</span>: <span class="number">1</span>, <span class="string">'了'</span>: <span class="number">2</span>, <span class="string">'北京'</span>: <span class="number">3</span>, <span class="string">'下'</span>: <span class="number">4</span>, <span class="string">'雨'</span>: <span class="number">5</span>, <span class="string">'我'</span>: <span class="number">6</span>, <span class="string">'加班'</span>: <span class="number">7</span>}</span><br><span class="line"></span><br><span class="line"><span class="comment">#  document_count属性</span></span><br><span class="line">&gt;&gt;&gt;tokenizer.document_count</span><br><span class="line"><span class="number">2</span></span><br></pre></td></tr></tbody></table></figure><h3 id="3-常用示例"><a href="#3-常用示例" class="headerlink" title="3.常用示例"></a>3.常用示例</h3><p>  还以上面的tokenizer对象为基础，经常会使用<code>texts_to_sequences()</code>方法 和 序列预处理方法 <code>keras.preprocessing.sequence.pad_sequences</code>一起使用。</p><p>Code.3.1 常用示例</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;tokenizer.texts_to_sequences([<span class="string">"下 雨 我 加班"</span>])</span><br><span class="line">[[<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;keras.preprocessing.sequence.pad_sequences(tokenizer.texts_to_sequences([<span class="string">"下 雨 我 加班"</span>]), maxlen=<span class="number">20</span>)</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]],dtype=int32)</span><br></pre></td></tr></tbody></table></figure><p>有关pad_sequences用法见python函数——序列预处理pad_sequences()序列填充</p><blockquote><h2 id="序列预处理pad-sequences-序列填充"><a href="#序列预处理pad-sequences-序列填充" class="headerlink" title="序列预处理pad_sequences()序列填充"></a><a href="https://blog.csdn.net/wcy23580/article/details/84957471">序列预处理pad_sequences()序列填充</a></h2><p>为了实现的简便，keras只能接受长度相同的序列输入。因此如果目前序列长度参差不齐，这时需要使用<strong>pad_sequences()<strong>。该函数是</strong>将序列转化为经过填充以后的一个长度相同的新序列</strong>。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">keras.preprocessing.sequence.pad_sequences(sequences, </span><br><span class="line">maxlen=<span class="literal">None</span>,</span><br><span class="line">dtype=<span class="string">'int32'</span>,</span><br><span class="line">padding=<span class="string">'pre'</span>,</span><br><span class="line">truncating=<span class="string">'pre'</span>, </span><br><span class="line">value=<span class="number">0.</span>)</span><br></pre></td></tr></tbody></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>sequences：浮点数或整数构成的两层嵌套列表</li><li>maxlen：None或整数，为序列的最大长度。大于此长度的序列将被截短，小于此长度的序列将在后部填0.</li><li>dtype：返回的numpy array的数据类型</li><li>padding：‘pre’或‘post’，确定当需要补0时，在序列的起始还是结尾补`</li><li>truncating：‘pre’或‘post’，确定当需要截断序列时，从起始还是结尾截断</li><li>value：浮点数，此值将在填充时代替默认的填充值0</li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>返回的是个2维张量，长度为maxlen</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt;list_1 = [[<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]]</span><br><span class="line">&gt;&gt;&gt;keras.preprocessing.sequence.pad_sequences(list_1, maxlen=<span class="number">10</span>)</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]], dtype=int32)</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt;list_2 = [[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]]</span><br><span class="line">&gt;&gt;&gt;keras.preprocessing.sequence.pad_sequences(list_2, maxlen=<span class="number">10</span>)</span><br><span class="line">array([[<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]], dtype=int32)</span><br></pre></td></tr></tbody></table></figure></blockquote><h1 id="过程总结："><a href="#过程总结：" class="headerlink" title="过程总结："></a>过程总结：</h1><pre><code>1. 下载数据集（或者从文件中加载），读取到一个变量/数组中2. 使用Tokenizer，将数组fit进去，生成一个字典3. 再使用token.texts_to_sequences,将数据放进去生成序列（数字列表）4. 然后可以使用pad_sequences对生成的序列进行长度控制，让他们长度一致5. 建立模型，模型中第一个是Embedding词嵌入层，将数字列表转换为向量6. 然后中间就开始搭建神经网络，训练，评测即可。</code></pre><h2 id="具体："><a href="#具体：" class="headerlink" title="具体："></a>具体：</h2><h3 id="Tokenizer函数"><a href="#Tokenizer函数" class="headerlink" title="Tokenizer函数"></a>Tokenizer函数</h3><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tokennizer</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span>():</span></span><br><span class="line">    <span class="built_in">all</span> = train_x</span><br><span class="line">    tokenizer = Tokenizer(num_words=<span class="number">80000</span>)  <span class="comment"># 分词MAX_NB_WORDS</span></span><br><span class="line">    </span><br><span class="line">    tokenizer.fit_on_texts(train_x)  <span class="comment"># 将数据放入</span></span><br><span class="line">    </span><br><span class="line">    sequences_context = tokenizer.texts_to_sequences(train_x)  <span class="comment"># 受num_words影响</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 词语数据，截取长度</span></span><br><span class="line">    data_context = sequence.pad_sequences(sequences_context, maxlen=<span class="number">500</span>)  <span class="comment"># 将长度不足 100 的新闻用 0 填充（在前端填充）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 标签，改为one-hot</span></span><br><span class="line">    labels = utils.to_categorical(np.asarray(label_y))  <span class="comment"># 最后将标签处理成 one-hot 向量，比如 6 变成了 [0,0,0,0,0,0,1,0,0,0,0,0,0]，</span></span><br><span class="line">    labels_test = utils.to_categorical(np.asarray(label_y))</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Shape of data tensor:'</span>, data_context.shape)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'Shape of label tensor:'</span>, labels.shape)</span><br><span class="line">    <span class="keyword">return</span> data_context, labels</span><br><span class="line"><span class="comment"># 不用feature</span></span><br></pre></td></tr></tbody></table></figure><p>这时候就将文本转换为数字列表了。因为神经网络里面只能输入数字。</p><h3 id="搭建模型，训练数据"><a href="#搭建模型，训练数据" class="headerlink" title="搭建模型，训练数据"></a>搭建模型，训练数据</h3><h4 id="划分为训练集和测试集"><a href="#划分为训练集和测试集" class="headerlink" title="划分为训练集和测试集"></a>划分为训练集和测试集</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 训练模型，并保存</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span>():</span></span><br><span class="line">    <span class="comment"># 通过tokenizer取得数据，标签</span></span><br><span class="line">    data_context, labels = data_vector.get_data()</span><br><span class="line">    <span class="comment"># 划分训练和测试集</span></span><br><span class="line">    x_train, x_test, y_train, y_test = train_test_split(data_context, labels, test_size=<span class="number">0.2</span>)</span><br><span class="line">    <span class="comment"># 这里搭建好模型就直接一起训练了</span></span><br><span class="line">    train_lstm(x_train, y_train, x_test, y_test)</span><br></pre></td></tr></tbody></table></figure><p>搭建模型和训练的代码放一个函数里了：</p><h4 id="搭建模型"><a href="#搭建模型" class="headerlink" title="搭建模型"></a>搭建模型</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">##定义网络结构</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_lstm</span>(<span class="params">x_train, y_train, x_test, y_test</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'train'</span>)</span><br><span class="line">    model = Sequential()  <span class="comment"># or Graph or whatever</span></span><br><span class="line">    model.add(Embedding(output_dim=vocab_dim,</span><br><span class="line">                        input_dim=input_dim,</span><br><span class="line">                        mask_zero=<span class="literal">True</span>,</span><br><span class="line">                        input_length=input_length))  <span class="comment"># Adding Input Length</span></span><br><span class="line">    model.add(LSTM(units=<span class="number">50</span>))</span><br><span class="line">    model.add(Dropout(<span class="number">0.5</span>))</span><br><span class="line">    model.add(Dense(<span class="number">16</span>))</span><br><span class="line">    model.add(Activation(<span class="string">'softmax'</span>))</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h4 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">metrics = Metrics()</span><br><span class="line"></span><br><span class="line">model.<span class="built_in">compile</span>(loss=<span class="string">'binary_crossentropy'</span>,</span><br><span class="line">              optimizer=<span class="string">'adam'</span>, metrics=[<span class="string">'accuracy'</span>])</span><br><span class="line"></span><br><span class="line">model.fit(x_train, y_train,</span><br><span class="line">          batch_size=batch_size,</span><br><span class="line">          epochs=n_epoch,</span><br><span class="line">          validation_data=(x_test, y_test),</span><br><span class="line">          callbacks=[metrics])</span><br><span class="line">score, acc = model.evaluate(x_test, y_test, batch_size=batch_size)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Test score:'</span>, score)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'Test accuracy:'</span>, acc)</span><br></pre></td></tr></tbody></table></figure><h4 id="存储模型"><a href="#存储模型" class="headerlink" title="存储模型"></a>存储模型</h4><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yaml_string = model.to_yaml()</span><br><span class="line"> <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">'lstm.yml'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> outfile:</span><br><span class="line">     outfile.write(yaml.dump(yaml_string, default_flow_style=<span class="literal">True</span>))</span><br><span class="line"> model.save_weights(<span class="string">'lstm.h5'</span>)</span><br></pre></td></tr></tbody></table></figure><p>其中Metrics是一个回调类,用来输出f1,召回率，准确率：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Metrics</span>(<span class="params">Callback</span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_train_begin</span>(<span class="params">self, logs={}</span>):</span></span><br><span class="line">        self.val_f1s = []</span><br><span class="line">        self.val_recalls = []</span><br><span class="line">        self.val_precisions = []</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_epoch_end</span>(<span class="params">self, epoch, logs={}</span>):</span></span><br><span class="line">        val_predict = (np.asarray(self.model.predict(self.validation_data[<span class="number">0</span>]))).<span class="built_in">round</span>()  <span class="comment">##.model</span></span><br><span class="line">        val_targ = self.validation_data[<span class="number">1</span>]  <span class="comment">###.model</span></span><br><span class="line">        _val_f1 = f1_score(val_targ, val_predict, average=<span class="string">'micro'</span>)</span><br><span class="line">        _val_recall = recall_score(val_targ, val_predict, average=<span class="string">'micro'</span>)  <span class="comment">###</span></span><br><span class="line">        _val_precision = precision_score(val_targ, val_predict, average=<span class="string">'micro'</span>)  <span class="comment">###</span></span><br><span class="line">        self.val_f1s.append(_val_f1)</span><br><span class="line">        self.val_recalls.append(_val_recall)</span><br><span class="line">        self.val_precisions.append(_val_precision)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'_val_f1: '</span>, _val_f1)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'_val_recall: '</span>, _val_recall)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">'_val_precision: '</span>, _val_precision)</span><br><span class="line">        fls.append(_val_f1)</span><br><span class="line">        rec.append(_val_recall)</span><br><span class="line">        pre.append(_val_precision)</span><br><span class="line">        <span class="comment"># print("— val_f1: %f — val_precision: %f — val_recall: %f" %(_val_f1, _val_precision, _val_recall))</span></span><br><span class="line">        <span class="keyword">return</span></span><br></pre></td></tr></tbody></table></figure>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
            <tag> 实验 </tag>
            
            <tag> Python </tag>
            
            <tag> Keras </tag>
            
            <tag> 文本处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap基础03——常用组件</title>
      <link href="2020/06/23/Bootstrap%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/"/>
      <url>2020/06/23/Bootstrap%E5%B8%B8%E7%94%A8%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>h1. Bootstrap heading<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2. Bootstrap heading<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h3</span>&gt;</span>h3. Bootstrap heading<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span>&gt;</span>h4. Bootstrap heading<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>h5. Bootstrap heading<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h6</span>&gt;</span>h6. Bootstrap heading<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"h1"</span>&gt;</span>文本尝试（Text Try)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"h2"</span>&gt;</span>文本尝试（Text Try)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"h3"</span>&gt;</span>文本尝试（Text Try)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"h4"</span>&gt;</span>文本尝试（Text Try)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"h5"</span>&gt;</span>文本尝试（Text Try)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"h6"</span>&gt;</span>文本尝试（Text Try)<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>Bootstrap对默认的样式也做了优化。</p><p>这里的这两种效果是完全一样的看起来，不过还是建议使用</p><h1>的这种方式，因为比如百度抓取标题关键词的时候是只会抓取h1里面的而不会抓取p标签里面的。<p></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125808326.png" alt="image-20200329125808326"></p></h1><h2 id="副标题"><a href="#副标题" class="headerlink" title="副标题"></a>副标题</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"h1"</span>&gt;</span></span><br><span class="line">    文本尝试 </span><br><span class="line">    <span class="tag">&lt;<span class="name">small</span> <span class="attr">class</span>=<span class="string">"text-muted"</span>&gt;</span>（Text Try)<span class="tag">&lt;/<span class="name">small</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里small就是副标题，加上一个text-muted类让它的颜色改变，显得更像副标题。</p><h2 id="中心内容"><a href="#中心内容" class="headerlink" title="中心内容"></a>中心内容</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"lead"</span>&gt;</span></span><br><span class="line">    Vivamus sagittis lacus vel augue laoreet rutrum faucibus dolor auctor. Duis mollis, est non commodo luctus.</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>lead类定义一个中心文本，也就是比较显眼的文本。可以看到下面加了lead的和上面的不同。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125818689.png" alt="image-20200329125818689"></p><h2 id="语义化标签"><a href="#语义化标签" class="headerlink" title="语义化标签"></a>语义化标签</h2><p>比如这种，有很多。不再一一列举。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">code</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">code</span>&gt;</span>是一杯咖啡。</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125824850.png" alt="image-20200329125824850"></p><h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><h3 id="略缩图"><a href="#略缩图" class="headerlink" title="略缩图"></a>略缩图</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"padding: 100px"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--thumbnail略缩图--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/miaonei.jpg"</span> <span class="attr">alt</span>=<span class="string">"喵内噶"</span> <span class="attr">class</span>=<span class="string">"img-thumbnail"</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>这里给body加了个边距，然后显示出来。</p><p>PS: 翻译 thumbnin：“指甲，极小的东西”</p><ul><li>img-thumbnain：有圆角，边框，响应式。<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125859545.png" alt="image-20200329125859545"></li></ul><p>这里Bootstrap里的响应式和普通的%宽度还不太一样。Bootstrap的类的响应式是只有屏幕小到一定程度之后才触发；而%的响应式是随时都会变，屏幕变大一点图片就变大一点。</p><h3 id="普通图片"><a href="#普通图片" class="headerlink" title="普通图片"></a>普通图片</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/halu.jpg"</span> <span class="attr">alt</span>=<span class="string">"哈鲁酱"</span> <span class="attr">class</span>=<span class="string">"img-fluid"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>就只是比略缩图少了点东西，其他一样。自适应。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125908698.png" alt="image-20200329125908698"></p><h3 id="左右浮动"><a href="#左右浮动" class="headerlink" title="左右浮动"></a>左右浮动</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/miaonei.jpg"</span> <span class="attr">alt</span>=<span class="string">"喵内噶"</span> <span class="attr">class</span>=<span class="string">"img-thumbnail float-left"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/halu.jpg"</span> <span class="attr">alt</span>=<span class="string">"哈鲁酱"</span> <span class="attr">class</span>=<span class="string">"img-fluid float-right"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125918214.png" alt="image-20200329125918214"></p><h3 id="不同屏幕"><a href="#不同屏幕" class="headerlink" title="不同屏幕"></a>不同屏幕</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">picture</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"img/abi.jpg"</span>  <span class="attr">media</span>=<span class="string">"(min-width: 1000px)"</span> <span class="attr">class</span>=<span class="string">"img-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"img/halu.jpg"</span>  <span class="attr">media</span>=<span class="string">"(min-width: 800px)"</span> <span class="attr">class</span>=<span class="string">"img-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">source</span> <span class="attr">srcset</span>=<span class="string">"img/miaonei.jpg"</span> <span class="attr">media</span>=<span class="string">"(min-width: 500px)"</span> <span class="attr">class</span>=<span class="string">"img-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/nopower.jpg"</span> <span class="attr">alt</span>=<span class="string">"这是当浏览器不支持picture标签时显示的图片"</span> <span class="attr">class</span>=<span class="string">"img-fluid"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">picture</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>h5标签，不同屏幕下显示不同的图片。</p><p>注意source的属性是srcset，Bootstrap中文站的代码少了个set。</p><h1 id="常用组件"><a href="#常用组件" class="headerlink" title="常用组件"></a>常用组件</h1><h2 id="警告提示框（Alert）"><a href="#警告提示框（Alert）" class="headerlink" title="警告提示框（Alert）"></a>警告提示框（Alert）</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-primary"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line">    This is a primary alert with <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>an example link<span class="tag">&lt;/<span class="name">a</span>&gt;</span>. Give it a click if you like.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-secondary"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line">    This is a secondary alert with <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>an example link<span class="tag">&lt;/<span class="name">a</span>&gt;</span>. Give it a click if you like.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-success"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line">    This is a success alert with <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>an example link<span class="tag">&lt;/<span class="name">a</span>&gt;</span>. Give it a click if you like.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-danger"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line">    This is a danger alert with <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>an example link<span class="tag">&lt;/<span class="name">a</span>&gt;</span>. Give it a click if you like.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line">    This is a warning alert with <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>an example link<span class="tag">&lt;/<span class="name">a</span>&gt;</span>. Give it a click if you like.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-info"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line">    This is a info alert with <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>an example link<span class="tag">&lt;/<span class="name">a</span>&gt;</span>. Give it a click if you like.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-light"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line">    This is a light alert with <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>an example link<span class="tag">&lt;/<span class="name">a</span>&gt;</span>. Give it a click if you like.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-dark"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span></span><br><span class="line">    This is a dark alert with <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"alert-link"</span>&gt;</span>an example link<span class="tag">&lt;/<span class="name">a</span>&gt;</span>. Give it a click if you like.</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>alert：代表这是个警告提示框，里面规定了位置、边框等东西</li><li>alert-xxxx：进一步的规定了带alert的div的颜色、背景、字体样式</li><li>role=“alert”：H5语义化标签，告诉搜索引擎这个div的作用是alert提示框，用途是帮助残疾人，尤其是需要依靠屏幕阅读器和不能使用鼠标的用户</li><li>alert-link：alert提示框里面的超链接，对alert进行了颜色和字体的适配</li></ul><h2 id="面包屑导航"><a href="#面包屑导航" class="headerlink" title="面包屑导航"></a>面包屑导航</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item active"</span> <span class="attr">aria-current</span>=<span class="string">"page"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item active"</span> <span class="attr">aria-current</span>=<span class="string">"page"</span>&gt;</span>Library<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">aria-label</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"breadcrumb"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Library<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"breadcrumb-item active"</span> <span class="attr">aria-current</span>=<span class="string">"page"</span>&gt;</span>Data<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这个面包屑导航就是类似于那种小说阅读目录，或者更适应的例子是文件夹的路径那种。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125940603.png" alt="image-20200329125940603"></p><h2 id="按钮"><a href="#按钮" class="headerlink" title="按钮"></a>按钮</h2><h3 id="按钮样式"><a href="#按钮样式" class="headerlink" title="按钮样式"></a>按钮样式</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span>Secondary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-success"</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-danger"</span>&gt;</span>Danger<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-warning"</span>&gt;</span>Warning<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-info"</span>&gt;</span>Info<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-light"</span>&gt;</span>Light<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-dark"</span>&gt;</span>Dark<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-link"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>按钮的多种样式</p><ul><li>btn：按钮的基本样式，去除原生html里的各种效果</li><li>btn-xxx：重置按钮的颜色、样式</li><li>type=“button”：这里因为本来就是button标签所以说不加也行，主要是为了下面的</li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125948552.png" alt="image-20200329125948552"></p><h3 id="按钮标签（多种按钮）"><a href="#按钮标签（多种按钮）" class="headerlink" title="按钮标签（多种按钮）"></a>按钮标签（多种按钮）</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--多种按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">role</span>=<span class="string">"button"</span>&gt;</span>Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>Button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"Input"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">type</span>=<span class="string">"reset"</span> <span class="attr">value</span>=<span class="string">"Reset"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里表明按钮可以有多种标签，不只是<button>。<br>常见的三种主要就是a、input、button。<br>最好加上语义化标签，就是type=“button”或者其他的什么。<p></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329130006542.png" alt="image-20200329130006542"></p><h3 id="镂空按钮"><a href="#镂空按钮" class="headerlink" title="镂空按钮"></a>镂空按钮</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--按钮轮廓--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-primary"</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-secondary"</span>&gt;</span>Secondary<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-success"</span>&gt;</span>Success<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-danger"</span>&gt;</span>Danger<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-warning"</span>&gt;</span>Warning<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-info"</span>&gt;</span>Info<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-light"</span>&gt;</span>Light<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-dark"</span>&gt;</span>Dark<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>镂空样式的按钮</p><ul><li>btn-outline-xxx：镂空样式的按钮，同时也有多种等级。</li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329130011363.png" alt="image-20200329130023560"></p><h3 id="其余按钮"><a href="#其余按钮" class="headerlink" title="其余按钮"></a>其余按钮</h3><ul><li><p>btn-lg/btn-sm：大按钮，小按钮</p></li><li><p>btn-block：充满全屏的按钮，100%</p></li><li><p>disabled：直接是个属性，而不是class。按钮禁用。</p><blockquote><h4 id="关于按钮的disabled"><a href="#关于按钮的disabled" class="headerlink" title="关于按钮的disabled"></a>关于<a>按钮的disabled</a></h4><ul><a></a><li><a></a><a>``标签不支持 <code>disabled</code> 属性，所以你必须增加 <code>.disabled</code> 属性，使之达到视觉禁用的效果。</a></li><a><li>未来，将包括更多的友好风格，以禁用按钮上的 <code>pointer-events</code> 属性，在支持该属性的浏览器中，会你看不到禁用的光标。</li><li>禁用按钮应包括<code>aria-disabled="true"</code> 用于指示辅助技术元素的状态的属性。</li></a></ul><a></a></blockquote><a></a></li><a></a></ul><a><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--其余按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-lg"</span>&gt;</span>Large button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary btn-sm"</span>&gt;</span>Small button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary "</span> <span class="attr">aria-pressed</span>=<span class="string">"true"</span>&gt;</span>Active-Pressed button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary "</span> <span class="attr">disabled</span>&gt;</span>Disabled button<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary  disabled"</span> <span class="attr">aria-disabled</span>=<span class="string">"true"</span>&gt;</span>Disabled-A button<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329130017539.png" alt="image-20200329130030422"></p></a><h2 id="按钮组"><a></a><a href="#按钮组" class="headerlink" title="按钮组"></a>按钮组</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span> <span class="attr">role</span>=<span class="string">"group"</span> <span class="attr">aria-label</span>=<span class="string">"Button group with nested dropdown"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"btn-group"</span> <span class="attr">role</span>=<span class="string">"group"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btnGroupDrop1"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary dropdown-toggle"</span> <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span> <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">      Dropdown</span><br><span class="line">    <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">aria-labelledby</span>=<span class="string">"btnGroupDrop1"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Dropdown link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>Dropdown link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>按钮组就是一组按钮，用btn-group将btn包括起来。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329130023560.png" alt="image-20200329130011363"></p><p>当然这里的第三个按钮比较特殊，是个下拉式的按钮。这里用的<code>data-toggle=“dropdown”</code>这个属性，好像是触发js里的什么东西。</p><blockquote><p>aria的意思是Accessible Rich Internet Application，aria-*的作用就是描述这个tag在可视化的情境中的具体信息。比如：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">role</span>=<span class="string">"checkbox"</span> <span class="attr">aria-checked</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>辅助工具就会知道，这个div实际上是个checkbox的角色，为选中状态。</p></blockquote><h2 id="卡片Card"><a href="#卡片Card" class="headerlink" title="卡片Card"></a>卡片Card</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card"</span> <span class="attr">style</span>=<span class="string">"width: 30rem;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"card-img-top"</span> <span class="attr">src</span>=<span class="string">"img/miaonei.jpg"</span> <span class="attr">alt</span>=<span class="string">"Card image cap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-body"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"card-title"</span>&gt;</span>你针棒！<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h6</span> <span class="attr">class</span>=<span class="string">"card-subtitle mt-2 mb-2 text-muted"</span>&gt;</span>那你真的很棒棒<span class="tag">&lt;/<span class="name">h6</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-text"</span>&gt;</span>我贴鱼Bill，你们看我这手6不6，口住！藏经阁雅座一位！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>前往藏经阁<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>首先大的div用card包括起来，然后它的宽度是自定义的。没有自定义的话默认100%。</p><p>在card的div里面，可以使用各种card的元素。<br>比如这里使用的：</p><ul><li>card-img-top：位于card顶部的一个图片</li><li>card-body：card的主体，里面包括一些东西</li><li>card-title：card-body中文本的标题</li><li>card-subtitle：card-body中的副标题；不过这里的显示效果是后面几个类控制的<ul><li>mt-2：margin-top-2</li><li>mb-2：margin-bottom-2</li><li>text-muted：灰色字体</li></ul></li><li>card-link：card中的超链接。</li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329130030422.png" alt="image-20200329130017539"></p><p>card里面的内容可以自定义，比如图片和文字可以左右布局，可以指定order排序，可以使用card-img-bottom(但是这里使用时不知道为什么不管用)等等来对card内部进行布局。是非常常用的一个组件。</p><h1 id="轮播图-Carousel"><a href="#轮播图-Carousel" class="headerlink" title="轮播图(Carousel)"></a>轮播图(Carousel)</h1><p>carousel：旋转木马，轮盘传送带，机场的旋转行李传送带</p><h2 id="轮播图例子（注释）"><a href="#轮播图例子（注释）" class="headerlink" title="轮播图例子（注释）"></a>轮播图例子（注释）</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"c1"</span> <span class="attr">class</span>=<span class="string">"carousel slide m-auto w-50"</span> <span class="attr">data-ride</span>=<span class="string">"carousel"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--轮播内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--轮播内容1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-item active"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--轮播图片--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/carousel/GIF.gif"</span> <span class="attr">class</span>=<span class="string">"d-block w-100"</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--轮播图片下面带文本--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption d-none d-md-block"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span>&gt;</span>EX咖喱棒！<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>吾王剑之所指，吾等心之所向！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--当然此处还可加入button，a等等别的标签元素--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-danger"</span>&gt;</span>奥利给！<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--轮播内容2--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/carousel/cimg2.jpg"</span> <span class="attr">class</span>=<span class="string">"d-block w-100"</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption d-none d-md-block"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span>&gt;</span>真香定律<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我棉被王就是饿死，死外面，从这跳下去，也不会吃你们卫宫家一口饭！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--轮播内容3--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/carousel/cimg3.jpg"</span> <span class="attr">class</span>=<span class="string">"d-block w-100"</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption d-none d-md-block"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span>&gt;</span>艾蕾酱真可爱<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>谁说冥界没有花朵，冥界只有一朵盛开的红色的花。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前后翻页--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--a中的这个href#关联到轮播图的div的id上--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"carousel-control-prev"</span> <span class="attr">href</span>=<span class="string">"#c1"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"carousel-control-prev-icon"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"carousel-control-next"</span> <span class="attr">href</span>=<span class="string">"#c1"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"carousel-control-next-icon"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--页数指示器--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--其中的data-target应该也关联到div的id上--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#c1"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#c1"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#c1"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>都在代码里面了。</p><p>这里需要注意的就是那个绑定id。还有就是相关的层次内容，不能用错层次了各种div。</p><h2 id="轮播图例子2（淡入淡出）"><a href="#轮播图例子2（淡入淡出）" class="headerlink" title="轮播图例子2（淡入淡出）"></a>轮播图例子2（淡入淡出）</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"c2"</span> <span class="attr">class</span>=<span class="string">"carousel slide m-auto w-50 carousel-fade"</span> <span class="attr">data-ride</span>=<span class="string">"carousel"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--轮播内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--轮播内容1--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-item active"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--轮播图片--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/carousel/GIF.gif"</span> <span class="attr">class</span>=<span class="string">"d-block w-100"</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--轮播图片下面带文本--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption d-none d-md-block"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span>&gt;</span>EX咖喱棒！<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>吾王剑之所指，吾等心之所向！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--当然此处还可加入button，a等等别的标签元素--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-sm btn-danger"</span>&gt;</span>奥利给！<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--轮播内容2--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/carousel/cimg2.jpg"</span> <span class="attr">class</span>=<span class="string">"d-block w-100"</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption d-none d-md-block"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span>&gt;</span>真香定律<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我棉被王就是饿死，死外面，从这跳下去，也不会吃你们卫宫家一口饭！<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--轮播内容3--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/carousel/cimg3.jpg"</span> <span class="attr">class</span>=<span class="string">"d-block w-100"</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption d-none d-md-block"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span>&gt;</span>艾蕾酱真可爱<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>谁说冥界没有花朵，冥界只有一朵盛开的红色的花。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--前后翻页--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--a中的这个href#关联到轮播图的div的id上--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"carousel-control-prev"</span> <span class="attr">href</span>=<span class="string">"#c2"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"carousel-control-prev-icon"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"carousel-control-next"</span> <span class="attr">href</span>=<span class="string">"#c2"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"carousel-control-next-icon"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--页数指示器--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--其中的data-target应该也关联到div的id上--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#c2"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#c2"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#c2"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>比如这里，加了个淡入淡出的切换效果，就是最外层的carousel-fade属性。</p><p>还可调整轮播每个图片的时间，可以在carousel-item上加个属性，如 <code>   &lt;div class="carousel-item active" data-interval="10000"&gt;</code>，加了data-interval的属性。就是这个图片显示多少时间，然后切换到下一个。1000应该就是1s。</p><h2 id="使用js调整效果"><a href="#使用js调整效果" class="headerlink" title="使用js调整效果"></a>使用js调整效果</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">".carousel"</span>).carousel({</span></span><br><span class="line">            interval: 500</span><br><span class="line">        }</span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><h3 id="通过JavaScript"><a href="#通过JavaScript" class="headerlink" title="通过JavaScript"></a>通过JavaScript</h3><p>通过下面方法使用JS控制轮播(实现自动滚动)：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'.carousel'</span>).carousel()</span><br></pre></td></tr></tbody></table></figure><h3 id="选项"><a href="#选项" class="headerlink" title="选项"></a>选项</h3><p>可以通过<code>data-</code>方法，定义此轮播组件的属性，方法是<code>data-interval=""</code>，实现JavaScript属性的注入，订制此组件的各种形态。</p><table><thead><tr><th>名称</th><th>Type类型</th><th>默认值</th><th>描述</th></tr></thead><tbody><tr><td>interval</td><td>number</td><td>5000</td><td>自动循环项目之间的延迟时间（即滚动时间），如果为false，则整个轮播组件不会自动滚动（仅支持手动滚动）-在调试CSS样式时这很实用。</td></tr><tr><td>keyboard</td><td>boolean</td><td>true</td><td>是否应对键盘事件作出反应，如果选择true则可以通过键盘上的左&lt;-右-&gt;方向键进行切换控制。</td></tr><tr><td>pause</td><td>string | boolean</td><td>“hover”</td><td>如果设置为<code>"hover"</code>, 则鼠标移在动画屏幕上暂停旋转，并在移开鼠标后恢复旋转事件（这是默认属性）；如设置为<code>false</code>,则鼠标移上去轮播动画不会暂停。          在触摸屏幕上，当设置为<code>"hover"</code>属性时，循环将在触控时暂停（一旦用户完成与旋转事件的交互）两个时间间隔自动恢复。 请注意，这是上述鼠标行为的补充。</td></tr><tr><td>ride</td><td>string</td><td>false</td><td>在用户手动循环第一个项目后自动播放传送带， 如果“carousel”则加载时自动播放传送带。</td></tr><tr><td>wrap</td><td>boolean</td><td>true</td><td>转盘是否应该连续循环或难以停止。</td></tr></tbody></table></blockquote><h1 id="模态框"><a href="#模态框" class="headerlink" title="模态框"></a>模态框</h1><p>模态框就是个Bootstrap里面自带的弹框，当然底层是用html+css+js实现的</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 触发按钮 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-target</span>=<span class="string">"#exampleModal"</span>&gt;</span></span><br><span class="line">    弹窗</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 模态框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"exampleModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"exampleModalLabel"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span> <span class="attr">role</span>=<span class="string">"document"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h5</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"exampleModalLabel"</span>&gt;</span>弹窗的标题<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="symbol">&amp;times;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">                弹窗的内容</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>关闭按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>另一个按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里在<code>button</code>中的<code>data-toggle=“modal”</code>和<code>data-target=”#id“</code>是必不可少的，并且绑定到下面的弹框的div的id上。然后<code>role="dialog" aria-labelledby="exampleModalLabel aria-hidden="true""</code>就是语义化的标签了，可以省略。</p><ul><li>data-toggle=“modal”：表明这个按钮的弹出内容是个模态框</li><li>data-target=“id”：绑定到id元素上</li></ul><p>同样这样里也遵循content&gt;header-body-footer这样的一个顺序，和card差不多。还有很多相似的。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329130104519.png" alt="image-20200329130104519"></p><h1 id="导航栏和toolTip"><a href="#导航栏和toolTip" class="headerlink" title="导航栏和toolTip"></a>导航栏和toolTip</h1><h2 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导航栏--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--在这里nav里面，可以自由定制一些样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar navbar-expand-lg navbar-light bg-warning"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--网站铭牌标志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>迦勒底<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--响应式，手机上的那个折叠起来的按钮部分--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"navbar-toggler"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">data-toggle</span>=<span class="string">"collapse"</span> <span class="attr">data-target</span>=<span class="string">"#navbarSupportedContent"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">aria-controls</span>=<span class="string">"navbarSupportedContent"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">aria-label</span>=<span class="string">"Toggle navigation"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"navbar-toggler-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"collapse navbar-collapse"</span> <span class="attr">id</span>=<span class="string">"navbarSupportedContent"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"navbar-nav mr-auto"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--菜单项1--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item active"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>主页 <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>(current)<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--菜单项2--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>简介<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--菜单项3，是个下拉的部分--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item dropdown"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link dropdown-toggle"</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"navbarDropdown"</span> <span class="attr">role</span>=<span class="string">"button"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">data-toggle</span>=<span class="string">"dropdown"</span></span></span><br><span class="line"><span class="tag">                       <span class="attr">aria-haspopup</span>=<span class="string">"true"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">                        转移</span><br><span class="line">                    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--下拉菜单--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-menu"</span> <span class="attr">aria-labelledby</span>=<span class="string">"navbarDropdown"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>冬木<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>巴黎<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dropdown-divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"dropdown-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>月之海<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--菜单项4，不能点击的一项--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"nav-item"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"nav-link disabled"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>禁用<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--搜索框--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">"form-inline my-2 my-lg-0"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"form-control mr-sm-2"</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">placeholder</span>=<span class="string">"查找"</span> <span class="attr">aria-label</span>=<span class="string">"Search"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn btn-outline-success my-2 my-sm-0"</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>都在注释里了。导航栏这里学会定制就可以，根据自己想要的样式改。</p><ul><li>nav-expend-lg：在大屏幕之上展开，在大屏幕之下折叠起来。响应式。</li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329130133997.png" alt="image-20200329130133997"></p><ul><li><p>nav-light：背景为亮色时，字体的颜色（黑色；相反的nav-dark字体显示为白色）</p></li><li><p>bg-success：背景色为success的颜色（绿色）</p></li></ul><h2 id="toolTip"><a href="#toolTip" class="headerlink" title="toolTip"></a>toolTip</h2><p>toolTip就是指的这种提示方式：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329130144482.png" alt="image-20200329130144482"></p><p>实现的时候需要html+js</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"padding: 100px"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span> <span class="attr">data-toggle</span>=<span class="string">"tooltip"</span> <span class="attr">data-placement</span>=<span class="string">"top"</span> <span class="attr">title</span>=<span class="string">"上面提示"</span>&gt;</span></span><br><span class="line">    这个按钮上面</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span> <span class="attr">data-toggle</span>=<span class="string">"tooltip"</span> <span class="attr">data-placement</span>=<span class="string">"right"</span> <span class="attr">title</span>=<span class="string">"Tooltip on right"</span>&gt;</span></span><br><span class="line">    Tooltip on right</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span> <span class="attr">data-toggle</span>=<span class="string">"tooltip"</span> <span class="attr">data-placement</span>=<span class="string">"bottom"</span> <span class="attr">title</span>=<span class="string">"Tooltip on bottom"</span>&gt;</span></span><br><span class="line">    Tooltip on bottom</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-secondary"</span> <span class="attr">data-toggle</span>=<span class="string">"tooltip"</span> <span class="attr">data-placement</span>=<span class="string">"left"</span> <span class="attr">title</span>=<span class="string">"Tooltip on left"</span>&gt;</span></span><br><span class="line">    Tooltip on left</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/js/jquery-3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/js/popper.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/js/bootstrap.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.btn'</span>).tooltip()</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></button></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap基础02——栅格布局容器</title>
      <link href="2020/06/15/Bootstrap%E5%B8%83%E5%B1%80%E5%AE%B9%E5%99%A8/"/>
      <url>2020/06/15/Bootstrap%E5%B8%83%E5%B1%80%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h2><ol><li><p>Container容器是窗口布局的最基本元素，BootStrap推荐所有样式都定义在==.container或.container-fluid容器==之中</p></li><li><p>这是启用整个==栅格系统==必不可少的前置条件，它们分别对应选择个响应式的、固定宽度的容器，或者选择个流式自适应浏览器或容器最大合法宽度的窗口</p></li><li><p>图示</p></li></ol><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125202009.png" alt="image-20200329125202009"></p><h2 id="2-实操"><a href="#2-实操" class="headerlink" title="2. 实操"></a>2. 实操</h2><p>给div加个类就可以：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span> <span class="attr">style</span>=<span class="string">"background-color: red; height: 100px;"</span>&gt;</span>固定容器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span> <span class="attr">style</span>=<span class="string">"background-color: green; height: 100px;"</span>&gt;</span>流式容器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125212681.png" alt="image-20200329125212681"></p><p>都是响应式的，流式容器两边的间距跟着屏幕大小变，而固定的一直都是100%铺满。</p><p>响应式的几个档位，就是上面的表。</p><p>流式容器是div扩展到整个浏览器宽度的，上面的图倒了。</p><h1 id="屏幕尺寸对应图"><a href="#屏幕尺寸对应图" class="headerlink" title="屏幕尺寸对应图"></a>屏幕尺寸对应图</h1><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125234172.png" alt="image-20200329125234172"></p><h1 id="自己实现自适应容器"><a href="#自己实现自适应容器" class="headerlink" title="自己实现自适应容器"></a>自己实现自适应容器</h1><ul><li>@media：媒体监听</li><li>这里的尺寸是根据上面的表里来的，这些尺寸是twitter工程师算出来的最适合的</li><li>@media (min-width: 576px) and (max-width: 767px)就表示：576px&lt;=屏幕尺寸&lt;=767px</li></ul><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*&lt;!--自己实现自适应容器--&gt;*/</span></span><br><span class="line"><span class="comment">/*@media媒体监听*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*最低档位&lt;576px，所以说最大是575px*!*/</span></span><br><span class="line"><span class="comment">/*超小屏幕*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">max-width</span>: <span class="number">575px</span>) {</span><br><span class="line">    <span class="selector-class">.container-self</span> {</span><br><span class="line">        <span class="attribute">background-color</span>: red;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*小屏幕*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">576px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">767px</span>) {</span><br><span class="line">    <span class="selector-class">.container-self</span> {</span><br><span class="line">        <span class="attribute">background-color</span>: green;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">540px</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*中等屏幕*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">991px</span>) {</span><br><span class="line">    <span class="selector-class">.container-self</span> {</span><br><span class="line">        <span class="attribute">background-color</span>: blue;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">720px</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*大屏幕*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">992px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">1199px</span>) {</span><br><span class="line">    <span class="selector-class">.container-self</span> {</span><br><span class="line">        <span class="attribute">background-color</span>: yellow;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">960px</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*超大屏幕*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1200px</span>) {</span><br><span class="line">    <span class="selector-class">.container-self</span> {</span><br><span class="line">        <span class="attribute">background-color</span>: pink;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">1140px</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">&lt;div class="container-self" style=" height: 100px;margin: 0 auto;"&gt;自己实现自适应容器&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p>做响应式页面的时候，最外层的容器以后一般都用container</p><h1 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h1><h2 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1.概念"></a>1.概念</h2><p>行与列的布局，12列，5种响应布局对应5种屏幕尺寸</p><h2 id="2-原理"><a href="#2-原理" class="headerlink" title="2.原理"></a>2.原理</h2><p>1)栅格系统提供了集中内容居中、水平填充网页内容的方法，使用.container作为父盒子<br>2)同时在负边距的行上抵消，从而实现列中的所有内容在视觉上是左侧对齐的体验<br>​    1) 每列都有水平的padding值，行则用于控制它们之间的间隔<br>​    2) 内部由行(.row) 和列(.col) 组成<br>3)网页开发者的呈现==内容必须放置在列(.col-*) 中==，而且==只有列可以是行的直接子元素==，否则都是违法的，不可以在.col-*以上添加呈现内容<br>4) .col-*后面有不同的数字， 如.col-sm- 4或.col-xl-12,这些css类后面的数字用于表明定义div空间想要占用列的数量，每行最多有12列。如果你想用三个等宽的列，则取12的三分之- ,即.col-sm-4<br>5) .col-*的width属性(即列宽)是==用百分比==来表现和定义的， 所以它们总是流式的，其尺寸大小受父元素的定义影响<br>6)总共有五个栅格等级，每个响应式分界点隔出个等级:特小.col、 小col-sm-*、 中.col-md-*、 大.coH-lg-*、 特大(大、特大也可以称为宽超宽) .col-xl-*.</p><h2 id="3-栅格选项"><a href="#3-栅格选项" class="headerlink" title="3.栅格选项"></a>3.栅格选项</h2><h3 id="1-图示"><a href="#1-图示" class="headerlink" title="1.图示"></a>1.图示</h3><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125249439.png" alt="image-20200329125249439"></p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    .container{</span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: yellowgreen;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line">    }</span><br><span class="line"><span class="css">    <span class="comment">/*取到container类里面的div的div的排序第一个*/</span></span></span><br><span class="line"><span class="css">    <span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>){</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: red;</span></span><br><span class="line">    }</span><br><span class="line"><span class="css">     <span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>){</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: blue;</span></span><br><span class="line">    }</span><br><span class="line"><span class="css">     <span class="selector-class">.container</span>&gt;<span class="selector-tag">div</span>&gt;<span class="selector-tag">div</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>){</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: pink;</span></span><br><span class="line">    }</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">--------------------------------------------------</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>第一部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>第二部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col"</span>&gt;</span>第三部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>CSS选择器还可以这样写：<a href="https://www.runoob.com/cssref/css-selectors.html">https://www.runoob.com/cssref/css-selectors.html</a></p></li><li><p>col以最小的为标准，除非给大的再写一个标准</p></li><li><p>col这里等价于col-4，因为三个div默认均分了</p><p>效果图：<img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125300687.png" alt="image-20200329125300687"></p></li></ul><h1 id="栅格系统中"><a href="#栅格系统中" class="headerlink" title="栅格系统中"></a>栅格系统中</h1><p>这节课分了两种情况，将不同屏幕怎么适配。</p><h1 id="单个col"><a href="#单个col" class="headerlink" title="单个col"></a>单个col</h1><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm"</span>&gt;</span>第一部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm"</span>&gt;</span>第二部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm"</span>&gt;</span>第三部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>当只有一个col-sm的时候，会往上兼容，sm、md、lg等都会服从这个sm的布局</p><p>比col-sm小的 不服从这个三等分的布局</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125319772.png" alt="image-20200329125319772"></p><p>而比sm大的都会服从这个三等分的布局：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125338880.png" alt="image-20200329125417301"></p><h2 id="多个col"><a href="#多个col" class="headerlink" title="多个col"></a>多个col</h2><p>如果想让几个div的布局在不同屏幕有不同的显示，那么就应该使用多个col：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm col-md-1 col-lg-5"</span>&gt;</span>第一部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm col-md-10 col-lg-2"</span>&gt;</span>第二部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm col-md-1 col-lg-5"</span>&gt;</span>第三部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li><p>在sm之下没有布局：<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125459439.png" alt="image-20200329125338880"></p></li><li><p>在sm到md之间都是三等分的布局：</p></li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125433517.png" alt="image-20200329125425144"></p><ul><li><p>在md到lg之间都是1-10-1的布局：<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125425144.png" alt="image-20200329125433517"></p></li><li><p>在lg以上都是5-2-5的布局：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125417301.png" alt="image-20200329125459439"></p></li></ul><h1 id="对齐方式"><a href="#对齐方式" class="headerlink" title="对齐方式"></a>对齐方式</h1><h2 id="垂直对齐"><a href="#垂直对齐" class="headerlink" title="垂直对齐"></a>垂直对齐</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--对齐--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row align-items-end align-items-md-baseline align-items-lg-center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>第一部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>第二部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>第三部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>第四部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里要改一下之前的css样式：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&gt;<span class="selector-class">.row</span> {</span><br><span class="line">    <span class="attribute">background-color</span>: yellowgreen;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>因为如果row没有高度的话，那么它的子元素都是自适应高度撑满的，就不能对齐了</p><p>这里的align-items就是垂直对齐的类。当然也有分别对应的大屏幕、中屏幕、小屏幕的多个样式。</p><ul><li>align-items-md-baseline：在中屏幕及其以上，垂直方向顶部对齐<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125545911.png" alt="image-20200329125545911"></li><li>align-items-end：在小屏幕到以上（我的代码中是到中屏幕），垂直方向底部对齐<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125553991.png" alt="image-20200329125553991"></li><li>align-items-lg-center：在大屏幕以上，垂直方向居中对齐<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125601427.png" alt="image-20200329125601427"></li></ul><h2 id="水平对齐"><a href="#水平对齐" class="headerlink" title="水平对齐"></a>水平对齐</h2><p>水平对齐就是justify-content-xxx</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--水平对齐--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row justify-content-lg-start"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>第一部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>第二部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row justify-content-lg-end"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>第一部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>第二部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row justify-content-lg-between"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>第一部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>第二部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row justify-content-lg-around"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>第一部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>第二部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row justify-content-lg-center"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>第一部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-3"</span>&gt;</span>第二部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>效果如图所示：</p><ul><li>justify-content-start：头部对齐</li><li>justify-content-end：尾部对齐</li><li>justify-content-between：两端对齐</li><li>==justify-content-around：间隔相等对齐==</li><li>justify-content-center：居中对齐<br>其中头部、尾部、居中都比较好记住，两段还可以理解，这个间隔相等不太懂是什么意思。<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125611910.png" alt="image-20200329125611910"></li></ul><h1 id="间距清除"><a href="#间距清除" class="headerlink" title="间距清除"></a>间距清除</h1><blockquote><h3 id="间隙沟槽-gutters-清除"><a href="#间隙沟槽-gutters-清除" class="headerlink" title="间隙沟槽(gutters)清除"></a>间隙沟槽(gutters)清除</h3><p>BootStrap默认的栅格和列间有间隙沟槽，一般是左右-15px的<code>margin</code>或<code>padding</code>处理，您可以使用<code>.no-gutters</code>类来消除它，这将影响到<code>.row</code>行、列平行间隙及所有子列。</p><p>以下是创建这些样式的源代码。注意，列替换仅限于第一个子列，并通过属性选择器进行定位。当这产生一个更具体的选择器时，列填充仍然可以使用间隔实用程序进一步定制。</p><p>如果你需要**无边缝设计(edge-to-edge design)**，则请在父DIV中放弃<code>.container</code>与<code>.container-fluid</code>容器。</p></blockquote><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125638797.png" alt="image-20200329125638797"></p><p>如上图所示，“第一部分”四个字前面有个小小的间距</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row no-gutters"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm col-md-1 col-lg-5"</span>&gt;</span>第一部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm col-md-10 col-lg-2"</span>&gt;</span>第二部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm col-md-1 col-lg-5"</span>&gt;</span>第三部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>在row上加个no-gutters类就可以了，无缝设计</p><h1 id="排序和偏移"><a href="#排序和偏移" class="headerlink" title="排序和偏移"></a>排序和偏移</h1><h1 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h1><ul><li>order-0到order-12，共有13个等级。对元素进行排序。</li><li>0最前面，12最后面。</li><li>相同order的应该还是按原来的顺序</li><li>没有加order的位置等级最高，处于所有加order的最前面。</li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;div class="container"&gt;</span><br><span class="line">    &lt;div class="row"&gt;</span><br><span class="line">        &lt;div class="col-md  order-2"&gt;第1部分&lt;/div&gt;</span><br><span class="line">        &lt;div class="col-md "&gt;第2部分&lt;/div&gt;</span><br><span class="line">        &lt;div class="col-md  order-1"&gt;第3部分&lt;/div&gt;</span><br><span class="line">        &lt;div class="col-md  order-0"&gt;第4部分&lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125702161.png" alt="image-20200329125702161"></p><h2 id="不同屏幕"><a href="#不同屏幕" class="headerlink" title="不同屏幕"></a>不同屏幕</h2><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md order-4 order-sm-2"</span>&gt;</span>第1部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md order-2 "</span>&gt;</span>第2部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md order-1 order-sm-1"</span>&gt;</span>第3部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md order-3 order-sm-0"</span>&gt;</span>第4部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>超小屏幕：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125711465.png" alt="image-20200329125711465"></p><p>小屏幕及其以上：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125717499.png" alt="image-20200329125717499"></p><p>这个-sm-的屏幕大小是和原来一样的，往上兼容的。</p><h2 id="偏移"><a href="#偏移" class="headerlink" title="偏移"></a>偏移</h2><ul><li>offset-md-3：中屏幕及其以上，前面偏移3</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 offset-md-3 "</span>&gt;</span>第1部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 "</span>&gt;</span>第2部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125724816.png" alt="image-20200329125724816"></p><p>这里在1前面就偏移了3个位置，这里的位置就是说按栅格系统的那个12算的</p><p>再比如，在“第二部分”前面偏移了6个：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 "</span>&gt;</span>第1部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 offset-md-6"</span>&gt;</span>第2部分<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125731817.png" alt="image-20200329125731817"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bootstrap基础01——简介</title>
      <link href="2020/06/09/Bootstrap%E7%AE%80%E4%BB%8B/"/>
      <url>2020/06/09/Bootstrap%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="1-关于Bootstrap4"><a href="#1-关于Bootstrap4" class="headerlink" title="1.关于Bootstrap4"></a>1.关于Bootstrap4</h1><p><a href="http://code.z01.com/v4/">Bootstrap中文站</a></p><p><a href="https://github.com/twbs/bootstrap">Bootstrap的GitHub</a></p><ul><li><p>Bootstrap开始是Twitter的，然后开源了。</p></li><li><p>v3.4.1是个非常经典的版本，还有很多地方在用。</p></li><li><p>现在用v4.3版本学习。（但是看中文站上是v4.4(v4.3.x) ）</p></li><li><p>最大的特点：响应式，自动适应手机端或PC端</p></li><li><p>另外的一些框架都是他后代，比如LayUI,ExtJS等等</p></li></ul><h1 id="2-浏览器与设备兼容"><a href="#2-浏览器与设备兼容" class="headerlink" title="2.浏览器与设备兼容"></a>2.浏览器与设备兼容</h1><h2 id="1-支持浏览器"><a href="#1-支持浏览器" class="headerlink" title="1.支持浏览器"></a>1.支持浏览器</h2><p><a href="http://code.z01.com/v4/docs/browsers-devices.html">浏览器与设备</a></p><p>几乎支持所有版本的浏览器:</p><figure class="highlight"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">"browserslist": [</span><br><span class="line">  "last 1 major version",</span><br><span class="line">  "&gt;= 1%",</span><br><span class="line">  "Chrome &gt;= 45",</span><br><span class="line">  "Firefox &gt;= 38",</span><br><span class="line">  "Edge &gt;= 12",</span><br><span class="line">  "Explorer &gt;= 10",</span><br><span class="line">  "iOS &gt;= 9",</span><br><span class="line">  "Safari &gt;= 9",</span><br><span class="line">  "Android &gt;= 4.4",</span><br><span class="line">  "Opera &gt;= 30"]</span><br></pre></td></tr></tbody></table></figure><h2 id="2-移动端："><a href="#2-移动端：" class="headerlink" title="2.移动端："></a>2.移动端：</h2><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329125116057.png" alt="image-20200329125116057"></p><h1 id="3-本地与CDN"><a href="#3-本地与CDN" class="headerlink" title="3. 本地与CDN"></a>3. 本地与CDN</h1><ul><li><p>一般前端框架的依赖都在<strong>dist</strong>文件夹下</p></li><li><p>生产阶段min，开发阶段就是不带后缀的</p></li><li><p>引用CDN：</p><ul><li>好处：项目体积小，版本自动更新</li><li>坏处：没网就不行了</li></ul></li></ul><h1 id="4-文档"><a href="#4-文档" class="headerlink" title="4. 文档"></a>4. 文档</h1><p><a href="http://code.z01.com/v4/docs/">文档,入门步骤</a></p><h1 id="5-具体步骤"><a href="#5-具体步骤" class="headerlink" title="5. 具体步骤"></a>5. 具体步骤</h1><ol><li><p>新建项目</p></li><li><p>新建img，lib文件夹。引用的css以及js都放在lib下。</p></li><li><p>更改H5的头部声明<br>首先是h5的头部：HTML5标准的 doctype 头部定义是首要的，否则会导致样式失真（中国码农往往<strong>直接抄国外站点将lang写成en的小细节</strong>也要注意以免贻笑大方)。</p></li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;&lt;html lang="zh-cn"&gt;</span><br><span class="line">...</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="4"><li>meta:vp，响应式标签<br>meta:vp添加设备自适应的标签</li></ol><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt;</span><br></pre></td></tr></tbody></table></figure><ol start="5"><li>一行CSS，3行JS<br>link引入bootstrap.css<br>script引入 jQuary.js, popper.js, bootstrap.js</li></ol><p><strong>最终，一个最基本的模板</strong></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-cn"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--样式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"lib/css/bootstrap.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/js/jquery-3.4.1.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/js/popper.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"lib/js/bootstrap.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h1 id="6-盒尺寸-暂时没用到"><a href="#6-盒尺寸-暂时没用到" class="headerlink" title="6.盒尺寸(暂时没用到)"></a>6.盒尺寸(暂时没用到)</h1><p>为了更直观地用BootStrap的尺寸规范(而不受各浏览标准影响)，我们把将全局box-sizing的值由==默认的content-box重定义为border-box==，以保证padding不会影响元素的最后计算宽度。</p><p>但在页面==引用Google自定义搜索、Google Map地图等第三方产品时==会出现兼容性问题。对此你可以使用下面的方法来重置盒尺寸:</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.selector-for-some-widget {box-sizing: content-box;}</span><br></pre></td></tr></tbody></table></figure><p>用了上面方法重定义后，所有嵌套在内的元素-包括通过:before以及:after产生的内容，都会继承.selector-for-some-widget所指定的box-sizing。</p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Bootstrap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Semantic UI编写简单首页</title>
      <link href="2020/05/30/SemanticUI/"/>
      <url>2020/05/30/SemanticUI/</url>
      
        <content type="html"><![CDATA[<h1 id="SemanticUI"><a href="#SemanticUI" class="headerlink" title="SemanticUI"></a>SemanticUI</h1><p>虽然说是一个比较小的框架，但是思想和Bootstrap是一样的，栅格布局。通过这个来学习了一下前端框架的使用。</p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><ul><li>前端：Semantic UI</li><li>后端：SpringBoot</li></ul><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h2 id="1-建立项目"><a href="#1-建立项目" class="headerlink" title="1.建立项目"></a>1.建立项目</h2><p>建立项目的时候结构应该和SpringBoot中的目录对应起来,static/js.css.img等这样：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191127194335435.png" alt="image-20191127194335435"></p><h2 id="2-index"><a href="#2-index" class="headerlink" title="2. index"></a>2. index</h2><h3 id="引入第三方库文件"><a href="#引入第三方库文件" class="headerlink" title="引入第三方库文件"></a>引入第三方库文件</h3><p>使用CDN：</p><p><code>&lt;head&gt;&lt;/head&gt;</code>中引入Semantic UI框架的css</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然后<code>&lt;body&gt;&lt;/body&gt;</code>的最底部引入jQuery和Semantic UI的js</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里是设置移动端的显示，宽度等于设备的width</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--    设置移动端的显示    --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p>关于这个移动端网页的解释： <a href="https://www.cnblogs.com/tenWood/p/7934942.html">https://www.cnblogs.com/tenWood/p/7934942.html</a> </p></blockquote><h4 id="网页部分分为header、content、footer三部分"><a href="#网页部分分为header、content、footer三部分" class="headerlink" title="网页部分分为header、content、footer三部分"></a>网页部分分为header、content、footer三部分</h4><p>然后根据设计，分为头部header、div、footer三部分。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    设置移动端的显示    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/index.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导航--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--中间内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--底部footer--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/jquery/3.4.1/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/semantic-ui/2.4.1/semantic.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="header"><a href="#header" class="headerlink" title="==header=="></a><strong>==header==</strong></h3><h4 id="导航栏加入样式"><a href="#导航栏加入样式" class="headerlink" title="导航栏加入样式"></a>导航栏加入样式</h4><p>然后直接给nav导航栏加入样式：</p><ul><li>ui：标识是一个ui组件</li><li>inverted：翻转，反色，将其显示为黑色</li><li>attached：依附，让导航栏显示为无圆角，可以紧紧的贴在顶部</li><li>segment：标识是一个片段</li></ul><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导航--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--inverted，翻转，黑色；attached，依附，无圆角； segment，片段；--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"ui inverted attached segment"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><hr><h4 id="导航栏的子项-item"><a href="#导航栏的子项-item" class="headerlink" title="导航栏的子项 item"></a>导航栏的子项 item</h4><p>之后再里面添加具体的标题栏的内容：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui inverted secondary menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"ui teal header item"</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>关于我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里ui就体现出作用了，ui是列表，ui组件；而item就是项目组件。</p><ul><li>item：条目组件</li><li>teal：颜色</li><li>secondary：</li><li>header：header效果。。。？</li></ul><p>样式如下：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191127203136427.png" alt="image-20191127200614086"></p><hr><h4 id="自定义css调整间距"><a href="#自定义css调整间距" class="headerlink" title="自定义css调整间距"></a>自定义css调整间距</h4><p>自定义css：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.m-padded-tb-mini</span> {</span><br><span class="line">    <span class="comment">/*m代表自定义，padded代表间隔，tb代表上下，mini代表小一点*/</span></span><br><span class="line">    <span class="comment">/*减少上下间隔*/</span></span><br><span class="line">    <span class="comment">/*加个important覆盖原来框架中的important权重等级*/</span></span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">0.2em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">0.2em</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>新建个css文件，然后link引入到index.html中。</p><p>注意这里的！important，他框架里的css都是有权值的，所以说要加上这个进行覆盖。</p><hr><h4 id="加入图标-i"><a href="#加入图标-i" class="headerlink" title="加入图标 i"></a>加入图标 i</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui inverted secondary menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"ui teal header item"</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"home icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"idea icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"tags icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"info icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>关于我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p><code>i.home.icon</code>，关于icon的各种类去官网的官方手册上去找吧。</p><hr><h4 id="加入搜索框"><a href="#加入搜索框" class="headerlink" title="加入搜索框"></a>加入搜索框</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--搜索框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right item"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui input icon transparent inverted"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Search..."</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"search link icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>right：右浮动</li><li>input：输入框样式</li><li>transparent：透明颜色</li><li>search icon：搜索图标</li><li>link：鼠标指上去的时候是个小手，link样式</li></ul><p>加了之后变成这样了，右边的搜索框。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191127203245358.png" alt="image-20191127203136427"></p><p>但是我觉得不如白色的好看，就不加transparent 和 inverted 属性啦。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191127205844929.png" alt="image-20191127203245358"></p><hr><h3 id="footer"><a href="#footer" class="headerlink" title="==footer=="></a><strong>==footer==</strong></h3><p>footer想要的效果：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191127200614086.png" alt="image-20191127205844929"></p><h4 id="设置样式，分列"><a href="#设置样式，分列" class="headerlink" title="设置样式，分列"></a>设置样式，分列</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--底部footer--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"ui inverted segment vertical"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui grid"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three wide column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three wide column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three wide column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"seven wide column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ol><li><p>首先设置样式：</p><ul><li>vertical：垂直的，去掉圆角；</li><li>container保持和上面header的间距一样；</li></ul></li><li><p>然后写一个div，用来包容四列</p><ul><li>grid：将这个div分成16份</li><li>three：这个div占3份</li><li>seven：这个div占7份</li><li>wide：填满</li><li>column：这是一列</li></ul></li></ol><hr><h4 id="引入图片"><a href="#引入图片" class="headerlink" title="引入图片"></a>引入图片</h4><p>图片放到img中</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--底部footer--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"ui inverted segment vertical"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui container"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--底部分为4个部分--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui divided inverted grid"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--第一列，图片--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three wide column"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/QRCode.jpg"</span> <span class="attr">alt</span>=<span class="string">"二维码"</span> <span class="attr">class</span>=<span class="string">"ui rounded image"</span> <span class="attr">style</span>=<span class="string">"width: 110px"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!--第二列--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three wide column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--第三列--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three wide column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--第四列--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"seven wide column"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里又给div加了两个属性，来显示每一列之间的分割线。</p><ul><li>rounded：圆角</li><li>image：图片属性</li><li>divided：分割线（这里要加inverted翻转颜色才能看到）</li><li>内联样式：写定图片大小</li></ul><hr><h4 id="第二列"><a href="#第二列" class="headerlink" title="第二列"></a>第二列</h4><p>首先先给这个部分加个居中：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--底部footer--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"ui inverted segment vertical"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui center aligned container"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--底部分为4个部分--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui divided inverted grid"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>center：居中</li><li>aligned：对齐</li></ul><p>然后写第二块的主要内容：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--第二列--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three wide column"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"ui inverted header"</span>&gt;</span>最新博客<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui inverted link list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>用户故事(User Story)<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>关于刻意练习的清单<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>失败要趁早<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="第三列同第二列"><a href="#第三列同第二列" class="headerlink" title="第三列同第二列"></a>第三列同第二列</h4><h4 id="第四列"><a href="#第四列" class="headerlink" title="第四列"></a>第四列</h4><p>一个段落就完事了</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">&lt;!--第四列--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"seven wide column"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>恶魔吟唱<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        大家好我是练习时长两年半的练习生cxk，我喜欢唱跳Rap，篮球，Music！</span><br><span class="line">        鸡你太美！！！哦贝贝，贝贝，白给！迎面走来的你让我蠢蠢欲动。。。</span><br><span class="line">        在今后，我还为大家准备了许多自己作词，作曲的音乐，希望大家能够喜欢，请多多支持</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h4 id="最后整理一下"><a href="#最后整理一下" class="headerlink" title="最后整理一下"></a>最后整理一下</h4><p>首先是 给图片加了个list和item属性，让他对齐一下，间距没那么大 </p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一列，图片--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"three wide column"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui inverted link list"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/QRCode3.jpg"</span> <span class="attr">alt</span>=<span class="string">"二维码"</span> <span class="attr">class</span>=<span class="string">"ui rounded image"</span> <span class="attr">style</span>=<span class="string">"width: 110px"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>然后给这几个块加个间隔：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"ui inverted segment vertical m-padded-tb-massive"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>css:</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.m-padded-tb-massive</span>{</span><br><span class="line">    <span class="comment">/*massive代表最大的间隔*/</span></span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">5em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">5em</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h4 id="下半块，分割线"><a href="#下半块，分割线" class="headerlink" title="下半块，分割线"></a>下半块，分割线</h4><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui inverted section divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>divier：分割线</li></ul><p>调整字体样式：</p><p>css：</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-------text--------*/</span></span><br><span class="line"><span class="selector-class">.m-text-thin</span>{</span><br><span class="line">    <span class="comment">/*字体调细点*/</span></span><br><span class="line">    <span class="attribute">font-weight</span>: <span class="number">300</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.m-text-spaced</span>{</span><br><span class="line">    <span class="comment">/*字间距*/</span></span><br><span class="line">    <span class="attribute">letter-spacing</span>: <span class="number">1px</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.m-text-lined</span>{</span><br><span class="line">    <span class="comment">/*行间距*/</span></span><br><span class="line">    <span class="attribute">line-height</span>: <span class="number">1.8</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.m-opacity-mini</span>{</span><br><span class="line">    <span class="comment">/*透明度*/</span></span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>分割线下面加最后一条信息：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第四列--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"seven wide column"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h4</span>&gt;</span>打篮球邀请<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"m-text-lined m-text-thin m-text-spaced m-opacity-mini"</span>&gt;</span></span><br><span class="line">                    大家好我是练习时长两年半的练习生cxk，我喜欢唱跳Rap，篮球，Music！</span><br><span class="line">                    鸡你太美！！！哦Baby，Baby，白给！迎面走来的你让我蠢蠢欲动。。。</span><br><span class="line">                    在今后，我还为大家准备了许多自己作词，作曲的音乐，希望大家能够多多支持！谢 ♂ 谢!</span><br><span class="line">                <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui inverted section divider"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"m-text-lined m-text-thin m-text-spaced m-opacity-mini"</span>&gt;</span>Copyright © 2019-2039 SongX64 Designed By Lirenmi<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h3 id="content"><a href="#content" class="headerlink" title="==content=="></a>==content==</h3><p>Content内容如下图：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202100245907.png" alt="image-20191202100245907"></p><h4 id="自定义css，写几个边距类"><a href="#自定义css，写几个边距类" class="headerlink" title="自定义css，写几个边距类"></a>自定义css，写几个边距类</h4><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*---------------------------padded,自定义边距，分为几个级别------------------------------*/</span></span><br><span class="line"><span class="selector-class">.m-padded-tb-mini</span> {</span><br><span class="line">    <span class="comment">/*m代表自定义，padded代表间隔，tb代表上下，mini代表小一点*/</span></span><br><span class="line">    <span class="comment">/*减少上下间隔*/</span></span><br><span class="line">    <span class="comment">/*加个important覆盖原来框架中的important权重等级*/</span></span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">0.2em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">0.2em</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m-padded-tb-tiny</span> {</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">0.3em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">0.3em</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m-padded-tb-small</span> {</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">0.5em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">0.5em</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m-padded-tb</span> {</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">1em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">1em</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m-padded-tb-large</span> {</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">2em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">2em</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m-padded-tb-big</span> {</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">3em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">3em</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m-padded-tb-huge</span> {</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">3em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">3em</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.m-padded-tb-massive</span> {</span><br><span class="line">    <span class="comment">/*massive代表最大的间隔*/</span></span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">5em</span> <span class="meta">!important</span>;</span><br><span class="line">    <span class="attribute">padding-bottom</span>: <span class="number">5em</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>本来是只写了一个massive的，然后现在扩充几个。这个写法应该是比较规范的吧。。。看这个Semantic UI框架里面好像也有这种等级级别的东西。</p><p>min    tiny     small    NULL    large     big    huge    massive</p><h4 id="搭建框架"><a href="#搭建框架" class="headerlink" title="搭建框架"></a>搭建框架</h4><p>首先先搭建其中的div各个块：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202100618083.png" alt="image-20191202100618083"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--先给他加个边距--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"m-padded-tb-large"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--container是可以自适应屏幕宽度的--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui container"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--中间内容左右两列，左面7份，右面5份--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui grid"</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">&lt;!--左列博客栏目--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eleven wide column"</span>&gt;</span></span><br><span class="line">                   </span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-------------------------------------------------------------&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!--右侧标签栏加分类栏--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui five wide column"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                </span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>           </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里分为左右两列，左面在占7份，右面占5份</p><ul><li>container：可以自适应的布局</li><li>eleven：grid布局中的7份；five同理</li><li>wide column：这里这个还是不能分开的，表示一个宽列。如果写成column wide就无效</li><li>==ui==：？？？这个标签到底该什么时候加什么时候不加？对布局还是有影响的并不是可有可无的一个标签</li></ul><h4 id="左侧部分"><a href="#左侧部分" class="headerlink" title="左侧部分"></a>左侧部分</h4><h5 id="左侧header"><a href="#左侧header" class="headerlink" title="左侧header"></a>左侧header</h5><p>header头栏头栏就是说“博客    共14篇”这一部分的标题。</p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202100851132.png" alt="image-20191202100851132" style="zoom: 80%;"><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--左列博客栏目--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eleven wide column"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--最上面的一个栏,标识"博客  | 共144篇"；用一个segment碎片属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segment"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--分为两列的gird布局--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui two column grid"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--左面一列写“博客”--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"ui teal header"</span>&gt;</span>博客<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">&lt;!--右面一列写“共多少篇”--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right aligned column"</span>&gt;</span></span><br><span class="line">                共 <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"ui orange header m-inline-block"</span>&gt;</span>14<span class="tag">&lt;/<span class="name">h3</span>&gt;</span> 篇</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>segment：碎片</li><li>two column grid：两列布局</li><li>column：上面的其中的一列（好像是one可以省略？)</li><li>right aligned：右对齐</li><li>orange：橙色</li><li>m-inline-block：自定义，将h3设为行内元素，让他不换行</li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*----------------display,显示的一些属性--------------------------------*/</span></span><br><span class="line"><span class="selector-class">.m-inline-block</span> {</span><br><span class="line">    <span class="comment">/* 行内元素*/</span></span><br><span class="line">    <span class="attribute">display</span>: inline-block <span class="meta">!important</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>middle aligned：（垂直？）居中对齐</li></ul><h5 id="左侧分3部分"><a href="#左侧分3部分" class="headerlink" title="左侧分3部分"></a>左侧分3部分</h5><p>首先左侧整个栏目，也是分为3部分：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202105540646.png" alt="image-20191202104324015"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202104418259.png" alt="image-20191202104418259"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--左列博客栏目--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eleven wide column"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--header--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--最上面的一个栏,标识"博客  | 共144篇"；用一个segment碎片属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segment top attached"</span>&gt;</span>......<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- content--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui attached segment"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- footer--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segment attached"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>attached：让两个segment之间没有缝隙，贴合</li><li>top attached：这个应该是说最顶部的要贴合的元素</li></ul><h5 id="左侧footer"><a href="#左侧footer" class="headerlink" title="左侧footer"></a>左侧footer</h5><p>footer部分含有两个按钮：”上一页“    “下一页”</p><p>类似于header中的分“博客”    “共有14篇”布局<br>所以说布局可以直接拿过来用，只需修改一下里面的内容</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- footer--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segment attached"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--布局结构同header里面，两列--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui container"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui two column grid"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--修改其中的内容为按钮，修改颜色，样式--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"ui button teal basic"</span>&gt;</span>上一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right aligned column"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"ui button teal basic"</span>&gt;</span>下一页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>==注意column的拼写！！！==</p><ul><li>teal：颜色，浅绿色</li><li>basic：样式，让他没那么明显，变成镂空的<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202105647573.png" alt="image-20191202105647573"><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202104324015.png" alt="image-20191202105540646"></li></ul><h5 id="左侧content"><a href="#左侧content" class="headerlink" title="左侧content"></a>左侧content</h5><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202120900166.png" alt="image-20191202115849509"></p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- content--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui attached segment"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui padded vertical segment m-padded-tb-large"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--content部分，分为文章和右面缩略图--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui middle aligned grid"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eleven wide column"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 文章标题和内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>加油，奥利给<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>我们遇到什么困难也不要怕，微笑着面对它！消除恐惧的最好办法，就是面对恐惧！坚持，才是胜利。加油！奥利给！...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--下面的头像，作者，日期，访问次数 | 标签，用一个布局--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui middle aligned grid"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"eleven wide column"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui horizontal link list"</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--头像--&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/id/1005/100"</span> <span class="attr">alt</span>=<span class="string">"头像"</span></span></span><br><span class="line"><span class="tag">                                     <span class="attr">class</span>=<span class="string">"ui avatar image"</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--作者名--&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>巨魔<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--图标+日期--&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"calendar icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>2019-12-1</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line">                                <span class="comment">&lt;!--浏览量--&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"eye icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 4261</span><br><span class="line">                            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"five wide column right aligned "</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span></span></span><br><span class="line"><span class="tag">                           <span class="attr">class</span>=<span class="string">"ui teal  label m-padded-tiny m-text-thin"</span>&gt;</span>认知升级<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"five wide column"</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--一个图片，被超链接包括，在新的标签页打开链接--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"https://picsum.photos/id/10/800/450"</span> <span class="attr">alt</span>=<span class="string">"图片"</span></span></span><br><span class="line"><span class="tag">                                                 <span class="attr">class</span>=<span class="string">"ui rounded image"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    ......多个文章部分copy</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ul><li>horizontal link list：一个水平的列表，内部需要包括item</li><li>item：link list的具体内容</li><li>avatar image：圆形图片，用来做头像</li><li>calendar icon：日历图标</li><li>eye icon：眼睛图标<img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202115849509.png" alt="image-20191202120900166" style="zoom:80%;"></li></ul><ul><li><p>padded：设置一些间距</p></li><li><p>vertical：将segment设为垂直效果，其中两个之间有一个横线分割</p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202164844031.png" alt="image-20191202120829315" style="zoom: 80%;"></li></ul><h5 id="微调"><a href="#微调" class="headerlink" title="微调"></a>微调</h5><p>剩下的就是字体啊，行间距啊，padding啊之类的微调了，这个无所谓了就不写了</p><h4 id="右侧部分"><a href="#右侧部分" class="headerlink" title="右侧部分"></a>右侧部分</h4><p>右侧部分有4块，分别是：分类、标签、最新推荐、二维码</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202165856984.png" alt="image-20191202164844031" style="zoom: 67%;"><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202164859593.png" alt="image-20191202164859593" style="zoom:67%;"></p><h5 id="1-分类"><a href="#1-分类" class="headerlink" title="1.分类"></a>1.分类</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第一个悬浮栏目，分类--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segments"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--顶部的标题：“分类” | More&gt;&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui secondary segment"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui two column grid"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"idea icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>分类</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column right aligned"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>more <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"angle double right icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--teal就有了分割线，然后下面的分类--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui teal segment"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui fluid vertical menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>学习日志</span><br><span class="line">                <span class="comment">&lt;!--这个分类中的条数--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui teal basic left pointing label"</span>&gt;</span>13<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span>学习日志</span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui teal basic left pointing label"</span>&gt;</span>13<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            ...多个超链接</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这一块的布局就比较简单了，和前面都是一些类似的东西了，多使用segment和grid来进行布局。</p><ul><li>secondary：灰色的背景，也就是头栏上那个浅灰色</li><li>segments：segment的集合，类似于list和item的关系。</li><li>fluid：流动的不固定的，让他自动填满整个框</li><li>angle double right icon：一个 &gt;&gt; 表示更多的图标</li><li>left pointing label：一个带左尖括号的标签</li></ul><p>最终效果如下：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202120829315.png" alt="image-20191202165544922"></p><h5 id="2-标签"><a href="#2-标签" class="headerlink" title="2.标签"></a>2.标签</h5><p>标签和上面的基本相似。其中的宽度长度啥的是可以自适应的。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第二个悬浮栏目，标签--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segments m-margin-tb-big"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--头栏--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui secondary segment"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui two column grid"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"tags icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>标签</span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right aligned column"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>more <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"angle double right icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--内容--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui teal segment"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"ui teal basic label m-margin-tb-tiny"</span>&gt;</span>心灵鸡汤</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"detail"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"ui teal basic label m-margin-tb-tiny"</span>&gt;</span>SpringBoot架构</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"detail"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"ui teal basic label m-margin-tb-tiny"</span>&gt;</span>Web前端设计开发</span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"detail"</span>&gt;</span>22<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   ...多个超链接</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>效果如下：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202170733567.png" alt="image-20191202165856984"></p><h5 id="3-最新推荐"><a href="#3-最新推荐" class="headerlink" title="3.最新推荐"></a>3.最新推荐</h5><p>最新推荐这一块就是利用segments和多个segment来实现的。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--第三个悬浮栏目，最新推荐--&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segments m-margin-tb-big "</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui secondary segment"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"bookmark icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> 最新推荐</span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segment"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"m-black m-text-thin"</span>&gt;</span>没有什么能够阻挡，你对自由的向往<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui segment"</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">class</span>=<span class="string">"m-black m-text-thin"</span>&gt;</span>没有什么能够阻挡，你对自由的向往<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这里还写了个自定义的m-black来改变字体颜色。</p><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.m-black</span>{</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span> <span class="meta">!important</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202180702015.png" alt="最新推荐"></p><h5 id="4-二维码"><a href="#4-二维码" class="headerlink" title="4.二维码"></a>4.二维码</h5><p>最后一块二维码：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--分割线--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"ui horizontal divider header"</span>&gt;</span>扫码关注我<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--二维码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui centered card"</span> <span class="attr">style</span>=<span class="string">"width: 11em"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"img/QRCode3.jpg"</span> <span class="attr">alt</span>=<span class="string">"扫码关注"</span> <span class="attr">class</span>=<span class="string">"ui rounded image"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>horizontal divider header：分割线</li><li>card：卡片属性</li><li>centered：居中</li><li>rounded image：圆角图片</li></ul><p>效果如下：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202170419224.png" alt="image-20191202170733567"></p><p>至此，主页index大概完成。但是还有手机端适应的问题。</p><h3 id="手机端适应"><a href="#手机端适应" class="headerlink" title="手机端适应"></a>手机端适应</h3><h4 id="stackable"><a href="#stackable" class="headerlink" title="stackable"></a>stackable</h4><p>menu部分：加个stackable类</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui inverted secondary stackable menu"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><ul><li>stackable：可堆叠的，加上之后会堆起来（这里只是说header的menu）<img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202181139544.png" alt="image-20191202180702015" style="zoom:67%;"></li></ul><h4 id="mobile-reversed"><a href="#mobile-reversed" class="headerlink" title="mobile reversed"></a>mobile reversed</h4><p>上图中，文章部分还没有适配，所以说给文章部分也加上stackable:</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--content部分，分为文章和右面缩略图--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui middle aligned stackable grid"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>但是效果如图：</p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202181245405.png" alt="image-20191202181139544" style="zoom:67%;"><p>所以说再加个属性：</p><ul><li><p>mobile reversed：手机端翻转，反序，将两个column反过来，图片在上：</p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20191202165544922.png" alt="image-20191202181245405" style="zoom:67%;"></li></ul><h4 id="menu菜单折叠按钮"><a href="#menu菜单折叠按钮" class="headerlink" title="menu菜单折叠按钮"></a>menu菜单折叠按钮</h4><h5 id="1-先添加按钮"><a href="#1-先添加按钮" class="headerlink" title="1.先添加按钮"></a>1.先添加按钮</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导航--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--inverted，翻转，黑色；attached，依附，无圆角； segment，片段；--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"ui inverted attached segment m-padded-tb-mini"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui container"</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--导航菜单--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui inverted secondary stackable menu"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"ui teal header item"</span>&gt;</span>Blog<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--m-mobile-hide，在手机端隐藏掉，自定义css--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item m-mobile-hide m-item"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"home icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item m-mobile-hide m-item"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"idea icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>分类<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item m-mobile-hide m-item"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"tags icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>标签<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"item m-mobile-hide m-item"</span>&gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"info icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>关于我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--搜索框--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"right item  m-mobile-hide"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"ui input icon"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">placeholder</span>=<span class="string">"Search..."</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"search link icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--手机端那个 “ 三 ” 按钮--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--menu toggle没有显示上的意义，只是用来获取元素--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"ui black icon button m-right-top m-mobile-show menu toggle"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"sidebar icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>最下面这几行，添加一个button 的a超链接</p><h5 id="2-添加相关的类css，来控制手机端和电脑端的显示和隐藏"><a href="#2-添加相关的类css，来控制手机端和电脑端的显示和隐藏" class="headerlink" title="2.添加相关的类css，来控制手机端和电脑端的显示和隐藏"></a>2.添加相关的类css，来控制手机端和电脑端的显示和隐藏</h5><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*--------------------------position，位置------------------------*/</span></span><br><span class="line"><span class="selector-class">.m-right-top</span> {</span><br><span class="line">    <span class="comment">/*绝对布局，让它到右上角*/</span></span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>m-right-top：绝对定位，让这个按钮到右上角去</li></ul><figure class="highlight css"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*-------------------mobile，手机端适配-------------------------------------------*/</span></span><br><span class="line"><span class="comment">/*屏幕上的 “ 三 ” 按钮，平时不显示*/</span></span><br><span class="line"><span class="selector-class">.m-mobile-show</span> {</span><br><span class="line">    <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/*媒体屏幕，小于768px的时候触发，也就是手机端 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">768px</span>) {</span><br><span class="line">    <span class="comment">/*这个类的元素在屏幕小于768的时候隐藏掉*/</span></span><br><span class="line">    <span class="selector-class">.m-mobile-hide</span> {</span><br><span class="line">        <span class="attribute">display</span>: none <span class="meta">!important</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">/*屏幕上的 “三” 按钮，在小于768的时候显示*/</span></span><br><span class="line">    <span class="selector-class">.m-mobile-show</span> {</span><br><span class="line">        <span class="attribute">display</span>: block <span class="meta">!important</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>m-mobile-hide：只在手机端隐藏</li><li>m-mobile-show：只在手机端显示，电脑端不显示</li></ul><h5 id="3-使用jQuery来控制按钮点击"><a href="#3-使用jQuery来控制按钮点击" class="headerlink" title="3.使用jQuery来控制按钮点击"></a>3.使用jQuery来控制按钮点击</h5><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.menu.toggle'</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'.m-item'</span>).toggleClass(<span class="string">'m-mobile-hide'</span>);</span></span><br><span class="line">    });</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>toggleClass（）函数是jQuery自带的函数，用来转换类；在元素有这个类 (这里指m-mobile-hide) 的时候把它移除，没有这个类的时候把它加上。</p><p>直接通过类选择器取到元素，然后显示或隐藏。</p><h2 id="index完成"><a href="#index完成" class="headerlink" title="index完成"></a>index完成</h2>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Bootstrap </tag>
            
            <tag> SematicUI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-Plus的使用</title>
      <link href="2020/05/12/MybatisPlus%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>2020/05/12/MybatisPlus%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="MyBatisPlus"><a href="#MyBatisPlus" class="headerlink" title="MyBatisPlus"></a>MyBatisPlus</h1><h2 id="什么是MybatisPlus"><a href="#什么是MybatisPlus" class="headerlink" title="什么是MybatisPlus"></a>什么是MybatisPlus</h2><p>一个开源项目，非侵入式，帮助简化Mybatis的使用。</p><h2 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h2><h3 id="0-准备工作"><a href="#0-准备工作" class="headerlink" title="0. 准备工作"></a>0. 准备工作</h3><p>建立数据库mybatis_plus</p><p>建表与导入数据：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">id <span class="type">BIGINT</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'主键ID'</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'姓名'</span>,</span><br><span class="line">age <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'年龄'</span>,</span><br><span class="line">email <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">'邮箱'</span>,</span><br><span class="line"><span class="keyword">PRIMARY</span> KEY (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="keyword">user</span> (id, name, age, email) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">'Jone'</span>, <span class="number">18</span>, <span class="string">'test1@baomidou.com'</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">'Jack'</span>, <span class="number">20</span>, <span class="string">'test2@baomidou.com'</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">'Tom'</span>, <span class="number">28</span>, <span class="string">'test3@baomidou.com'</span>),</span><br><span class="line">(<span class="number">4</span>, <span class="string">'Sandy'</span>, <span class="number">21</span>, <span class="string">'test4@baomidou.com'</span>),</span><br><span class="line">(<span class="number">5</span>, <span class="string">'Billie'</span>, <span class="number">24</span>, <span class="string">'test5@baomidou.com'</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="1-新建项目，添加依赖"><a href="#1-新建项目，添加依赖" class="headerlink" title="1.新建项目，添加依赖"></a>1.新建项目，添加依赖</h3><p>新建项目没啥说的，新建个SpringBoot的项目就行。</p><p>添加依赖，pom.xml文件中依赖如下：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                   <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">               <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--mybatis-plus--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.5<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--mysql--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!--lombok用来简化实体类--&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>其中需要安装Idea的Lombok的插件，我早就装好了。</p><h3 id="2-application配置文件"><a href="#2-application配置文件" class="headerlink" title="2.application配置文件"></a>2.application配置文件</h3><p>这个配置文件里连接数据库的地方，有点需要注意的</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/mybatis_plus?serverTimezone=GMT%2B8</span></span><br><span class="line"><span class="meta">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mybatis日志</span></span><br><span class="line"><span class="meta">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><ol><li>driver-class-name处，mysql8以前，用com.mysql.jdbc.Driver，之后需要加上这个cj，变成com.mysql.cj.jdbc.Driver，不然会报警告。。。</li><li>url处，在mysql8以后，需要加上那个时区：?serverTimezone=GMT%2B8</li></ol><h2 id="1-简单·的实现查询"><a href="#1-简单·的实现查询" class="headerlink" title="1) 简单·的实现查询"></a>1) 简单·的实现查询</h2><p>建立entity与mapper文件夹，同时建立User.java实体类与UserMapper.java类</p><p>User类中包括简单的信息，然后写上Lombok的@Data注解就有了getter和setter方法以及有参无参的构造方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songx64.mpdemo1010.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>UserMapper则是接口，集成了BaseMapper，这个是mybatisplus里面的一个接口，实现了基本的增删改查之类的。继承时候需要一个模板T。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songx64.mpdemo1010.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.songx64.mpdemo1010.entity.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面三个注解任一个，解决自动注入Mapper时候，飘红线</span></span><br><span class="line"><span class="comment">//@Component</span></span><br><span class="line"><span class="comment">//@Service</span></span><br><span class="line"><span class="comment">//@Repository</span></span><br><span class="line"><span class="comment">//@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>{</span><br><span class="line">    <span class="comment">//SpringBoot启动的时候，接口要找的话，会找接口这个实现类的的对象</span></span><br><span class="line">    <span class="comment">// 但是这里没有实现类，所以说要去启动类中加入@MapperScan注解</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>注释里写了部分东西了。</p><p>之后还需要改启动类里面的一点东西，就是加个@MapperScan注解，扫描某个路径下的Mapper。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan("com.songx64.mpdemo1010.mapper")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mpdemo1010Application</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(Mpdemo1010Application.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>当然这个@MapperScan注解也可以不加，而是在UserMapper接口中加上个@Mapper注解，也应该是一样的效果。</p><h2 id="2）查询的单元测试"><a href="#2）查询的单元测试" class="headerlink" title="2）查询的单元测试"></a>2）查询的单元测试</h2><p>编写单元测试，进行简单的查询。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songx64.mpdemo1010;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Mpdemo1010ApplicationTests</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>{</span><br><span class="line">        List&lt;User&gt; users = userMapper.selectList(<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(users);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>就只是自动注入了一个UserMapper，然后直接调用里面的selectList。</p><blockquote><p>这里有个小技巧，写userMapper.selectList(null).var然后回车，IDEA就会自动生成一个变量： List<user> users = userMapper.selectList(null)也就是这一句。</user></p></blockquote><h2 id="3）简单的插入"><a href="#3）简单的插入" class="headerlink" title="3）简单的插入"></a>3）简单的插入</h2><p>再在单元测试里加个添加的方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>{</span><br><span class="line">      User user = <span class="keyword">new</span> User();</span><br><span class="line">      user.setName(<span class="string">"Lucy"</span>);</span><br><span class="line">      user.setAge(<span class="number">18</span>);</span><br><span class="line">      user.setEmail(<span class="string">"PleaseLucy@gmail.com"</span>);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">int</span> insert = userMapper.insert(user);</span><br><span class="line">      System.out.println(<span class="string">"insert:"</span> + insert);</span><br><span class="line"></span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>运行结果如下：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200814222228.png" alt="image-20200814222227381"></p><p>这个就是输出的日志，可以看出插入成功了。</p><p>这里要提的就是这个Id主键，没有给他手动设置，他还是插入了一个值：“1294276830076878850”。这个是MybatisPlus自动生成的。</p><p>生成策略下面讲一下。</p><h2 id="4-生成策略"><a href="#4-生成策略" class="headerlink" title="4) 生成策略"></a>4) 生成策略</h2><p>可能面试会问到相关的的东西。</p><p>参考网址：<a href="https://www.cnblogs.com/haoxinyue/p/5208136.html">https://www.cnblogs.com/haoxinyue/p/5208136.html</a></p><p>生成策略有以下几种</p><h5 id="1-自增主键"><a href="#1-自增主键" class="headerlink" title="1.自增主键"></a>1.自增主键</h5><p>Auto Increment</p><p>优点：</p><p>1）简单，代码方便，性能可以接受。</p><p>2）数字ID天然排序，对分页或者需要排序的结果很有帮助。</p><p>缺点：</p><p>分表存储，每次都需要得到上一张表的末尾ID不方便。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200831201544.png" alt="image-20200831201543956"></p><h5 id="2-UUID"><a href="#2-UUID" class="headerlink" title="2.UUID"></a>2.UUID</h5><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200831201601.png" alt="image-20200831201601046"></p><p>优点：唯一。</p><p>缺点：排序不方便。</p><h5 id="3-Redis生成"><a href="#3-Redis生成" class="headerlink" title="3. Redis生成"></a>3. Redis生成</h5><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200831201810.png" alt="image-20200831201810060"></p><h5 id="4-MybatisPlus自带算法，Twitter的Snowflake算法"><a href="#4-MybatisPlus自带算法，Twitter的Snowflake算法" class="headerlink" title="4. MybatisPlus自带算法，Twitter的Snowflake算法"></a>4. MybatisPlus自带算法，Twitter的Snowflake算法</h5><p>结果是一个long型的ID。</p><h2 id="5-Id操作"><a href="#5-Id操作" class="headerlink" title="5) Id操作"></a>5) Id操作</h2><p>在实体类User.java中，加上一个注解：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(type = IdType.ID_WORKER)</span></span><br><span class="line">   <span class="keyword">private</span> Long id;</span><br></pre></td></tr></tbody></table></figure><p>其中 ‘@TableId(type = IdType.XXX)’  是固定的。</p><p>去看IdType的源码：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 数据库ID自增</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   AUTO(<span class="number">0</span>),</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 该类型为未设置主键类型</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   NONE(<span class="number">1</span>),</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 用户输入ID</span></span><br><span class="line"><span class="comment">    * 该类型可以通过自己注册自动填充插件进行填充</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   INPUT(<span class="number">2</span>),</span><br><span class="line"></span><br><span class="line">   <span class="comment">/* 以下3种类型、只有当插入对象ID 为空，才自动填充。 */</span></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 全局唯一ID (idWorker)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   ID_WORKER(<span class="number">3</span>),</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 全局唯一ID (UUID)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   UUID(<span class="number">4</span>),</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 字符串全局唯一ID (idWorker 的字符串表示)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   ID_WORKER_STR(<span class="number">5</span>);</span><br></pre></td></tr></tbody></table></figure><p>其中NONE是不设定，需要人手动输入的。</p><h2 id="6-自动填充"><a href="#6-自动填充" class="headerlink" title="6) 自动填充"></a>6) 自动填充</h2><ol><li><p>在enity实体类User.java中的字段上加入注解@TableField(fill = FieldFill.XXX)</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT)</span></span><br><span class="line"><span class="keyword">private</span> Date createTime;</span><br><span class="line"><span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span></span><br><span class="line"><span class="keyword">private</span> Date updateTime;</span><br></pre></td></tr></tbody></table></figure></li><li><p>实现接口MetaObjectHandler, 重写里面的方法中insertFill和updateFill . 根据名字来设定值.</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.songx64.mpdemo1010.handler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.handlers.MetaObjectHandler;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.reflection.MetaObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> Admin</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title">MetaObjectHandler</span> </span>{</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertFill</span><span class="params">(MetaObject metaObject)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"createTime"</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"updateTime"</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateFill</span><span class="params">(MetaObject metaObject)</span> </span>{</span><br><span class="line">        <span class="keyword">this</span>.setFieldValByName(<span class="string">"updateTime"</span>, <span class="keyword">new</span> Date(), metaObject);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ol><h2 id="7）乐观锁"><a href="#7）乐观锁" class="headerlink" title="7）乐观锁"></a>7）乐观锁</h2><h3 id="什么是乐观锁"><a href="#什么是乐观锁" class="headerlink" title="什么是乐观锁"></a>什么是乐观锁</h3><p>乐观锁是数据库中的概念，为了解决某些问题。主要解决：丢失更新问题。</p><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>数据库中，如果不考虑事务隔离性，会产生什么问题？</p><ul><li>读问题：<ul><li>脏读</li><li>不可重复读</li><li>幻读</li></ul></li><li>写问题<ul><li>丢失更新</li></ul></li></ul><h4 id="丢失更新问题举例"><a href="#丢失更新问题举例" class="headerlink" title="丢失更新问题举例"></a>丢失更新问题举例</h4><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200901111219.png" alt="image-20200901111219126"></p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><ul><li>悲观锁</li><li>乐观锁</li></ul><p>悲观锁是只能有一个人进行操作。</p><p>乐观锁是通过版本号来进行控制，可能有多个人操作但有可能操作失败。</p><h4 id="乐观锁举例"><a href="#乐观锁举例" class="headerlink" title="乐观锁举例"></a>乐观锁举例</h4><p>通过版本号，version字段来进行控制</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200901111433.png" alt="image-20200901111433177"></p><h3 id="mp代码实现乐观锁"><a href="#mp代码实现乐观锁" class="headerlink" title="mp代码实现乐观锁"></a>mp代码实现乐观锁</h3><ol><li><p>给数据库加个version字段</p></li><li><p>给实体类加个version属性，并带上@Version注解</p></li><li><p>写个配置类，加入@Configuration注解。之后在类中加入乐观锁插件（复制代码）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MpConfig</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 乐观锁插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>为了效果明显，先给数据库中的version一个默认的值，这里依旧通过上述的mp的自动填充fill方式实现。</p><ol><li><p>加入@TableField(fill = FieldFill.INSERT)注解</p></li><li><p>去meta元数据的那里加入插入默认值</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.setFieldValByName(<span class="string">"version"</span>, <span class="number">1</span>, metaObject);</span><br></pre></td></tr></tbody></table></figure></li></ol></li><li><p>测试</p></li></ol><p>测试的时候必须“先查再改”，如果直接手动设置值的话version是不会改变的。</p><p>首先通过insertTest插入一个新的记录，可以看到其version为1.</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试修改</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testOptimisticLocker</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">//需要先查再改</span></span><br><span class="line">    User user = userMapper.selectById(<span class="number">1300975732545150977L</span>);</span><br><span class="line">    user.setAge(<span class="number">22</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> row = userMapper.updateById(user);</span><br><span class="line">    System.out.println(<span class="string">"row:"</span> + row);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>   经过上述测试，发现修改年龄之后，记录的version变为2 。说明乐观锁生效。</p><h2 id="8-查询Select"><a href="#8-查询Select" class="headerlink" title="8) 查询Select"></a>8) 查询Select</h2><h3 id="1-通过id来查询"><a href="#1-通过id来查询" class="headerlink" title="1. 通过id来查询"></a>1. 通过id来查询</h3>   <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">User user = userMapper.selectById(<span class="number">1300975732545150977L</span>);</span><br></pre></td></tr></tbody></table></figure><h3 id="2-通过多个id批量查询"><a href="#2-通过多个id批量查询" class="headerlink" title="2.通过多个id批量查询"></a>2.通过多个id批量查询</h3>   <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 多个id批量查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectBatchs</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="comment">//传入一个集合</span></span><br><span class="line">    <span class="comment">// 这里直接通过Arrays.asList()来直接构建一个集合</span></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectBatchIds(Arrays.asList(<span class="number">1L</span>, <span class="number">2L</span>, <span class="number">3L</span>));</span><br><span class="line"></span><br><span class="line">    System.out.println(users);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-通过Map查询"><a href="#3-通过Map查询" class="headerlink" title="3.通过Map查询"></a>3.通过Map查询</h3>   <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 测试Map查询</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectMap</span><span class="params">()</span> </span>{</span><br><span class="line">    HashMap&lt;String,Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"age"</span>,<span class="number">18</span>);</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectByMap(map);</span><br><span class="line"></span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>构建map的语句：HashMap&lt;String,Object&gt; map = new HashMap&lt;&gt;();</p><p>关于最后一句输出语句：</p><blockquote><p>System.out::print ：是方法引用</p><p>方法引用是当你想把一个方法当作一个“函数指针”传给别的方法用时有用的。</p><p>例如说，我有个ArrayList想把里面每个元素都打印出来，每个元素一行。<br>那么Java 8之前会这样写：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (ElementType e : list) {</span><br><span class="line">System.out.println(e);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>从Java 8开始，使用ArrayList的新API加上lambda表达式，我们可以这样写：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.forEach(e -&gt; System.out.println(e));</span><br></pre></td></tr></tbody></table></figure><p>而这里的lambda表达式的内容其实只不过就是把参数传给了println()方法，而没有做任何别的事情，所以可以进一步简写为：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list.forEach(System.out::println);</span><br></pre></td></tr></tbody></table></figure><p>仅此而已。</p><p>重点：</p><ul><li>System.out是一个PrintStream实例的引用；System.out::println 是对一个实例方法的引用<ul><li> 该引用同时指定了对实例（System.out）的引用以及对方法（PrintStream::println）的引用</li></ul></li><li> System.out::println 不是 System.out.println 的等价物；前者是一个方法引用表达式，而后者不能单独作为一个表达式，而必须在后面跟上由圆括号包围的参数列表来构成方法调用表达式。</li><li> System.out::println 可以看作 lambda表达式 e -&gt; System.out.println(e) 的缩写形式。</li></ul></blockquote><p>   所以说以后想要遍历list集合的时候，就直接写 ’list.forEach(System.out::println())’ 就行了</p><h3 id="4-分页"><a href="#4-分页" class="headerlink" title="4.分页"></a>4.分页</h3><p>与PageHelper写法相似。。。</p><ol><li><p>配置分页插件，还是去Config配置类里面加上。（复制代码）</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MpConfig</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 乐观锁插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> OptimisticLockerInterceptor <span class="title">optimisticLockerInterceptor</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> OptimisticLockerInterceptor();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>写测试方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询方法测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testPage</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="comment">//1.创建page对象</span></span><br><span class="line">        <span class="comment">// 参数：current当前页数，size每页多少条记录</span></span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> Page&lt;&gt;(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.进行查询，查询到的数据会全部封装在传过来的page对象里面</span></span><br><span class="line">        <span class="comment">//参数：page对象，wrapper查询条件(暂时写null)</span></span><br><span class="line">        userMapper.selectPage(page, <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.输出测试</span></span><br><span class="line">        System.out.println(<span class="string">"当前页："</span> + page.getCurrent());</span><br><span class="line">        System.out.println(<span class="string">"Records每页数据list集合："</span>);</span><br><span class="line">        page.getRecords().forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">"Size每页记录数："</span> + page.getSize());</span><br><span class="line">        System.out.println(<span class="string">"Total记录总条数："</span> + page.getTotal());</span><br><span class="line">        System.out.println(<span class="string">"Pages总页数："</span> + page.getPages());</span><br><span class="line">        System.out.println(<span class="string">"是否有下一页？ -："</span> + page.hasNext());</span><br><span class="line">        System.out.println(<span class="string">"是否有上一页？ -："</span> + page.hasPrevious());</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>其输出结果如下：</p><blockquote><p>当前页：1<br>Records每页数据list集合：<br>User(id=1, name=Jone, age=22, email=test1@baomidou.com, createTime=null, updateTime=Wed Sep 02 09:56:47 CST 2020, version=null)<br>User(id=2, name=Jack, age=20, email=test2@baomidou.com, createTime=null, updateTime=null, version=null)<br>User(id=3, name=Tom, age=28, email=test3@baomidou.com, createTime=null, updateTime=null, version=null)<br>User(id=4, name=Sandy, age=21, email=test4@baomidou.com, createTime=null, updateTime=null, version=null)<br>User(id=5, name=Billie, age=24, email=test5@baomidou.com, createTime=null, updateTime=null, version=null)<br>Size每页记录数：5<br>Total记录总条数：10<br>Pages总页数：2<br>是否有下一页？ -：true<br>是否有上一页？ -：false</p></blockquote></li></ol><p>控制台sql语句打印：SELECT id,name,age,email,create_time,update_time FROM user LIMIT 0,5 这里的这个Limit</p><p>这个是测试的SelectMapsPage，上面的那个是SelectPage，两个方法不一样。<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200902111447.png" alt="image-20200902111447261"></p><h2 id="9-删除"><a href="#9-删除" class="headerlink" title="9)删除"></a>9)删除</h2><h3 id="0-删除类型"><a href="#0-删除类型" class="headerlink" title="0.删除类型"></a>0.删除类型</h3><ul><li><p>物理删除</p><p>物理删除，删除表中的实际数据。删了数据库里就没了。</p></li><li><p>逻辑删除</p><p>逻辑删除，软删除，只是查询不到。数据库中记录仍然存在。通过一个标志位字段deleted来实现。</p></li></ul><p>首先在表中加个boolean字段：deleted</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> `<span class="keyword">user</span>` <span class="keyword">ADD</span> <span class="keyword">COLUMN</span> `deleted` <span class="type">boolean</span></span><br></pre></td></tr></tbody></table></figure><h3 id="1-根据Id删除"><a href="#1-根据Id删除" class="headerlink" title="1.根据Id删除"></a>1.根据Id删除</h3><p>deleteById，物理删除</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 删除操作，物理删除*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByID</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.deleteById(<span class="number">1L</span>);</span><br><span class="line">    System.out.println(<span class="string">"影响的行数:"</span>+result);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="2-批量ID删除"><a href="#2-批量ID删除" class="headerlink" title="2.批量ID删除"></a>2.批量ID删除</h3><p>deleteBatchIds</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 批量删除操作，物理删除*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteBatchs</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.deleteBatchIds(Arrays.asList(<span class="number">2L</span>,<span class="number">3L</span>,<span class="number">4L</span>));</span><br><span class="line">    System.out.println(<span class="string">"影响的行数:"</span>+result);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="3-Map条件删除"><a href="#3-Map条件删除" class="headerlink" title="3.Map条件删除"></a>3.Map条件删除</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Map条件删除操作，物理删除*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByMap</span><span class="params">()</span> </span>{</span><br><span class="line">    HashMap&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"name"</span>, <span class="string">"Billie"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result = userMapper.deleteByMap(map);</span><br><span class="line">    System.out.println(<span class="string">"影响的行数:"</span> + result);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="4-逻辑删除"><a href="#4-逻辑删除" class="headerlink" title="4.逻辑删除"></a>4.逻辑删除</h3><p>Mp自带了逻辑删除的功能。</p><ol><li><p>在数据库表中增加一个deleted字段。这里通过数据库表，设置其默认值为0.</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="keyword">user</span> <span class="keyword">add</span> `deleted` <span class="type">boolean</span> <span class="keyword">default</span> <span class="number">0</span> <span class="keyword">null</span>;</span><br></pre></td></tr></tbody></table></figure></li><li><p>在实体类User中添加属性，并添加@TableLogic注解</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 逻辑删除字段</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="meta">@TableLogic</span></span><br><span class="line"><span class="keyword">private</span> Integer deleted;</span><br></pre></td></tr></tbody></table></figure></li><li><p>去配置类中，增加逻辑删除插件</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 逻辑删除插件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> ISqlInjector <span class="title">sqlInjector</span><span class="params">()</span> </span>{</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> LogicSqlInjector();</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure></li><li><p>（可选）可以去配置文件application.properties中修改mp的配置：</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mp逻辑删除字段</span></span><br><span class="line"><span class="comment"># 被删除的是1，不被删除的是0。这是mp默认的，所以下面这两句不写也可以。</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-delete-value</span>=<span class="string">1</span></span><br><span class="line"><span class="meta">mybatis-plus.global-config.db-config.logic-not-delete-value</span>=<span class="string">0</span></span><br></pre></td></tr></tbody></table></figure><p>如注释所说。这里可以随意修改这两个值。</p></li><li><p>然后直接去测试就可以了。用的还是原来的方法，不过从物理删除变成了逻辑删除。</p><p>依然执行deleteById方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 删除操作，配置了之后变为删除*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByID</span><span class="params">()</span> </span>{</span><br><span class="line">    <span class="keyword">int</span> result = userMapper.deleteById(<span class="number">1301357687774146562L</span>);</span><br><span class="line">    System.out.println(<span class="string">"影响的行数:"</span> + result);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>然后查看控制台输出的语句：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200903112040.png" alt="image-20200903112040757"></p><p>可以看到，这里执行的是Update语句而不是Delete语句。修改了deleted，也就是含有@TableLogic注解的字段。</p><p>而且可以看到，数据库表中的数据没有被删掉而只是修改了标志位：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200903112245.png" alt="image-20200903112245335"></p><p>同时，查询的时候也是一样，直接执行selectAll方法：<br><img src="C:/Users/15220/AppData/Roaming/Typora/typora-user-images/image-20200903152310626.png" alt="image-20200903152310626"></p></li></ol><h2 id="10）-性能分析"><a href="#10）-性能分析" class="headerlink" title="10） 性能分析"></a>10） 性能分析</h2><p>性能分析拦截器，用于输出每条 SQL 语句及其执行时间</p><p>SQL 性能执行分析,开发环境使用，超过指定时间，停止运行。有助于发现问题</p><h3 id="1-配置插件"><a href="#1-配置插件" class="headerlink" title="1.配置插件"></a>1.配置插件</h3><p><strong>（1）参数说明</strong></p><p>参数：maxTime： SQL 执行最大时长，超过自动停止运行，有助于发现问题。</p><p>参数：format： SQL是否格式化，默认false。</p><p><strong>（2）在 MybatisPlusConfig 中配置</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">/**</span><br><span class="line"> * SQL 执行性能分析插件</span><br><span class="line"> * 开发环境使用，线上不推荐。 maxTime 指的是 sql 最大执行时长</span><br><span class="line"> */</span><br><span class="line">@Bean</span><br><span class="line">@Profile({"dev","test"})// 设置 dev test 环境开启</span><br><span class="line">public PerformanceInterceptor performanceInterceptor() {</span><br><span class="line">    PerformanceInterceptor performanceInterceptor = new PerformanceInterceptor();</span><br><span class="line">    performanceInterceptor.setMaxTime(100);//ms，超过此处设置的ms则sql不执行</span><br><span class="line">    performanceInterceptor.setFormat(true);</span><br><span class="line">    return performanceInterceptor;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><strong>（3）Spring Boot 中设置dev环境</strong></p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#环境设置：dev、test、prod</span><br><span class="line">spring.profiles.active=dev</span><br></pre></td></tr></tbody></table></figure><p>可以针对各环境新建不同的配置文件<code>application-dev.properties</code>、<code>application-test.properties</code>、<code>application-prod.properties</code></p><p>也可以自定义环境名称：如test1、test2</p><ul><li>dev：开发环境</li><li>test：测试环境</li><li>prod：生产环境</li></ul><h3 id="2-测试运行效果"><a href="#2-测试运行效果" class="headerlink" title="2.测试运行效果"></a>2.测试运行效果</h3><p>运行成功情况：其中显示运行时间49ms</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200903154718.png" alt="image-20200903154718335"></p><p>改小执行时间，执行失败的情况：这时候虽然会报错，但是仍然会向数据库中插入数据。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200903155055.png" alt="image-20200903155055509"></p><h1 id="Wrapper"><a href="#Wrapper" class="headerlink" title="Wrapper"></a>Wrapper</h1><p>这里是用Wrapper的子类，较常用的QueryWrapper，进行了几个方法的演示。</p><ol><li>新建QueryWrapper对象</li><li>使用wrapper.xxx()方法，指定查询条件</li><li>传入wrapper对象，执行查询</li></ol><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试Wrapper</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testWrapper</span><span class="params">()</span> </span>{</span><br><span class="line"></span><br><span class="line">    QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> QueryWrapper&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//大于，大于等于，小于，小于等于</span></span><br><span class="line">    <span class="comment">//gt,ge,lt,le</span></span><br><span class="line">    <span class="comment">//wrapper.gt("age", 22);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//之间，between。包括两头，是等于。</span></span><br><span class="line">    <span class="comment">//wrapper.between("age", 18, 23);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//等于，不等于</span></span><br><span class="line">    <span class="comment">//eq,ne</span></span><br><span class="line">    <span class="comment">//wrapper.eq("email","LLL@gmail.com");</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//模糊查询</span></span><br><span class="line">    <span class="comment">//like</span></span><br><span class="line">    wrapper.like(<span class="string">"name"</span>, <span class="string">"不"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//拼接sql</span></span><br><span class="line">    <span class="comment">//last</span></span><br><span class="line">    <span class="comment">//wrapper.last("limit 1");</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//正序排序，逆序排序</span></span><br><span class="line">    <span class="comment">//orderByAsc,orderByDesc</span></span><br><span class="line">    <span class="comment">//wrapper.orderByDesc("age");</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查询指定列，而不是select *</span></span><br><span class="line">    <span class="comment">//select</span></span><br><span class="line">    wrapper.select(<span class="string">"name"</span>, <span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(wrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="课堂笔记，全"><a href="#课堂笔记，全" class="headerlink" title="课堂笔记，全"></a>课堂笔记，全</h1><p>这个是全的笔记，上面的只是列举了几个常用的、可能在项目中用到的方法。</p><blockquote><h1 id="一、wapper介绍"><a href="#一、wapper介绍" class="headerlink" title="一、wapper介绍"></a><strong>一、wapper介绍</strong></h1><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200904203255.png" alt="img"></p><p>Wrapper ： 条件构造抽象类，最顶端父类</p><p>AbstractWrapper ： 用于查询条件封装，生成 sql 的 where 条件</p><p>​    QueryWrapper ： Entity 对象封装操作类，不是用lambda语法</p><p>​    UpdateWrapper ： Update 条件封装，用于Entity对象更新操作</p><p>AbstractLambdaWrapper ： Lambda 语法使用 Wrapper统一处理解析 lambda 获取 column。</p><p>​    LambdaQueryWrapper ：看名称也能明白就是用于Lambda语法使用的查询Wrapper</p><p>​    LambdaUpdateWrapper ： Lambda 更新封装Wrapper</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest</span><br><span class="line">public class QueryWrapperTests {</span><br><span class="line"></span><br><span class="line"> @Autowired</span><br><span class="line"> private UserMapper userMapper;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h1 id="二、AbstractWrapper"><a href="#二、AbstractWrapper" class="headerlink" title="二、AbstractWrapper"></a>二、AbstractWrapper</h1><p>**<br>**<strong>注意：</strong>以下条件构造器的方法入参中的 <code>column </code>均表示数据库字段</p><h2 id="1、ge、gt、le、lt、isNull、isNotNull"><a href="#1、ge、gt、le、lt、isNull、isNotNull" class="headerlink" title="1、ge、gt、le、lt、isNull、isNotNull"></a><strong>1、ge、gt、le、lt、isNull、isNotNull</strong></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testDelete() {</span><br><span class="line"> QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line"> queryWrapper</span><br><span class="line">     .isNull("name")</span><br><span class="line">     .ge("age", 12)</span><br><span class="line">     .isNotNull("email");</span><br><span class="line"> int result = userMapper.delete(queryWrapper);</span><br><span class="line"> System.out.println("delete return count = " + result);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>SQL：UPDATE user SET deleted=1 WHERE deleted=0 AND name IS NULL AND age &gt;= ? AND email IS NOT NULL</p><h2 id="2、eq、ne"><a href="#2、eq、ne" class="headerlink" title="2、eq、ne"></a><strong>2、eq、ne</strong></h2><p><strong>注意：</strong>seletOne返回的是一条实体记录，当出现多条时会报错</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testSelectOne() {</span><br><span class="line"> QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line"> queryWrapper.eq("name", "Tom");</span><br><span class="line"> User user = userMapper.selectOne(queryWrapper);</span><br><span class="line"> System.out.println(user);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version FROM user WHERE deleted=0 AND name = ? </p><h2 id="3、between、notBetween"><a href="#3、between、notBetween" class="headerlink" title="3、between、notBetween"></a><strong>3、between、notBetween</strong></h2><p>包含大小边界</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testSelectCount() {</span><br><span class="line"> QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line"> queryWrapper.between("age", 20, 30);</span><br><span class="line"> Integer count = userMapper.selectCount(queryWrapper);</span><br><span class="line"> System.out.println(count);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>SELECT COUNT(1) FROM user WHERE deleted=0 AND age BETWEEN ? AND ? </p><h2 id="4、allEq"><a href="#4、allEq" class="headerlink" title="4、allEq"></a><strong>4、allEq</strong></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testSelectList() {</span><br><span class="line"> QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line"> Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span><br><span class="line"> map.put("id", 2);</span><br><span class="line"> map.put("name", "Jack");</span><br><span class="line"> map.put("age", 20);</span><br><span class="line"> queryWrapper.allEq(map);</span><br><span class="line"> List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line"> users.forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version </p><p>FROM user WHERE deleted=0 AND name = ? AND id = ? AND age = ? </p><h2 id="5、like、notLike、likeLeft、likeRight"><a href="#5、like、notLike、likeLeft、likeRight" class="headerlink" title="5、like、notLike、likeLeft、likeRight"></a><strong>5、like、notLike、likeLeft、likeRight</strong></h2><p>selectMaps返回Map集合列表</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testSelectMaps() {</span><br><span class="line"> QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line"> queryWrapper</span><br><span class="line">     .notLike("name", "e")</span><br><span class="line">     .likeRight("email", "t");</span><br><span class="line"> List&lt;Map&lt;String, Object&gt;&gt; maps = userMapper.selectMaps(queryWrapper);//返回值是Map列表</span><br><span class="line"> maps.forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version </p><p>FROM user WHERE deleted=0 AND name NOT LIKE ? AND email LIKE ? </p><h2 id="6、in、notIn、inSql、notinSql、exists、notExists"><a href="#6、in、notIn、inSql、notinSql、exists、notExists" class="headerlink" title="6、in、notIn、inSql、notinSql、exists、notExists"></a><strong>6、in、notIn、inSql、notinSql、exists、notExists</strong></h2><p>in、notIn：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">notIn("age",{1,2,3})---&gt;age not in (1,2,3)notIn("age", 1, 2, 3)---&gt;age not in (1,2,3)</span><br></pre></td></tr></tbody></table></figure><p>inSql、notinSql：可以实现子查询</p><ul><li>例: <code>inSql("age", "1,2,3,4,5,6")</code>—&gt;<code>age in (1,2,3,4,5,6)</code></li><li>例: <code>inSql("id", "select id from table where id &lt; 3")</code>—&gt;<code>id in (select id from table where id &lt; 3)</code></li></ul><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testSelectObjs() {</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    //queryWrapper.in("id", 1, 2, 3);</span><br><span class="line">    queryWrapper.inSql("id", "select id from user where id &lt; 3");</span><br><span class="line">    List&lt;Object&gt; objects = userMapper.selectObjs(queryWrapper);//返回值是Object列表</span><br><span class="line">    objects.forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version </p><p>FROM user WHERE deleted=0 AND id IN (select id from user where id &lt; 3) </p><h2 id="7、or、and"><a href="#7、or、and" class="headerlink" title="7、or、and"></a><strong>7、or、and</strong></h2><p><strong>注意：</strong>这里使用的是 UpdateWrapper </p><p>不调用<code>or</code>则默认为使用 <code>and </code>连</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testUpdate1() {</span><br><span class="line">    //修改值</span><br><span class="line">    User user = new User();</span><br><span class="line">    user.setAge(99);</span><br><span class="line">    user.setName("Andy");</span><br><span class="line">    //修改条件</span><br><span class="line">    UpdateWrapper&lt;User&gt; userUpdateWrapper = new UpdateWrapper&lt;&gt;();</span><br><span class="line">    userUpdateWrapper</span><br><span class="line">        .like("name", "h")</span><br><span class="line">        .or()</span><br><span class="line">        .between("age", 20, 30);</span><br><span class="line">    int result = userMapper.update(user, userUpdateWrapper);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>UPDATE user SET name=?, age=?, update_time=? WHERE deleted=0 AND name LIKE ? OR age BETWEEN ? AND ?</p><h2 id="8、嵌套or、嵌套and"><a href="#8、嵌套or、嵌套and" class="headerlink" title="8、嵌套or、嵌套and"></a><strong>8、嵌套or、嵌套and</strong></h2><p>这里使用了lambda表达式，or中的表达式最后翻译成sql时会被加上圆括号</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testUpdate2() {</span><br><span class="line">    //修改值</span><br><span class="line">    User user = new User();</span><br><span class="line">    user.setAge(99);</span><br><span class="line">    user.setName("Andy");</span><br><span class="line">    //修改条件</span><br><span class="line">    UpdateWrapper&lt;User&gt; userUpdateWrapper = new UpdateWrapper&lt;&gt;();</span><br><span class="line">    userUpdateWrapper</span><br><span class="line">        .like("name", "h")</span><br><span class="line">        .or(i -&gt; i.eq("name", "李白").ne("age", 20));</span><br><span class="line">    int result = userMapper.update(user, userUpdateWrapper);</span><br><span class="line">    System.out.println(result);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>UPDATE user SET name=?, age=?, update_time=? </p><p>WHERE deleted=0 AND name LIKE ? </p><p>OR ( name = ? AND age &lt;&gt; ? ) </p><h2 id="9、orderBy、orderByDesc、orderByAsc"><a href="#9、orderBy、orderByDesc、orderByAsc" class="headerlink" title="9、orderBy、orderByDesc、orderByAsc"></a><strong>9、orderBy、orderByDesc、orderByAsc</strong></h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testSelectListOrderBy() {</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.orderByDesc("id");</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version </p><p>FROM user WHERE deleted=0 ORDER BY id DESC </p><h2 id="10、last"><a href="#10、last" class="headerlink" title="10、last"></a><strong>10、last</strong></h2><p>直接拼接到 sql 的最后</p><p><strong>注意：</strong>只能调用一次,多次调用以最后一次为准 有sql注入的风险,请谨慎使用</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testSelectListLast() {</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.last("limit 1");</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>SELECT id,name,age,email,create_time,update_time,deleted,version </p><p>FROM user WHERE deleted=0 limit 1 </p><h2 id="11、指定要查询的列"><a href="#11、指定要查询的列" class="headerlink" title="11、指定要查询的列"></a><strong>11、</strong>指定要查询的列</h2><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testSelectListColumn() {</span><br><span class="line">    QueryWrapper&lt;User&gt; queryWrapper = new QueryWrapper&lt;&gt;();</span><br><span class="line">    queryWrapper.select("id", "name", "age");</span><br><span class="line">    List&lt;User&gt; users = userMapper.selectList(queryWrapper);</span><br><span class="line">    users.forEach(System.out::println);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>SELECT id,name,age FROM user WHERE deleted=0 </p><h2 id="12、set、setSql"><a href="#12、set、setSql" class="headerlink" title="12、set、setSql"></a><strong>12、set、setSql</strong></h2><p>最终的sql会合并 user.setAge()，以及 userUpdateWrapper.set()  和 setSql() 中 的字段</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void testUpdateSet() {</span><br><span class="line">    //修改值</span><br><span class="line">    User user = new User();</span><br><span class="line">    user.setAge(99);</span><br><span class="line">    //修改条件</span><br><span class="line">    UpdateWrapper&lt;User&gt; userUpdateWrapper = new UpdateWrapper&lt;&gt;();</span><br><span class="line">    userUpdateWrapper</span><br><span class="line">        .like("name", "h")</span><br><span class="line">        .set("name", "老李头")//除了可以查询还可以使用set设置修改的字段</span><br><span class="line">        .setSql(" email = '123@qq.com'");//可以有子查询</span><br><span class="line">    int result = userMapper.update(user, userUpdateWrapper);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>UPDATE user SET age=?, update_time=?, name=?, email = ‘123@qq.com’ WHERE deleted=0 AND name LIKE ? </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 常用组件 </tag>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初学习Java脚手架使用——代码生成功能，以Bootdo为例</title>
      <link href="2020/04/15/Bootdo%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>2020/04/15/Bootdo%E5%90%8E%E5%8F%B0%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>com_staff：员工表</p><p>com_customer：客户信息表</p><p>com_business：业务表</p><p>com_material：递交的材料表</p><p>数据库结构如图所示：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1571491231883.png" alt="1571491231883"></p><h1 id="BootDo"><a href="#BootDo" class="headerlink" title="BootDo"></a>BootDo</h1><h2 id="BootDo使用步骤"><a href="#BootDo使用步骤" class="headerlink" title="BootDo使用步骤"></a>BootDo使用步骤</h2><h4 id="后台管理"><a href="#后台管理" class="headerlink" title="后台管理"></a>后台管理</h4><p>总结一下BootDo的使用步骤：</p><ol><li>数据库建表</li><li>部署BootDo系统，运行，使用“系统工具”——“代码生成”，<br>可以修改一下“生成策略”，定义一下名称；<br>然后选择相应的表，“批量生成” 生成代码并下载。</li><li>然后下载的Bootdo.zip中的文件夹，放到我们原来的项目文件夹下，一一对应的拷进去。<br>只不过要注意<code>/resources/mapper/company</code>应该放在<code>/resources/mybatis/company</code>下，而不是新建mapper文件夹</li><li>放好代码后重启BootDo项目，重新进去。然后选择“系统管理” ——“系统菜单”，添加相应的菜单管理项。<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1571492707711.png" alt="1571492576827"><br>如图所示。这里的地址和权限标识都是去源代码中，找到我们刚才复制过来的Java代码里，Controller里面的，每个函数上面都有注解。把那个相应的拿过来填写进去。</li><li>添加完菜单之后，再选择“系统管理”——“角色管理”，如图所示：<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1571492576827.png" alt="1571492707711"><br>选择编辑超级管理员用户，把我们刚才添加的菜单打上对勾，然后“提交”。</li><li>退出系统，重新登录一遍，就可以看见我们添加的”公司管理“菜单出现在左面栏目里了。</li><li>然后我们就可以进行添加、删除等操作了。</li></ol><h4 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h4><p>​    把前端页面放入Bootdo项目中，前端页面目录分为静态资源和html网页文件。静态资源放在resources/static下，网页放在resources/templates文件夹下（如附录中所示）。</p><p>​    一定要注意路径对应。不对的路径一定要改过来。</p><p>​    放完之后是访问不到静态资源和网页的，因为Spring会拦截所有的请求。所以说自己写了一个Controller来对网页进行映射：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.bootdo.company.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping("/company")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonController</span> </span>{</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 自己添加的controller</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping("/index.html")</span></span><br><span class="line">    <span class="function">String <span class="title">indexHtml</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"company/index"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/staffInfo_add.html")</span></span><br><span class="line">    <span class="function">String <span class="title">staffInfoAdd</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"company/staffInfo_add"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@GetMapping("/staffInfo.html")</span></span><br><span class="line">    <span class="function">String <span class="title">staffInfo</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"company/staffInfo"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/clientInfo_add.html")</span></span><br><span class="line">    <span class="function">String <span class="title">clientInfoAdd</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"company/clientInfo_add"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@GetMapping("/clientInfo.html")</span></span><br><span class="line">    <span class="function">String <span class="title">clientInfo</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"company/clientInfo"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/pre_cusInfo_add .html")</span></span><br><span class="line">    <span class="function">String <span class="title">preCusInfoAdd</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"company/pre_cusInfo_add"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@GetMapping("/pre_cusInfo.html")</span></span><br><span class="line">    <span class="function">String <span class="title">preCusInfo</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"company/pre_cusInfo"</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/cusInfo_add.html")</span></span><br><span class="line">    <span class="function">String <span class="title">cusInfoAdd</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"company/cusInfo_add"</span>;</span><br><span class="line">    }</span><br><span class="line">    <span class="meta">@GetMapping("/cusInfo.html")</span></span><br><span class="line">    <span class="function">String <span class="title">cusInfo</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"company/cusInfo"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>就是根据超链接的链接来映射一下文件目录下的网页。之后还要做前后端对接。</p><h2 id="附录："><a href="#附录：" class="headerlink" title="附录："></a>附录：</h2><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><blockquote><p> java代码的对应：<br>   <img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1571491889408.png" alt="1571491889408">    <img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1571492049781.png" alt="1571491920683"></p><hr><p>   resources资源文件夹的对应<br>   <img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1571492120751.png" alt="1571492120751">    <img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1571660425830.png" alt="1571492049781"></p></blockquote><h3 id="前端代码结构："><a href="#前端代码结构：" class="headerlink" title="前端代码结构："></a>前端代码结构：</h3><blockquote><p>CSS、JS、字体、图片等静态资源，放到resources/static文件夹下:</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1571660333125.png" alt="1571660333125"></p><p>html网页文件，放到resources/templates文件夹下：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1571491920683.png" alt="1571660425830"></p></blockquote><h3 id="遇到问题"><a href="#遇到问题" class="headerlink" title="遇到问题"></a>遇到问题</h3><ol><li><p>部署完成后，在”公司管理“——”员工管理“中添加数据，提示”服务器错误“，错误原因是(Unbound未绑定之类的)。</p><p>原因：文件夹放错位置。</p><p>解决方法：如项目路径中所示，压缩文件中的mapper中的company 放到 项目中的mybatis/company中。</p></li><li><p>SpringBoot中Controller返回的路径：</p><p>会自动到templates文件夹下找html，所以说返回直接路径直接从templates下开始写就行。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping("/company/index")</span></span><br><span class="line">   <span class="function">String <span class="title">CompanyIndex</span><span class="params">()</span></span>{</span><br><span class="line">       <span class="keyword">return</span> <span class="string">"company/index"</span>;</span><br><span class="line">   }</span><br></pre></td></tr></tbody></table></figure><p>这个就会自动去找templates/company/index.html。好像是什么静态资源自动解析。</p></li><li><p>在“授中添加“页面”，左侧菜单栏的展开，不管用</p></li><li><p>文件上传失效</p><p>原因是注释掉了，那里那一块用了一个<code>&lt;script id="template-download" type="text/x-tmpl"&gt;</code>的脚本，里面的{ %  xxx % }这个东西好像和SpringBoot有冲突，会报错。</p></li><li><p>Bootdo的文件上传路径？</p><p>在application-dev.yml里面</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">bootdo:</span></span><br><span class="line">  <span class="attr">uploadPath:</span> <span class="string">c:/var/uploaded_files/</span></span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GMIS2017大会演讲笔记——朱军详解珠算：贝叶斯深度学习的GPU库</title>
      <link href="2020/03/19/%E6%9C%B1%E5%86%9B%E6%BC%94%E8%AE%B2-GMIS2017%E5%A4%A7%E4%BC%9A/"/>
      <url>2020/03/19/%E6%9C%B1%E5%86%9B%E6%BC%94%E8%AE%B2-GMIS2017%E5%A4%A7%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<h1 id="清华大学朱军详解珠算：贝叶斯深度学习的GPU库"><a href="#清华大学朱军详解珠算：贝叶斯深度学习的GPU库" class="headerlink" title="清华大学朱军详解珠算：贝叶斯深度学习的GPU库"></a><a href="https://blog.csdn.net/uwr44uouqcnsuqb60zk2/article/details/78333888">清华大学朱军详解珠算：贝叶斯深度学习的GPU库</a></h1><p>视频：<a href="https://v.qq.com/x/page/y0509hhzfyr.html">https://v.qq.com/x/page/y0509hhzfyr.html</a></p><h2 id="贝叶斯深度学习"><a href="#贝叶斯深度学习" class="headerlink" title="贝叶斯深度学习"></a><strong>贝叶斯深度学习</strong></h2><h3 id="深度学习的问题"><a href="#深度学习的问题" class="headerlink" title="深度学习的问题"></a>深度学习的问题</h3><p>现在深度学习在各个领域里有很多用处。虽然 Deep Learning 非常好，但还不足够好。我们看一下大家都很熟知的 Deep Learning 还存在的两个问题：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131825.png" alt="image-20191102165130114"></p><p>**一个问题是（深度学习）可能==不是很鲁棒==**。可能会存在这种所谓的对抗样本，这有一个简单的例子，比如你有一个建筑物的图片，你可以用一个训练很好的神经网络分类得很准确。但是，我们可以加一些噪声，这些噪声可能是人检测不到的，合成一个图片之后却可以完全误导这个网络，甚至能够按照你的意愿误导分到某一个类。这是非常不好的性质，尤其我们在关键领域用深度学习的时候——一旦遇到这种情况发生，可能就会有一些比较致命性的错误发生。所以我们就想提出一个问题：机器学习或者深度学习本身能不能像人一样犯错误？人可能更多的时候是更鲁棒的，人可能会犯错误，但是人犯的错误相对都是比较直观、比较合理一点的——可能有某种道理在里面。</p><p>**另外一个问题是深度学习大部分情况下都被我们当成一个==黑箱==**。所以现在有很多的工作，包括我们自己的工作，都是试图去解释深度学习学到了什么。这里我们列了一个去年做的 CNNVis 的工作，能展示卷积网络每一层是什么、层和层之间是怎么关联的。这个方法非常受欢迎，也从一个侧面说明了大家对这个问题关心的程度。</p><h3 id="机器学习的两个极端"><a href="#机器学习的两个极端" class="headerlink" title="机器学习的两个极端"></a>机器学习的两个极端</h3><p>在我看来，**==Deep Learning== 本身属于机器学习的一个极端<strong>，它用了</strong>大量的训练样本，用了大量的计算资源<strong>。结果是我们在很多任务下，在</strong>特定环境、特定数据集上可以得到非常高的准确度**，当然背后也有我们对网络结构的人为调整。</p><p><strong>另外一端是==贝叶斯的学习方法==<strong>，大家可能知道，2015 年的时候，在 AlphaGo 火之前，Science 有一篇文章就说怎么设计贝叶斯程序，在这种情况下可以用</strong>少量的训练样本</strong>帮助我们学非常精确的模型，当时展示的成果是这个贝叶斯程度可以（在手写体数字生成和识别任务上）通过视觉图灵测试。这从一个方面告诉我们：我们做学习的时候可以有不同的思路。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131835.png" alt="image-20191102170155443"></p><p>这是学习范式的两个极端，两者之间就有很多的事情可以做。我们把中间称之为==「贝叶斯深度学习（Bayesian Deep Learning）」==。它<strong>既有贝叶斯本身的可解释性</strong>，可以从少量的数据里边来学习；另外<strong>又有 Deep Learning 非常强大的拟合能力</strong>。</p><h3 id="深度生成模型"><a href="#深度生成模型" class="headerlink" title="深度生成模型"></a>深度生成模型</h3><p>给大家看一个最近非常火的例子，叫==<strong>深度生成模型（Deep Generative Models）</strong>==，这是<strong>典型的融合了深度学习和贝叶斯方法的模型</strong>。这里做了一个抽象：上面有一个隐含的变量，用 Z 表示；中间会经过一个深度神经网络，你可以根据你的任务选择不同的神经网络、不同的深度、不同的结构；下面是我们观察到的数据 X。这个场景有很多，比如对抗生成网络，可以生成高维的自然图片。实际上，Z 可以是非常随机的噪声，通过神经网络可以生成非常高质量的图片。</p><p>在这种框架下，我们可以做很多。比如可以<strong>给隐含变量设定某些结构信息</strong>，比如生成人脸时，有一些变量指代人的姿态，另外一些变量可能描述其他的特征，这两个放在一起我们就可以构建这样一个深度生成模型。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131827.png" alt="image-20191102165320932"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131826.png" alt="image-20191102165227993"></p><p>它同一列有同一姿态，可以变化其它变量来生成不同的图片。现在是非常受欢迎、非常强大的一种模型了。</p><p>下面用更形式化的方式进行描述。我们用==概率模型==来描述，比如对 Z 变量（隐含变量），我们会用 <strong>P(Z) 来描述它的先验分布</strong>；中间有一个<strong>参数化的神经网络做变换</strong>；最后生成<strong>我们想要的数据 X</strong>。在不同场景下，这个 Z 的含义可能不一样。比如：如果要生成医学图片，我们通常希望 Z 能够表达造成疾病的原因；而对于文本图片，我们可能希望理解背后的主题等等。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131823.png" alt="image-20191102164707467"></p><p>这个模型其实非常直观，但是它的<strong>难点在于我们所谓的 Inference（推断）</strong>，这个过程是<strong>反向</strong>过来的——在 Inference 过程中，观察一些 X，然后我们用一些推导工具推导出我们观察到的 Z 到底是什么。在这个过程中，我们要用到一个主要的公式——贝叶斯公式。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131828.png" alt="image-20191102165428221"></p><h2 id="珠算"><a href="#珠算" class="headerlink" title="珠算"></a><strong>珠算</strong></h2><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131829.png" alt="image-20191102165512888"></p><p>那么珠算平台到底是起到什么作用呢？</p><p>我们都知道有很多公开的框架可以支持深度学习进行非常迅速的开发和原型设计，但目前还并没有很好的平台能支持贝叶斯深度学习。所以，我们构建了称之为珠算的平台。</p><p><strong>珠算平台可以支持我们进行深度学习，也可以支持贝叶斯推断，当然还可以是两者之间有机的融合</strong>。</p><p>大家知道，珠算或算盘是最古老的计算机器（calculating machine），被认为是中国的历史第五大发明。我们之所以取名为「珠算」，就是希望这个平台能够从某种意义上给传统算盘一种新的解释，同时还希望这个平台能够进行高效的计算。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131830.png" alt="image-20191102165525545"></p><p>珠算是一个生成模型的 Python 库，构建于 TensorFlow 之上。珠算不像现有的主要是为监督学习而设计的深度学习库，它是一种<strong>扎根于贝叶斯推断并支持多种生成模型</strong>的软件库。</p><p>珠算区别于其他平台的一个很大的特点，即<strong>可以深度地做贝叶斯推断</strong>，因此，也就可以<strong>很有效地支持深度生成模型</strong>。</p><p>珠算平台可以在 GPU 上<strong>训练神经网络</strong>，同时·我们可以在上面做<strong>概率建模</strong>和<strong>概率推断</strong>，带来==好处==有：可以利用<strong>无监督数据</strong>、可以做<strong>小样本学习</strong>、可以做<strong>不确定性的推理和决策</strong>、可以<strong>生成新的样本</strong>等等。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131831.png" alt="image-20191102165556709"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131832.png" alt="image-20191102165627305"></p><p>为了做珠算平台，第一步是个抽象过程，需要把<strong>一类的模型</strong>能够抽象表达出来，在这里我们用<strong>贝叶斯网络</strong>。</p><p>贝叶斯网络是在深度学习流行之前非常主流的方法，它是一种非常好的形式化方式，能非常直观地刻画模型。但是，与传统的贝叶斯网络不通，我们是<strong>深度融合了贝叶斯方法和深度神经网络的优点</strong>，因此，我们的贝叶斯网络有<strong>两类节点：随机的节点和确定性的节点</strong>。</p><p><strong>确定性的节点</strong>基本上对应了<strong>深度神经网络的非线性变换</strong>，而<strong>随机节点</strong>可以描述<strong>不确定性</strong>。珠算是完全支持这两种节点的。</p><p>在确定性的节点上我们把 TensorFlow 的所有操作都继承了下来。我们可以像在 TensorFlow 上构建神经网络一样构建中间的一些模块。</p><p>如上图所示，构建一个模型很直观。我们首先只需要初始化 BayesianNet 环境，然后按照直观写模型。</p><h3 id="实例：生成手写体字符"><a href="#实例：生成手写体字符" class="headerlink" title="实例：生成手写体字符"></a>实例：生成手写体字符</h3><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131833.png" alt="image-20191102165824293"></p><p>这是一个具体的例子，如上图所示，我们需要==生成手写体字符==，这种情况下因为数据不是很高维，用简单的生成模型就够了，比如有一个 <strong>Z 变量，Z 是随机的</strong>，经过<strong>两层的全连接的神经网络</strong>，最后<strong>生成我们的 X</strong>，这种模型在珠算里面非常容易写。可以在起始化 BayesianNet 环境之后，就沿着箭头的方向来写。</p><p>比如：我们说 <strong>Z 变量服从一个高斯分布（z = zs.Normal()）</strong>，珠算平台中有正态分布函数可以刻画该分布。接下来是<strong>两层的全连接层（layers.fully_connected()）</strong>，最下面是<strong>数据的生成</strong>，比如我们数据是<strong>二值的，那么可以用伯努力随机分布</strong>来刻画它，这是非常直观地写模型的框架。你可以根据自己的需要书写其他的生成模型。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131834.png" alt="image-20191102170032641"></p><p>对于这种模型最难的实际上是<strong>推断部分</strong>，在==机器学习里有两类的推断方法==，一种是==变分（Variational）方法==，一种是==蒙特卡罗模拟方法==。</p><p>对于<strong>变分方法</strong>来说，红色的点是我们的目标，在某个概率分布空间里面，但我们并不能直接计算。所以，变分方法主要是希望在某个简化的子集里找一个蓝色的点去逼近它，我们希望这个逼近是最优的，所以通常情况下要解决最优化问题。这里边有很多推导公并没有提到。</p><p>对于 <strong>MCMC 方法</strong>来说，现在主流的解决方法是构造一些动力学方程，以达到模拟的效果，这里也隐含了很多技术细节。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131824.png" alt="image-20191102165015025"></p><p>因此，即使是非常简单的模型，如果要做推断都可能需要<strong>很多的数学推导，我们需要算梯度、调步长参数等等</strong>。而且很多步骤可能都会使我们犯错误，所以这是一个复杂的过程。而<strong>珠算要做的就是简化推导实现的过程</strong>，并用一个<strong>非常简洁的（概率）编程方式</strong>写出来，编程对计算机来说是最容易理解的。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131839.png" alt="image-20191102161846223"></p><h3 id="珠算推断Inference"><a href="#珠算推断Inference" class="headerlink" title="珠算推断Inference"></a>珠算推断Inference</h3><p>给大家两个例子看我们怎么通过珠算实现推断的。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131836.png" alt="image-20191102170122119"></p><p>首先，比如我们要做一个==变分推断==，在珠算上变分推断只需要三步：</p><p>第一步，我们要<strong>构造</strong>一个<strong>变分分布</strong>，这个变分分布就像我前面讲的生成模型一样，可以通过初始化一个 BayesianNet，然后非常直观地写每部分是确定性的还是随机的等等。</p><p>第二步，可以<strong>调用</strong>一下<strong>变分目标</strong>（variational objective），比如 z.sgvb，珠算上实现了不同的变分目标。</p><p>剩下的事情，就是使用<strong>梯度下降</strong>进行<strong>迭代</strong>，就像我们实现深度神经网络一样，不断地使用随机梯度下降进行迭代而达到<strong>优化</strong>，这是典型变分推断的实现。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131834.png" alt="image-20191102170032641"></p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131837.png" alt="image-20191102170346861"></p><p>如果我们要做的是 ==HMC==，HMC 是一个==混合的蒙特卡罗方法或者哈密尔顿蒙特卡罗方法==，这属于机器学习里面的一种十分优秀的算法，它可以处理高维空间里面的采样，该算法在珠算上也非常容易来实现。</p><p>我们首先需要<strong>构建变量以储存样本</strong>，然后就可以<strong>初始化 HMC 采样器</strong>。</p><p>接下来调用 <strong>sample() 函数</strong>就可以得到一个<strong>采样算子</strong>，随后的在不断<strong>运行样本迭代</strong>时，就像<strong>求解一个最优化算法</strong>一样。</p><p>如果大家熟悉深度神经网络过程的话，基本上我们对这种贝叶斯神经网络可以完全对等地去实现。</p><h2 id="贝叶斯深度学习怎么用？"><a href="#贝叶斯深度学习怎么用？" class="headerlink" title="贝叶斯深度学习怎么用？"></a><strong>贝叶斯深度学习怎么用？</strong></h2><p>贝叶斯深度学习在什么地方可以用？我给大家看一些例子。在我们课题组里主要**==强调如何用非常少的标注数据进行有效的学习==**。</p><p>在机器学习里边有一个大家研究很多的叫<strong>半监督学习（Semi—supervised Learning）</strong>的场景，它可以利用<strong>大量的未标注数据</strong>帮助从<strong>少量标注数据中学习分类器</strong>。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131838.png" alt="image-20191102161410283"></p><p>技术细节我就不说了，来看看结果。这个红色框里面是我们做出的结果，比如说在 SVHN 的数据集上，我们大概用==1% 的训练数据就可以达到 5% 的错误率==，这个是目前最佳的结果。</p><p>因为我们是一个<strong>生成模型</strong>，所以我们<strong>还可以去生成新的样本</strong>，比如说我们可以生成二维的手写体字符。在一维上固定一个变量，调另外一个变量，生成你想要的某个类别或者某种风格的字符。</p><p>这是更新的工作，我们是在生成对抗网络（GAN）上做的。大家知道 GAN，它的生成效果很好了。我们在小样本的学习下面也可以做非常好的效果，我们提出了一个 Triple GAN 的工作。在这个自然图片的数据集上，比之前大家做的各种 GAN 变种的结果显著要好（错误率更低）。大家同时可以看出来，这个生成结果和自然图片也非常接近了。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131840.png" alt="image-20191102161942375"></p><p>下面一个例子是我前面提到过的——==用贝叶斯方法做<strong>小样本学习</strong>==。这是一个极端的例子，就是在训练的时候给它看一些基本的数据，将来在测试的时候会遇到新的类别（或概念），我们只给它看一个训练样例，然后希望它能够从中学出来一个贝叶斯程序，可以生成同一类的数据或者做识别。我们现在有一些在汉字上做的初步结果。给大家看一些例子，比如最上面给出了某一种字的一个样例，下面是生成出来的；基本上，大家能看出来和原始给的那个字的风格还是非常一致的，所以这个效果还是非常好的。一些技术细节我在这里就不详细说了。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131838.png" alt="image-20191102161410283"></p><p>最后一个例子也是我前面讲的==鲁棒的 Deep Learning==。Deep Learning 有很多<strong>潜在攻击样本</strong>，我怎么让它变得更鲁棒？实际上，最近有一些工作显示使用贝叶斯推理可以让深度神经网络变得更鲁棒，比如：剑桥做的一个工作，这是我们复现出来的在一个数据集上的比较。这个测试数据集有一半是攻击样本、一半是正常样本。这个黑色的线是一个<strong>标准的神经网络，不用贝叶斯推理</strong>，它的<strong>正确率从 0.9 几（可能 0.97、0.98）一下子降到 0.6 几</strong>，降得非常严重。蓝色的线是<strong>贝叶斯神经网络</strong>，它可以做到更好，<strong>可以达到 75%、80% 左右的正确率</strong>，已经是非常不错的。右边的图是说你可以过滤掉多少对抗样本。大家可以看出来，这个蓝色的线，用贝叶斯网络可以帮助我们更好地识别对抗样本，提升鲁棒性。<strong>我们最近做了一个工作</strong>，结果是红色的线，能够更<strong>显著地识别 adversarial sample 和 normal sample</strong>，两个混在一起的时候，<strong>测试准确度能够显著地提升</strong>，实际上我们可以在一定条件下 达到图中的 Normal Accuracy。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/20200329131759.png" alt="image-20191102162312934"></p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
            <tag> 珠算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot创建项目</title>
      <link href="2020/03/12/SpringBoot%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%B9%B6%E6%95%B4%E5%90%88%E7%BB%84%E4%BB%B6/"/>
      <url>2020/03/12/SpringBoot%E6%96%B0%E5%BB%BA%E9%A1%B9%E7%9B%AE%E5%B9%B6%E6%95%B4%E5%90%88%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="SpringBoot创建项目"><a href="#SpringBoot创建项目" class="headerlink" title="SpringBoot创建项目"></a>SpringBoot创建项目</h1><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>首先把html放到template文件夹中，可以使用Thymeleaf模板功能。如果放到static文件夹下就不能用。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1568275112273.png" alt="结构图"></p><p>同样，dao，entities，controller也是放到相应的文件夹下</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1568275189019.png" alt="1568275189019"></p><p>然后我是在HelloController中修改了”"和“\index”的Mapping，修改启动主页：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping({"/","zuye","index"})</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">ZuYe</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><ul><li><strong>500错误</strong>：未在pom.xml引入spring-boot-starter-thymeleaf启动器依赖</li></ul><h1 id="SpringBoot配置文件"><a href="#SpringBoot配置文件" class="headerlink" title="SpringBoot配置文件"></a>SpringBoot配置文件</h1><p>首先在<strong>pom.xml</strong>中引入<strong>配置文件解释器</strong>：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置文件处理器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>引入了之后就会有提示了。</p><h2 id="application文件举例"><a href="#application文件举例" class="headerlink" title="application文件举例"></a>application文件举例</h2><p>配置文件默认是<strong>application.properties或者是application.yml</strong></p><p>举例：</p><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置person的值，与yml语法不一样</span></span><br><span class="line"><span class="comment">#引入配置文件处理器后，可以自动提示</span></span><br><span class="line"><span class="meta">person.last-name</span>= <span class="string">张三</span></span><br><span class="line"><span class="meta">person.age</span>=<span class="string">19</span></span><br><span class="line"><span class="meta">person.birth</span>=<span class="string">2001/03/04</span></span><br><span class="line"><span class="meta">person.boss</span>=<span class="string">false</span></span><br><span class="line"><span class="meta">person.list</span>=<span class="string">a,b,c</span></span><br><span class="line"><span class="meta">person.maps.k1</span>=<span class="string">v1</span></span><br><span class="line"><span class="meta">person.maps.k2</span>=<span class="string">12</span></span><br><span class="line"><span class="meta">person.dog.name</span>=<span class="string">dog</span></span><br><span class="line"><span class="meta">person.dog.age</span>=<span class="string">2</span></span><br></pre></td></tr></tbody></table></figure><h3 id="application-yml"><a href="#application-yml" class="headerlink" title="application.yml"></a>application.yml</h3><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"></span><br><span class="line"><span class="attr">person:</span></span><br><span class="line">  <span class="attr">lastName:</span> <span class="string">zhang</span></span><br><span class="line">  <span class="attr">age:</span> <span class="number">18</span></span><br><span class="line">  <span class="attr">boss:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">birth:</span> <span class="number">2001</span><span class="string">/12/12</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#数组、list、set</span></span><br><span class="line">  <span class="attr">list:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">lisi</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">wangwu</span></span><br><span class="line">  <span class="comment">#数组行内写法</span></span><br><span class="line">  <span class="attr">list:</span> [<span class="string">lisi</span>,<span class="string">wangwu</span>]</span><br><span class="line">  <span class="comment">#对象或Map，k-v</span></span><br><span class="line">  <span class="attr">dog:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">Tom</span></span><br><span class="line">    <span class="attr">age:</span> <span class="number">3</span></span><br><span class="line">  <span class="comment">#对象或Map行内写法</span></span><br><span class="line">  <span class="attr">maps:</span> {<span class="attr">k1:</span> <span class="string">v1</span>, <span class="attr">k2:</span> <span class="number">12</span>}</span><br></pre></td></tr></tbody></table></figure><ul><li><p>yml一定要在 “冒号：” 后面加个<strong>空格</strong>，不然识别不了。</p></li><li><p>yml是<em><strong>缩进控制</strong></em>的语法，大小写敏感。</p></li><li><p>占位符，yml和properties都支持</p></li></ul><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#随机uid</span></span><br><span class="line"><span class="string">person.last-name=张三${random.uuid}</span></span><br><span class="line"><span class="comment">#随机int</span></span><br><span class="line"><span class="string">person.age=${random.int}</span></span><br><span class="line"><span class="comment">#指定属性值</span></span><br><span class="line"><span class="comment">#这样出来就是“张三uid_cat”</span></span><br><span class="line"><span class="string">person.cat.name=${person.name}_cat</span></span><br><span class="line"><span class="comment">#没有hello属性，会使用冒号后面的默认值；如果不加默认值的话，会直接输出这个式子</span></span><br><span class="line"><span class="string">person.dog.name=${person.hello:hello}_dog</span></span><br></pre></td></tr></tbody></table></figure><h2 id="Profile"><a href="#Profile" class="headerlink" title="Profile"></a>Profile</h2><p>SpringBoot支持配置文件多Profile，形式如application-dev.yml(开发环境配置文件),application-pro.properties(生产环境配置文件)。</p><p>这样命名之后可以直接通过一些方式来指定使用哪一个配置文件。</p><p>这里的名字是可以随便起的（符合规范别xjb起就行）。</p><h3 id="yml多文档块方式"><a href="#yml多文档块方式" class="headerlink" title="yml多文档块方式"></a>yml多文档块方式</h3><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#我们假设不同环境使用的端口不同</span></span><br><span class="line"><span class="comment">#文档块1，prod环境，active表明现在是激活的</span></span><br><span class="line"><span class="attr">server:</span> </span><br><span class="line"><span class="attr">port:</span> <span class="number">8081</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line"><span class="attr">profiles:</span> </span><br><span class="line"><span class="attr">active:</span> <span class="string">prod</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#3个横线分割文档块，下面就相当于第2个文档了</span></span><br><span class="line"><span class="comment">#spring.profiles,就是指定是啥profiles环境了</span></span><br><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8082</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line"><span class="attr">profiles:</span> <span class="string">dev</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#第3个也一样</span></span><br><span class="line"><span class="attr">server:</span> </span><br><span class="line"><span class="attr">port:</span> <span class="number">8083</span></span><br><span class="line"><span class="attr">spring:</span> </span><br><span class="line"><span class="attr">profiles:</span> <span class="string">prod</span></span><br></pre></td></tr></tbody></table></figure><h3 id="指定profile"><a href="#指定profile" class="headerlink" title="指定profile"></a>指定profile</h3><ol><li><p>配置文件中直接写，比如上面的<code>spring.profiles.active=prod</code></p></li><li><p>命令行中指定参数：<br>在项目打jar包之后，使用命令行进行部署时可以像这个命令一样指定profiles：<br><code>java -jar jar包名.jar -spring.profiles.active=dev ;</code><br>或者可以在IDEA中运行设置，Edit Configuation中的Program arguments填写<code>spring.profiles.active=dev</code></p></li><li><p>虚拟机参数:<br>在Edit Configuations中的VM options:：</p><p>-Dspring.profiles.active=dev</p><!--这里的 -D是必须的，指定虚拟机参数--><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1567735965139.png" alt="Edit Configurations"></p></li></ol><h3 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h3><ul><li><p>4个位置：</p><p>优先级从高到低，属性不同互补，相同高的覆盖低的</p><p>-file: /config/                当前文件夹下的config文件夹下（比如整个项目文件夹下）<br>-file: /                            文件夹下根目录里<br>-classpath: /config/    类目录下的config文件夹下（IDEA里面的<br>-classpath: /                类目录下的根目录里<br><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1567736810626.png" alt="1567736810626"></p></li><li><p>指定配置文件路径</p><p>在默认的全局配置文件中可以写:</p><p><code>spring.config.loactions=G:/application.properties</code></p></li></ul><h3 id="配置文件加载优先级"><a href="#配置文件加载优先级" class="headerlink" title="配置文件加载优先级"></a>配置文件加载优先级</h3><p><a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-external-config.html">这里具体参见官方文档</a></p><p>我们重点关注以下几个顺序，优先级都是从高到低的：</p><ol><li><p>命令行参数</p><p><strong>jar包外向jar包内进行寻找</strong></p><p><strong>优先加载带profile的</strong></p></li><li><p>jar包外的application-{profiles}配置文件(properties或yml)</p></li><li><p>jar包内的application-{profiles}配置文件</p><p><strong>之后是不带profile的</strong></p></li><li><p>jar包外的application.properties或yml</p></li><li><p>jar包内的application.properties或yml</p></li><li><p>@Configuration注解类上的@PropertySource</p></li></ol><h1 id="自动配置的原理"><a href="#自动配置的原理" class="headerlink" title="自动配置的原理"></a>自动配置的原理</h1><p>这里涉及到比较底层的Spring注解，先暂时跳过了。</p><h1 id="SpringBoot日志"><a href="#SpringBoot日志" class="headerlink" title="SpringBoot日志"></a>SpringBoot日志</h1><p>日志分为日志门面（日志的抽象层）和日志实现</p><p>SpringBoot：底层是Spring框架，Spring框架默认使用JCL（很久没有更新过了）</p><p>​    <strong>SpringBoot选用的是SLF4（门面）和logback（实现）</strong></p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//记录器</span></span><br><span class="line">Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>{</span><br><span class="line"><span class="comment">//System.out.println();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//日志的级别；</span></span><br><span class="line"><span class="comment">//由低到高   trace&lt;debug&lt;info&lt;warn&lt;error</span></span><br><span class="line"><span class="comment">//可以调整输出的日志级别；日志就只会在这个级别以以后的高级别生效</span></span><br><span class="line">logger.trace(<span class="string">"这是trace日志..."</span>);</span><br><span class="line">logger.debug(<span class="string">"这是debug日志..."</span>);</span><br><span class="line"><span class="comment">//SpringBoot默认给我们使用的是info级别的，没有指定级别的就用SpringBoot默认规定的级别；root级别</span></span><br><span class="line">logger.info(<span class="string">"这是info日志..."</span>);</span><br><span class="line">logger.warn(<span class="string">"这是warn日志..."</span>);</span><br><span class="line">logger.error(<span class="string">"这是error日志..."</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">  日志输出格式：</span><br><span class="line">%d表示日期时间，</span><br><span class="line">%thread表示线程名，</span><br><span class="line">%-5level：级别从左显示5个字符宽度</span><br><span class="line">%logger{50} 表示logger名字最长50个字符，否则按照句点分割。 </span><br><span class="line">%msg：日志消息，</span><br><span class="line">%n是换行符</span><br><span class="line">  --&gt;</span><br><span class="line">  %d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{50} - %msg%n</span><br></pre></td></tr></tbody></table></figure><p>SpringBoot修改日志的默认配置</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">logging.level.com.atguigu</span>=<span class="string">trace</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#logging.path=</span></span><br><span class="line"><span class="comment"># 不指定路径在当前项目下生成springboot.log日志</span></span><br><span class="line"><span class="comment"># 可以指定完整的路径；</span></span><br><span class="line"><span class="comment">#logging.file=G:/springboot.log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在当前磁盘的根路径下创建spring文件夹和里面的log文件夹；使用&nbsp;spring.log 作为默认文件</span></span><br><span class="line"><span class="meta">logging.path</span>=<span class="string">/spring/log</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#  在控制台输出的日志的格式</span></span><br><span class="line"><span class="meta">logging.pattern.console</span>=<span class="string">%d{yyyy-MM-dd} [%thread] %-5level %logger{50} - %msg%n</span></span><br><span class="line"><span class="comment"># 指定文件中日志输出的格式</span></span><br><span class="line"><span class="meta">logging.pattern.file</span>=<span class="string">%d{yyyy-MM-dd} === [%thread] === %-5level === %logger{50} ==== %msg%n</span></span><br></pre></td></tr></tbody></table></figure><table><thead><tr><th>logging.file</th><th>logging.path</th><th>Example</th><th>Description</th></tr></thead><tbody><tr><td>(none)</td><td>(none)</td><td></td><td>只在控制台输出</td></tr><tr><td>指定文件名</td><td>(none)</td><td>my.log</td><td>输出日志到my.log文件</td></tr><tr><td>(none)</td><td>指定目录</td><td>/var/log</td><td>输出到指定目录的 spring.log 文件中</td></tr></tbody></table><h1 id="整合JDBC"><a href="#整合JDBC" class="headerlink" title="整合JDBC"></a>整合JDBC</h1><ol><li>添加pom依赖</li><li>配置文件中添加数据库驱动，用户名，密码，url</li><li>新建DataSource对象getConnection()一下，来看看是否连接成功</li></ol><p>新建项目时勾选MySQL和JDBC:</p><h2 id="pom-xml中jdbc和mysql的依赖"><a href="#pom-xml中jdbc和mysql的依赖" class="headerlink" title="pom.xml中jdbc和mysql的依赖"></a>pom.xml中jdbc和mysql的依赖</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>然后在配置文件中，增加数据库连接的属性：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#   数据源基本配置</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springbootlearn?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br></pre></td></tr></tbody></table></figure><p>遇到问题：</p><p>抛出<code>The server time zone value '�й���׼ʱ��' is unrecogni</code>错误 </p><p>原因是因为使用了Mysql Connector/J 6.x以上的版本，然后就报了时区的错误</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">将原来的连接：</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/</span></span><br><span class="line"><span class="attr">修改为：</span></span><br><span class="line"><span class="meta">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/springbootlearn?serverTimezone=UTC</span></span><br></pre></td></tr></tbody></table></figure><p>添加?serverTimezone=UTC即可解决。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>SpringBoot测试类：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot06DataJdbcApplicationTests</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DataSource dataSource;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>{</span><br><span class="line"><span class="comment">//        输出class com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        System.out.println(dataSource.getClass());</span><br><span class="line"></span><br><span class="line">        Connection connection = dataSource.getConnection();</span><br><span class="line"><span class="comment">//        输出HikariProxyConnection@507944445 wrapping com.mysql.cj.jdbc.ConnectionImpl@554f0dfb</span></span><br><span class="line"><span class="comment">//        说明SpringBoot2.0+使用的默认数据源是:com.zaxxer.hikari.HikariDataSource</span></span><br><span class="line">        System.out.println(connection);</span><br><span class="line">        connection.close();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h1 id="使用阿里数据源Druid"><a href="#使用阿里数据源Druid" class="headerlink" title="使用阿里数据源Druid"></a>使用阿里数据源Druid</h1><ol><li><p>添加依赖</p></li><li><p>在配置文件中增加属性，特别是type修改使用数据源</p></li><li><p>编写配置类</p></li></ol><p>​    数据源是一种提高数据库连接性能的常规手段，它会创建一个数据连接池，由它来管理数据库连接，而不需要手动的频繁打开或关闭数据库连接从而提高了性能。</p><p>​    DRUID是阿里巴巴开源平台上一个数据库连接池实现，它结合了C3P0、DBCP、PROXOOL等DB池的优点，同时加入了<strong>日志监控</strong>，可以很好的监控DB池连接和SQL的执行情况，可以说是针对监控而生的DB连接池，据说是目前最好的连接池。</p><p>​    上面SpringBoot默认的数据源是com.zaxxer.hikari.HikariDataSource，然后我们将其修改为alibaba的Druid。</p><p>在上面的基础上进行修改：</p><h2 id="pom-xml引入依赖"><a href="#pom-xml引入依赖" class="headerlink" title="pom.xml引入依赖"></a>pom.xml引入依赖</h2><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/com.alibaba/druid --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​    具体依赖还有各种版本可以去Maven Repository网站搜Druid</p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="comment">#   数据源基本配置</span></span><br><span class="line">    <span class="attr">initialization-mode:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/springbootlearn?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment">#    schema:</span></span><br><span class="line"><span class="comment">#      - classpath:department.sql</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#   数据源其他配置</span></span><br><span class="line">    <span class="attr">initialSize:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">minIdle:</span> <span class="number">5</span></span><br><span class="line">    <span class="attr">maxActive:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">maxWait:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">timeBetweenEvictionRunsMillis:</span> <span class="number">60000</span></span><br><span class="line">    <span class="attr">minEvictableIdleTimeMillis:</span> <span class="number">300000</span></span><br><span class="line">    <span class="attr">validationQuery:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line">    <span class="attr">testWhileIdle:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">testOnBorrow:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">testOnReturn:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">poolPreparedStatements:</span> <span class="literal">true</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">#   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line">   <span class="comment">#   监控统计用的filter:stat；日志用的filter:log4j；防御sql注入的filter:wall</span></span><br><span class="line">    <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line">    <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line">    <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line">    <span class="comment"># 配置多久进行一次检测，检测需要关闭的空闲连接 单位毫秒</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>​    主要是修改type，改变数据源。然后进行其他具体参数设置。</p><h2 id="编写配置类DruidConfig"><a href="#编写配置类DruidConfig" class="headerlink" title="编写配置类DruidConfig"></a>编写配置类DruidConfig</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ConfigurationProperties(prefix = "spring.datasource")</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DataSource <span class="title">druid</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DruidDataSource();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//配置Druid的监控</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.配置一个管理后后台的servlet,这个Bean加到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span> </span>{</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置初始化参数，因为下面需要传入一个map</span></span><br><span class="line">        Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这个东西的参数去StatViewServlet类里面，他的父类ResourceServlet里面找</span></span><br><span class="line">        initParams.put(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>);</span><br><span class="line">        initParams.put(<span class="string">"loginPassword"</span>, <span class="string">"123456"</span>);</span><br><span class="line"><span class="comment">//        initParams.put("allow", "");    //允许谁访问，默认是所有</span></span><br><span class="line"><span class="comment">//        initParams.put("deny","192.168.15.21"); //拒绝谁放问，这里是假设的IP地址</span></span><br><span class="line">        <span class="comment">//需要传入一个map</span></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line"><span class="comment">//    2.配置一个web监控的filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">webStatFilter</span><span class="params">()</span> </span>{</span><br><span class="line">        FilterRegistrationBean bean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line"></span><br><span class="line">        bean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">        Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//同理去看WebStatFilter里面。这个是排除的不拦截的请求</span></span><br><span class="line">        initParams.put(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.css,/druid/*,/druid"</span>);</span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//要拦截哪些请求,需要一个collection参数。拦截所有请求</span></span><br><span class="line">        bean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>​    总的来说，就是写了一个Servlet和一个Filter注入到容器中。</p><p>​    <strong>Servlet是用来处理请求，显示Druid的界面；</strong></p><p>​    <strong>Filter是拦截网页的请求（部分静态资源除外），用来统计监控数据。</strong></p><p>​    servlet是用于显示druid管理界面，并对其中的一些参数进行设置；</p><p>​    filter是对请求进行拦截，通过拦截对数据进行统计。</p><p>​    编写完配置类之后，要在主程序入口Application上面添加@ServletComponentScan注解扫描所有的Servlet。</p><h2 id="访问页面"><a href="#访问页面" class="headerlink" title="访问页面"></a>访问页面</h2><p>访问上面设置的servlet地址即可,<code>localhost:8080/druid</code>,会自动跳转到登录页面，其中的账号密码就是上面设置的参数中的loginUsername和loginPassword。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1569746128404.png" alt="Druid界面"></p><blockquote><p>PS：使用druid要添加log4j日志依赖，因为druid用到了这玩意，不加会报错</p></blockquote><h1 id="整合MyBatis"><a href="#整合MyBatis" class="headerlink" title="整合MyBatis"></a>整合MyBatis</h1><p>整合MyBatis依然在上面的基础上进行。</p><p>有两种方式：</p><pre><code>1. 注解方式2. xml配置文件方式</code></pre><p>自我感觉整合MyBatis的核心就是写Mapper</p><p>何为ORM框架/Hibernate/…</p><p>先做杂项工作：编写两个POJO普通类，同时数据库中建两个相应的表。</p><h2 id="注解版"><a href="#注解版" class="headerlink" title="注解版"></a>注解版</h2><h3 id="编写Mapper"><a href="#编写Mapper" class="headerlink" title="编写Mapper"></a>编写Mapper</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定这是一个操作数据库的mapper</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DepartmentMapper</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select("select * from department")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Department&gt; <span class="title">getDeptAll</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//这些注解都是mybatis里面规定的注解</span></span><br><span class="line">    <span class="meta">@Select("select * from department where id=#{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDeptById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete("delete from department where id=#{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">deleteDeptByID</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//表中的id是自增的，所以说只插入name就行了</span></span><br><span class="line">    <span class="comment">//Options告诉Mapper我们使用了自动创建的键，键的名字是id，这时候这个注解就会自动把id在封装到返回的department里面</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true,keyProperty = "id")</span></span><br><span class="line">    <span class="meta">@Insert("insert into department(departmentName) values(#{departmentName})")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据id来更新信息</span></span><br><span class="line">    <span class="meta">@Update("update department set departmentName=#{departmentName} where id=#{      id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">updateDept</span><span class="params">(Department department)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>关于<strong>注解中的值和参数的关系</strong>，比如#{id}，对应的是下面参数中<strong>同名的参数</strong>(比如上面的Integer id)；或者是下面参数是对象，对象中的同名的属性值：</p><blockquote><h4 id="使用对象"><a href="#使用对象" class="headerlink" title="使用对象"></a>使用对象</h4><p>如果我们使用普通的java对象作为查询条件的参数：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Insert("INSERT INTO T_USER(NAME, PASSWORD, PHONE) VALUES(#{name}, #{password}, #{phone})")</span><br><span class="line">int insertByUser(User user);</span><br></pre></td></tr></tbody></table></figure><p>只需要语句中的#{name}、#{age}就分别对应了User对象中的name和age属性。</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">User u = new User();</span><br><span class="line">u.setName("赵六");</span><br><span class="line">u.setPassword("12312312");</span><br><span class="line">u.setPhone("13888888888");</span><br><span class="line">userMapper.insertByUser(u);</span><br></pre></td></tr></tbody></table></figure></blockquote><pre><code>@Insert("INSERT INTO T_USER(NAME, PASSWORD, PHONE) VALUES(#{name}, #{password}, #{phone})")int insertByUser(User user);只需要语句中的#{name}、#{age}就分别对应了User对象中的name和age属性。User u = new User();    u.setName("赵六");    u.setPassword("12312312");    u.setPhone("13888888888");    userMapper.insertByUser(u);</code></pre><p>关于这里的传参方式还有几种，比如@Param注解、使用Map、还有上面的使用对象。具体参见<a href="https://blog.csdn.net/winter_chen001/article/details/78623700">这个CSDN博客</a>。</p><p>编写Mapper：</p><ol><li>使用@Mapper注解来说明这是个Mybatis的Mapper映射，然后写成接口？</li><li>自定义方法，名字随意，方法参数和注解相对应（如上传参方式）</li><li>注解@Insert,@Select等等，在这种注解中写相应的SQL语句（参数如上）。</li></ol><h3 id="编写Controller"><a href="#编写Controller" class="headerlink" title="编写Controller"></a>编写Controller</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeptController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    DepartmentMapper departmentMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping("/dept/all")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Department&gt; <span class="title">getDeptAll</span><span class="params">()</span></span>{</span><br><span class="line">        List&lt;Department&gt; list =  departmentMapper.getDeptAll();</span><br><span class="line">        <span class="comment">//System.out.println(list.toString());</span></span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//在参数中加上id传过来，然后去查询这个id</span></span><br><span class="line">    <span class="comment">//localhost:8080/dept/select/1</span></span><br><span class="line">    <span class="meta">@GetMapping("/dept/select/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">getDepartment</span><span class="params">(<span class="meta">@PathVariable("id")</span> Integer id)</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> departmentMapper.getDeptById(id);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入department,带参数?departmentName = xxx</span></span><br><span class="line">    <span class="comment">//比如：localhost:8080/dept/insert?departmentName=腾讯</span></span><br><span class="line">    <span class="meta">@GetMapping("/dept/insert")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">insertDept</span><span class="params">(Department department)</span> </span>{</span><br><span class="line">        departmentMapper.insertDept(department);</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="meta">@GetMapping("/dept/delete/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Department <span class="title">deleteDeptbyId</span><span class="params">(<span class="meta">@PathVariable("id")</span> Integer id)</span> </span>{</span><br><span class="line">        Department deleteDept = getDepartment(id);</span><br><span class="line">        departmentMapper.deleteDeptByID(id);</span><br><span class="line">        <span class="keyword">return</span> deleteDept;</span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>编写Controller来进行测试，调用Mapper中的方法，进行增删改查。注意这里用URL传参的方式。</p><h2 id="XML配置文件版"><a href="#XML配置文件版" class="headerlink" title="XML配置文件版"></a>XML配置文件版</h2><h3 id="编写Mapper接口"><a href="#编写Mapper接口" class="headerlink" title="编写Mapper接口"></a>编写Mapper接口</h3><p>这里的Mapper类不需要写注解，只是包含相应的自定义方法，还有方法的参数。其他的相关东西都在xml里。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要用@Mapper或者@MapperScan将接口扫描装配到容器中</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeMapper</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Employee <span class="title">getEmpById</span><span class="params">(Integer id)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insertEmp</span><span class="params">(Employee employee)</span></span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><h3 id="编写mybatis-config-xml"><a href="#编写mybatis-config-xml" class="headerlink" title="编写mybatis-config.xml"></a>编写mybatis-config.xml</h3><p>在里面进行各种配置。</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--驼峰命名法，解决d_id和dId的问题--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">"mapUnderscoreToCamelCase"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>​    这里主要是解决了d_id和dId不同的问题，如果不加这个配置，那么在数据库中的d_id和类中的dId不会匹配。</p><h3 id="编写Mapper-xml"><a href="#编写Mapper-xml" class="headerlink" title="编写Mapper.xml"></a>编写Mapper.xml</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--这里的namespace和接口的类名要对应，进行绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.song.springboot.mapper.EmployeeMapper"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  public Employee getEmpById(Integer id);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    public void insertEmp(Employee employee);--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--这两个方法，用标签的形式在这绑定--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--id是方法名，resultType是返回值--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"getEmpById"</span> <span class="attr">resultType</span>=<span class="string">"com.song.springboot.bean.Employee"</span>&gt;</span></span><br><span class="line">        SELECT * FROM employee WHERE  id=#{id}</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--插入，不需要返回值；然后注意这个d_id-&gt;dId这个大小写转换--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertEmp"</span>&gt;</span></span><br><span class="line">        INSERT INTO employee(lastName,email,gender,d_id) VALUES (#{lastName},#{email},#{gender},#{dId})</span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>注意的地方：</p><ul><li>namespace：Mapper类名具体的路径</li><li>id：应该是和方法名相对应</li><li>resultType：返回值类型，也是具体的类路径；返回值为空就不用写</li><li>在相应的比如<code>&lt;select&gt;&lt;/select&gt;</code>编写SQL语句即可，值和参数仍然和上面的一样。</li></ul><h3 id="修改application-yml配置文件"><a href="#修改application-yml配置文件" class="headerlink" title="修改application.yml配置文件"></a>修改application.yml配置文件</h3><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#mybatis配置xml方式，xml所在路径</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">config-location:</span> <span class="string">classpath:mybatis/mybatis-config.xml</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mybatis/mapper/*.xml</span></span><br></pre></td></tr></tbody></table></figure><p>在配置文件中加如上属性，指定mybatis的xml配置文件所在路径。</p><h1 id="整合JPA"><a href="#整合JPA" class="headerlink" title="整合JPA"></a>整合JPA</h1><p>整合JPA时也可将数据源换为Druid，但是这里就没再换。</p><h2 id="何为JPA"><a href="#何为JPA" class="headerlink" title="何为JPA"></a>何为JPA</h2><p>JPA是Java持久化API，定义了一系列对象持久化的标准，而hibernate是当前非常流行的对象持久化开源框架，Spring boot就<strong>默认集成了</strong>这种框架，加速web应用开发。</p><p><strong>spring-boot-starter-data-jpa的启动器中继承了Hibernate</strong>。</p><p>这里我们用的<strong>Spring Data JPA</strong>是Spring基于ORM框架、JPA规范的基础上封装的一套JPA应用框架,是基于Hibernate之上构建的JPA使用解决方案。</p><p>JPA == Java Persistence API（Java 持久层 API）：用于对象持久化的 API</p><p>作用：使得应用程序以统一的方式访问持久层</p><p>JPA 是 Hibernate 的一个抽象，就像 JDBC 和 JDBC 驱动的关系。JPA是一种规范，而Hibernate是JPA的一个实现。</p><p>参考：</p><ul><li><p><a href="https://my.oschina.net/u/3080373/blog/1828589">JPA、Hibernate、Spring data jpa之间的关系</a></p></li><li><p><a href="https://www.cnblogs.com/crawl/p/7703679.html">JPA + SpringData 操作数据库原来可以这么简单 —- 深入了解 JPA - 1</a></p></li></ul><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1569675646418.png" alt="JPA与ORM"></p><p><img src="https://gss3.bdstatic.com/-Po3dSag_xI4khGkpoWK1HF6hhy/baike/c0%3Dbaike92%2C5%2C5%2C92%2C30/sign=4eeb27c108087bf469e15fbb93ba3c49/8435e5dde71190ef25b88a55c41b9d16fcfa60fc.jpg" alt="img"></p><h2 id="整合JPA-1"><a href="#整合JPA-1" class="headerlink" title="整合JPA"></a>整合JPA</h2><h3 id="pom-xml依赖"><a href="#pom-xml依赖" class="headerlink" title="pom.xml依赖"></a>pom.xml依赖</h3><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Spring Data的 Jpa starter --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>PS：spring-boot-starter-data-jpa包括了Hibernate。</p><h3 id="application-yml配置文件"><a href="#application-yml配置文件" class="headerlink" title="application.yml配置文件"></a>application.yml配置文件</h3><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/jpa?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">jpa:</span></span><br><span class="line">    <span class="attr">hibernate:</span></span><br><span class="line"><span class="comment">#      自动更新或者创建数据表</span></span><br><span class="line">      <span class="attr">ddl-auto:</span> <span class="string">update</span></span><br><span class="line"><span class="comment">#      控制台显示SQL</span></span><br><span class="line">    <span class="attr">show-sql:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">#    bean的声明可以被覆盖？应该是用于我们自定义的Repository接口注入</span></span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p>前面DataSource的配置和以前一样，url用户名密码驱动等。</p><p>下面的overriding如果不写的话启动不了，根据控制台建议写上的。</p><h3 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h3><p>重点在实体类的注解上：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span>     <span class="comment">//告诉JPA这是个实体类</span></span><br><span class="line"><span class="meta">@Table(name = "tbl_user")</span>   <span class="comment">//告诉这个类和数据库中的哪个表相对应，不写的话就是默认的小写类名user</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties(value={"hibernateLazyInitializer","handler"})</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//说明这是主键</span></span><br><span class="line">    <span class="meta">@GeneratedValue(strategy = GenerationType.IDENTITY)</span> <span class="comment">//自增主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column(name = "last_name",length = 50)</span> <span class="comment">//指定列名</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span> <span class="comment">//默认就是列名和属性名一样，emali</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Getter and Setter</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><ul><li>@Entiy：说明这是一个POJO类</li><li>＠Table：指明这个类和数据库中哪张表映射</li><li>@Id：表示这个属性在表中是主键</li><li>＠GeneratedVlue：说明了主键的生成方式</li><li>@Column：指定这个属性和表中哪个字段对应</li></ul><h3 id="继承JpaRepository接口"><a href="#继承JpaRepository接口" class="headerlink" title="继承JpaRepository接口"></a>继承JpaRepository接口</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JpaRepository后面的泛型：要操作的实体类，以及主键的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">Integer</span>&gt; </span>{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="Controller-调用"><a href="#Controller-调用" class="headerlink" title="Controller 调用"></a>Controller 调用</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//查找全部</span></span><br><span class="line">    <span class="meta">@GetMapping("/user/jpa/all")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">getAllUser</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> userRepository.findAll();</span><br><span class="line">    }</span><br><span class="line">    <span class="comment">//查找用户</span></span><br><span class="line">    <span class="meta">@GetMapping("/user/jpa/select/{id}")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable("id")</span> Integer id)</span> </span>{</span><br><span class="line">        User user = userRepository.getOne(id);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="comment">//插入用户,参数方式</span></span><br><span class="line">    <span class="meta">@GetMapping("/user")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">insertUser</span><span class="params">(User user)</span> </span>{</span><br><span class="line">        User saveUser = userRepository.save(user);</span><br><span class="line">        <span class="keyword">return</span> saveUser;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>这里调用的话就直接自动注入一个Repository，然后用它来调用相应的方法如findAll()、getOne()等等即可（Hibernate会自动生成数据库语句，不用手动写）。</p><p>在请求的同时，因为在application.yml中添加了<code>show-sql: true</code>属性，所以说console会打印出SQL语句：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1569743944609.png" alt="控制台SQL语句"></p><h1 id="SpringBoot-注解"><a href="#SpringBoot-注解" class="headerlink" title="SpringBoot 注解"></a>SpringBoot 注解</h1><h2 id="hello请求"><a href="#hello请求" class="headerlink" title="/hello请求"></a>/hello请求</h2><ul><li><p>@<strong>SpringBootApplication</strong><br>标注一个<strong>主程序类</strong>，表明这是一个SpringBoot应用，程序开始入口</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot01HelloworldQuickApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(SpringBoot01HelloworldQuickApplication.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p>@<strong>ResponseBody</strong><br>表明这是一个响应<br>表示该方法的<strong>返回结果直接写入HTTP response body中</strong><br>一般在异步获取数据时使用，在使用@RequestMapping后，返回值通常解析为跳转路径，加上@responsebody后返回结果不会被解析为跳转路径，而是直接写入HTTP response body中。比如异步获取json数据，加上@responsebody后，会直接返回json数据。</p></li><li><p><strong>@RequestMapping(“/hello”)</strong><br><strong>响应</strong>/hello<strong>请求</strong></p></li><li><p><strong>@Controller</strong></p><p>是个Spring、SpringMVC的注解，<a href="https://blog.csdn.net/fansili/article/details/78740877">@Controller 控制层，@Service 服务层，@Repository 持久层</a>；<a href="https://blog.csdn.net/qq_41357573/article/details/84454502">或者这里</a></p></li><li><p><em><strong>@RestController:</strong></em><br>用于标注控制层组件(如struts中的action)，包含**@Controlle<strong>r和</strong>@ResponseBody**。</p></li></ul> <figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*@ResponseBody</span></span><br><span class="line"><span class="comment">* @Controller</span></span><br><span class="line"><span class="comment">* 这两个注解可以合并成下面一个*/</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping("/hello")</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Hello Quick Spring Boot!!!"</span>;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><hr><h2 id="配置文件-使用properties或yml注入Bean"><a href="#配置文件-使用properties或yml注入Bean" class="headerlink" title="配置文件,使用properties或yml注入Bean"></a>配置文件,使用properties或yml注入Bean</h2><ul><li><p><strong>@Component</strong><br>泛指组件，当组件不好归类的时候，我们可以使用这个注解进行标注。<br>@Component和@Bean都是用来<strong>注册Bean并装配到Spring容器</strong>中，但是Bean比Component的自定义性更强。可以实现一些Component实现不了的自定义加载类。</p></li><li><p><strong>@PropertySource(value = {“classpath:person.properties”})</strong><br>从指定的路径中导入配置文件（不指定这个注解的话，会自动从默认的全局配置文件application.properties中导入）</p></li><li><p><strong>@ConfigurationProperties(prefix = “person”)</strong><br>将配置文件（比如application.properties）中的person属性的值与当前类的<strong>属性绑定</strong></p></li><li><p><strong>@Value(“${person.last-name}”)</strong><br>将这个值绑定到标注下面的属性上</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@PropertySource(value = {"classpath:person.properties"})</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = "person")</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>{</span><br><span class="line">    <span class="comment">//Value赋值，一个一个的</span></span><br><span class="line">    <span class="comment">// $ 取资源文件中的值</span></span><br><span class="line">    <span class="comment">//@Value("${person.last-name}")</span></span><br><span class="line">    <span class="keyword">private</span> String lastName;</span><br><span class="line">    <span class="comment">// # 计算表达式</span></span><br><span class="line">    <span class="comment">//@Value("#{11*2}")</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//直接赋值</span></span><br><span class="line">    <span class="comment">//@Value("true")</span></span><br><span class="line">    <span class="keyword">private</span> Boolean boss;</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Object&gt; maps;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Object&gt; list;</span><br><span class="line">    <span class="keyword">private</span> Dog dog;</span><br><span class="line">   </span><br><span class="line">    ......</span><br><span class="line">        </span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><hr><ul><li><strong>@ConfigurationProperties和@Value的比较</strong></li></ul><blockquote><ol><li>一般@Value导入时，是一个值一个值的导入，而@ConfigurationProperties是一批导入。</li><li>@Value支持SPEL，而@ConfigurationProperties比如</li></ol><ul><li>@Value(${person.last-name})：绑定person.last-name到当前属性</li><li>@Value(#{11*2})：计算11*2，就是22</li><li>@Value(“true”)：直接赋值为 true</li></ul><ol start="3"><li><p>@Value不支持松散语法。</p><ul><li>在松散语法中，last-name与lastName是一样的，-n就是大写的N，而不支持松散语法的话就不一样</li></ul></li><li><p>@Value不支持JSR303数据校验</p><ul><li>就是说下面的这个@Email，会校验绑定的这个属性是否符合格式</li><li>加上@Email之前，需要一个这个@Validated注解</li><li>@Email：校验数据是否邮箱格式</li><li>如果校验不通过的话会抛IllegalStateException异常，数据不能绑定</li><li><a href="https://blog.csdn.net/Mynewclass/article/details/79086372">@Validated的详细使用</a></li></ul></li><li><p>@Value不支持复杂类型封装</p></li></ol></blockquote><hr><h2 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h2><ul><li><p><strong>@ImportResource（locations = {“classpath:beans.xml”}）</strong></p><p>标注在一个配置类上</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ImportResource(locations = "classpath:bean.xml")</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBoot01HelloworldQuickApplication</span> </span>{</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{</span><br><span class="line">        SpringApplication.run(SpringBoot01HelloworldQuickApplication.class, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>导入spring的配置文件，bean.xml</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloService"</span> <span class="attr">class</span>=<span class="string">"com.song.springboot.service.HelloService"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这个xml的作用就是给HelloService类中注入一个id为helloService的Bean，可以在test中用以下来验证：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">ApplicationContext ioc;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHelloService</span><span class="params">()</span></span>{</span><br><span class="line">    <span class="keyword">boolean</span> b = ioc.containsBean(<span class="string">"helloService"</span>);</span><br><span class="line">    System.out.println(b);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li><li><p><strong>@Autowired</strong></p><p>自动注入。可以对成员变量、方法和构造函数进行标注。<code>@Autowired</code>注解的意思就是，当Spring发现<code>@Autowired</code>注解时，将自动在代码上下文中找到与其匹配（默认是类型匹配）的Bean，并自动注入到相应的地方去。</p></li><li><p><strong>@Confgiuration</strong></p><p>指出该类是 Bean 配置的信息源，相当于XML中的<beans></beans>，一般加在主类上。说明这个是个配置类。</p></li><li><p><strong>@Bean</strong></p><p>相当于XML中的<bean></bean>,<strong>放在方法的上面，而不是类</strong>，意思是产生一个bean,并交给spring管理。</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//说明这是个配置类，返回一个HelloService对象注入到容器中，最后ioc容器中会含有一个helloService</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>{</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></li></ul><h1 id="遇到的一些问题解决"><a href="#遇到的一些问题解决" class="headerlink" title="遇到的一些问题解决"></a>遇到的一些问题解决</h1><h2 id="添加schema-all-sql到resources中，不会自动建表"><a href="#添加schema-all-sql到resources中，不会自动建表" class="headerlink" title="添加schema-all.sql到resources中，不会自动建表"></a>添加schema-all.sql到resources中，不会自动建表</h2><h3 id="错误："><a href="#错误：" class="headerlink" title="错误："></a>错误：</h3><p>​    添加schema-all.sql到resources中，不会自动建表</p><h3 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h3><p>​    在application.properties配置文件中添加：</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##   加这个，不然不会执行schema-all或者下面自定义sql脚本</span></span><br><span class="line"><span class="meta">spring.datasource.initialization-mode</span>=<span class="string">always</span></span><br></pre></td></tr></tbody></table></figure><p>同时，如果加schema自定义sql位置，也是需要加是这个always属性的</p><figure class="highlight properties"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##   设置默认的sql位置</span></span><br><span class="line"><span class="meta">spring.datasource.schema</span>=<span class="string">classpath:department.sql</span></span><br></pre></td></tr></tbody></table></figure><h2 id="修改Durid，新建config配置绑定属性："><a href="#修改Durid，新建config配置绑定属性：" class="headerlink" title="修改Durid，新建config配置绑定属性："></a>修改Durid，新建config配置绑定属性：</h2><h3 id="报错："><a href="#报错：" class="headerlink" title="报错："></a>报错：</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Failed to bind properties under <span class="string">'spring.datasource'</span> to javax.sql.DataSource</span><br></pre></td></tr></tbody></table></figure><h3 id="原因："><a href="#原因：" class="headerlink" title="原因："></a>原因：</h3><p>在yml配置文件中，设置的属性：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">##   配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙</span></span><br><span class="line"> <span class="attr">filters:</span> <span class="string">stat,wall,log4j</span></span><br><span class="line"> <span class="attr">maxPoolPreparedStatementPerConnectionSize:</span> <span class="number">20</span></span><br><span class="line"> <span class="attr">useGlobalDataSourceStat:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">connectionProperties:</span> <span class="string">druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure><p>其中filters引用了log4j，但是pom.xml中没有，所以说报错</p><h3 id="解决：-1"><a href="#解决：-1" class="headerlink" title="解决："></a>解决：</h3><p>在pom.xml中添加log4j的依赖：</p><figure class="highlight xml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><h2 id="SpingBoot-Druid，404错误"><a href="#SpingBoot-Druid，404错误" class="headerlink" title="SpingBoot+Druid，404错误"></a>SpingBoot+Druid，404错误</h2><h3 id="错误：-1"><a href="#错误：-1" class="headerlink" title="错误："></a>错误：</h3><p>网页404：</p><blockquote><h2 id="Whitelabel-Error-Page"><a href="#Whitelabel-Error-Page" class="headerlink" title="Whitelabel Error Page"></a>Whitelabel Error Page</h2><p>This application has no explicit mapping for /error, so you are seeing this as a fallback.</p><p>Sat Sep 28 09:21:10 CST 2019</p><p>There was an unexpected error (type=Not Found, status=404).</p><p>No message available</p></blockquote><h3 id="原因：-1"><a href="#原因：-1" class="headerlink" title="原因："></a>原因：</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">//1.配置一个管理后后台的servlet,这个Bean加到容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">statViewServlet</span><span class="params">()</span> </span>{</span><br><span class="line">        ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//配置初始化参数，因为下面需要传入一个map</span></span><br><span class="line">        Map&lt;String, String&gt; initParams = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//这个东西的参数去StatViewServlet类里面，他的父类ResourceServlet里面找</span></span><br><span class="line">        initParams.put(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>);</span><br><span class="line">        initParams.put(<span class="string">"loginPassword"</span>, <span class="string">"123456"</span>);</span><br><span class="line"><span class="comment">//        initParams.put("allow", "");    //允许谁访问，默认是所有</span></span><br><span class="line"><span class="comment">//        initParams.put("deny","192.168.15.21"); //拒绝谁放问，这里是假设的IP地址</span></span><br><span class="line">        <span class="comment">//需要传入一个map</span></span><br><span class="line">        bean.setInitParameters(initParams);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure><p>其中的<code>ServletRegistrationBean bean = new ServletRegistrationBean(new StatViewServlet(), "/druid/");</code>，第二个参数，urlMappings写错了。应该是<code>"/druid/*"</code>，是druid 路径下所有映射。</p><h3 id="修改："><a href="#修改：" class="headerlink" title="修改："></a>修改：</h3><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServletRegistrationBean bean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> StatViewServlet(), <span class="string">"/druid/*"</span>);</span><br></pre></td></tr></tbody></table></figure><p>即可。</p><h2 id="整合JPA，报错Caused-by-org-hibernate-AnnotationException-No-identifier-specified-for-entity"><a href="#整合JPA，报错Caused-by-org-hibernate-AnnotationException-No-identifier-specified-for-entity" class="headerlink" title="整合JPA，报错Caused by: org.hibernate.AnnotationException: No identifier specified for entity:"></a>整合JPA，报错Caused by: org.hibernate.AnnotationException: No identifier specified for entity:</h2><h3 id="错误：-2"><a href="#错误：-2" class="headerlink" title="错误："></a>错误：</h3><blockquote><p>这个前面还有个错误，好像是什么不能注入容器，根据console提示修改一下yml就行啦，加上：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span> </span><br><span class="line">  <span class="attr">main:</span></span><br><span class="line">    <span class="attr">allow-bean-definition-overriding:</span> <span class="literal">true</span></span><br></pre></td></tr></tbody></table></figure><p>大概是在容器中把我们写的UserRepository注入进去覆盖原来自有的？</p></blockquote><p>启动SpringBoot时报错：</p><figure class="highlight plain"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is org.hibernate.AnnotationException: No identifier specified for entity: com.song.springboot.entity.User</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Caused by: org.hibernate.AnnotationException: No identifier specified for entity: com.song.springboot.entity.User</span><br></pre></td></tr></tbody></table></figure><h3 id="原因：-2"><a href="#原因：-2" class="headerlink" title="原因："></a>原因：</h3><p>百度了半天，都在说是实体类的注解写错了，需要加上主键的@Id，我对了半天也没发现错误。最终发现：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.persistence.*;</span><br></pre></td></tr></tbody></table></figure><p>还真是@Id的问题，因为我加@Id的时候导包导入错了，不是springframework的@Id注解而是persistence里面的。</p><h3 id="解决：-2"><a href="#解决：-2" class="headerlink" title="解决："></a>解决：</h3><p>删掉上面那个id的import就行。</p><h2 id="JPA查询报错"><a href="#JPA查询报错" class="headerlink" title="JPA查询报错"></a>JPA查询报错</h2><h3 id="错误：-3"><a href="#错误：-3" class="headerlink" title="错误："></a>错误：</h3><p>Controller中查找方法：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找用户</span></span><br><span class="line">  <span class="meta">@GetMapping("/user/jpa/select/{id}")</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> User <span class="title">getUser</span><span class="params">(<span class="meta">@PathVariable("id")</span> Integer id)</span> </span>{</span><br><span class="line">      User user = userRepository.getOne(id);</span><br><span class="line">      <span class="keyword">return</span> user;</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure><p>访问这个url然后报错：</p><blockquote><p>Caused by: com.fasterxml.jackson.databind.exc.InvalidDefinitionException: <strong>No serializer found for class org.hibernate.proxy.pojo.bytebuddy.ByteBuddyInterceptor</strong> and no properties discovered to create BeanSerializer (to avoid exception, disable SerializationFeature.FAIL_ON_EMPTY_BEANS) (through reference chain: com.song.springboot.entity.User$HibernateProxy$j7VI3Nk2["hibernateLazyInitializer"])</p></blockquote><h3 id="原因：-3"><a href="#原因：-3" class="headerlink" title="原因："></a>原因：</h3><p>​    因为返回值是个实体类对象的原因。</p><p>​    hibernate会给每个被管理的对象加上hibernateLazyInitializer属性，同时struts-jsonplugin或者其他的jsonplugin都是如此。</p><p>​    因为jsonplugin用的是java的内审机制，hibernate会给被管理的pojo加入一个hibernateLazyInitializer属性。jsonplugin通过java的反射机制将pojo转换成json，会把hibernateLazyInitializer也拿出来操作。但是hibernateLazyInitializer无法由反射得到，也就是说从对象中无法获取，所以就抛异常了。 </p><h3 id="解决：-3"><a href="#解决：-3" class="headerlink" title="解决："></a>解决：</h3><p>在User实体类中加入如下注解：</p><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用JPA注解配置映射关系</span></span><br><span class="line"><span class="meta">@Entity</span>     <span class="comment">//告诉JPA这是个实体类</span></span><br><span class="line"><span class="meta">@Table(name = "tbl_user")</span>   <span class="comment">//告诉这个类和数据库中的哪个表相对应，不写的话就是默认的小写类名user</span></span><br><span class="line"><span class="meta">@JsonIgnoreProperties(value={"hibernateLazyInitializer","handler"})</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>{</span><br><span class="line">    ...</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>在类上声明的@JsonIgnoreProperties，是忽略Hibernate的延迟加载的一些属性”hibernateLazyInitializer”, “handler”, “fieldHandler”，这些属性在实体类里没有所以要忽略掉，否则会报错。</p><h2 id="Java反射来输出对象的所有属性"><a href="#Java反射来输出对象的所有属性" class="headerlink" title="Java反射来输出对象的所有属性"></a>Java反射来输出对象的所有属性</h2><figure class="highlight java"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">testReflect</span><span class="params">(Object model)</span> <span class="keyword">throws</span> Exception </span>{</span><br><span class="line">    Field[] field = model.getClass().getDeclaredFields();        <span class="comment">//获取实体类的所有属性，返回Field数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; field.length; j++) {     <span class="comment">//遍历所有属性</span></span><br><span class="line">        String name = field[j].getName();    <span class="comment">//获取属性的名字</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"attribute name:"</span> + name);</span><br><span class="line">        name = name.substring(<span class="number">0</span>, <span class="number">1</span>).toUpperCase() + name.substring(<span class="number">1</span>); <span class="comment">//将属性的首字符大写，方便构造get，set方法</span></span><br><span class="line">        String type = field[j].getGenericType().toString();    <span class="comment">//获取属性的类型</span></span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">"class java.lang.String"</span>)) {   <span class="comment">//如果type是类类型，则前面包含"class "，后面跟类名</span></span><br><span class="line">            Method m = model.getClass().getMethod(<span class="string">"get"</span> + name);</span><br><span class="line">            String value = (String) m.invoke(model);    <span class="comment">//调用getter方法获取属性值</span></span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) {</span><br><span class="line"></span><br><span class="line">                System.out.println(<span class="string">"attribute value:"</span> + value);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">"class java.lang.Integer"</span>)) {</span><br><span class="line">            Method m = model.getClass().getMethod(<span class="string">"get"</span> + name);</span><br><span class="line">            Integer value = (Integer) m.invoke(model);</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) {</span><br><span class="line">                System.out.println(<span class="string">"attribute value:"</span> + value);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">"class java.lang.Short"</span>)) {</span><br><span class="line">            Method m = model.getClass().getMethod(<span class="string">"get"</span> + name);</span><br><span class="line">            Short value = (Short) m.invoke(model);</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) {</span><br><span class="line">                System.out.println(<span class="string">"attribute value:"</span> + value);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">"class java.lang.Double"</span>)) {</span><br><span class="line">            Method m = model.getClass().getMethod(<span class="string">"get"</span> + name);</span><br><span class="line">            Double value = (Double) m.invoke(model);</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) {</span><br><span class="line">                System.out.println(<span class="string">"attribute value:"</span> + value);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">"class java.lang.Boolean"</span>)) {</span><br><span class="line">            Method m = model.getClass().getMethod(<span class="string">"get"</span> + name);</span><br><span class="line">            Boolean value = (Boolean) m.invoke(model);</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) {</span><br><span class="line">                System.out.println(<span class="string">"attribute value:"</span> + value);</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">if</span> (type.equals(<span class="string">"class java.util.Date"</span>)) {</span><br><span class="line">            Method m = model.getClass().getMethod(<span class="string">"get"</span> + name);</span><br><span class="line">            Date value = (Date) m.invoke(model);</span><br><span class="line">            <span class="keyword">if</span> (value != <span class="keyword">null</span>) {</span><br><span class="line">                System.out.println(<span class="string">"attribute value:"</span> + value.toLocaleString());</span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><h3 id="使用sql将一个表的数据导入另一个表："><a href="#使用sql将一个表的数据导入另一个表：" class="headerlink" title="使用sql将一个表的数据导入另一个表："></a>使用sql将一个表的数据导入另一个表：</h3><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> jc_rw(guid,rwid,xmbh,xmmc,xfsj) (<span class="keyword">select</span> rwid,rwid,xmbh,xmmc,xfsj <span class="keyword">from</span> jc_db_task);</span><br></pre></td></tr></tbody></table></figure><p>设置一个表中的某一列全部为这个数据：</p><figure class="highlight sql"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update jc_rw <span class="keyword">set</span> cdrwks<span class="operator">=</span><span class="string">'监测科'</span>;</span><br></pre></td></tr></tbody></table></figure><h2 id="整合Mybatis-Plus和Lombok"><a href="#整合Mybatis-Plus和Lombok" class="headerlink" title="整合Mybatis-Plus和Lombok"></a>整合Mybatis-Plus和Lombok</h2><p>主要是mybaits-plus</p><ol><li><p>修改pom文件，添加依赖</p></li><li><p>修改yml配置文件，将mybatis的配置删除，增加mybatis-plus配置</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## MyBatis配置</span></span><br><span class="line"><span class="comment">## https://baomidou.com/config/</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment">## 对应的 XML 文件位置</span></span><br><span class="line">  <span class="attr">mapperLocations:</span> <span class="string">classpath*:mapper/**/*Mapper.xml</span></span><br><span class="line">  <span class="comment">## 实体扫描，多个package用逗号或者分号分隔</span></span><br><span class="line">  <span class="attr">typeAliasesPackage:</span> <span class="string">com.ruoyi.**.domain</span></span><br><span class="line">  <span class="comment">## 针对 typeAliasesPackage，如果配置了该属性，则仅仅会扫描路径下以该类作为父类的域对象</span></span><br><span class="line">  <span class="comment">#typeAliasesSuperType: Class&lt;?&gt;</span></span><br><span class="line">  <span class="comment">## 如果配置了该属性，SqlSessionFactoryBean 会把该包下面的类注册为对应的 TypeHandler</span></span><br><span class="line">  <span class="comment">#typeHandlersPackage: null</span></span><br><span class="line">  <span class="comment">## 如果配置了该属性，会将路径下的枚举类进行注入，让实体类字段能够简单快捷的使用枚举属性</span></span><br><span class="line">  <span class="comment">#typeEnumsPackage: null</span></span><br><span class="line">  <span class="comment">## 启动时是否检查 MyBatis XML 文件的存在，默认不检查</span></span><br><span class="line">  <span class="attr">checkConfigLocation:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">## 通过该属性可指定 MyBatis 的执行器，MyBatis 的执行器总共有三种：</span></span><br><span class="line">  <span class="comment">## SIMPLE：该执行器类型不做特殊的事情，为每个语句的执行创建一个新的预处理语句（PreparedStatement）</span></span><br><span class="line">  <span class="comment">## REUSE：该执行器类型会复用预处理语句（PreparedStatement）</span></span><br><span class="line">  <span class="comment">## BATCH：该执行器类型会批量执行所有的更新语句</span></span><br><span class="line">  <span class="attr">executorType:</span> <span class="string">SIMPLE</span></span><br><span class="line">  <span class="comment">## 指定外部化 MyBatis Properties 配置，通过该配置可以抽离配置，实现不同环境的配置部署</span></span><br><span class="line">  <span class="attr">configurationProperties:</span> <span class="literal">null</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">## 自动驼峰命名规则（camel case）映射</span></span><br><span class="line">    <span class="comment">## 如果您的数据库命名符合规则无需使用 @TableField 注解指定数据库字段名</span></span><br><span class="line">    <span class="attr">mapUnderscoreToCamelCase:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">## 默认枚举处理类,如果配置了该属性,枚举将统一使用指定处理器进行处理</span></span><br><span class="line">    <span class="comment">## org.apache.ibatis.type.EnumTypeHandler : 存储枚举的名称</span></span><br><span class="line">    <span class="comment">## org.apache.ibatis.type.EnumOrdinalTypeHandler : 存储枚举的索引</span></span><br><span class="line">    <span class="comment">## com.baomidou.mybatisplus.extension.handlers.MybatisEnumTypeHandler : 枚举类需要实现IEnum接口或字段标记@EnumValue注解.</span></span><br><span class="line">    <span class="attr">defaultEnumTypeHandler:</span> <span class="string">org.apache.ibatis.type.EnumTypeHandler</span></span><br><span class="line">    <span class="comment">## 当设置为 true 的时候，懒加载的对象可能被任何懒属性全部加载，否则，每个属性都按需加载。需要和 lazyLoadingEnabled 一起使用。</span></span><br><span class="line">    <span class="attr">aggressiveLazyLoading:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">## MyBatis 自动映射策略</span></span><br><span class="line">    <span class="comment">## NONE：不启用自动映射</span></span><br><span class="line">    <span class="comment">## PARTIAL：只对非嵌套的 resultMap 进行自动映射</span></span><br><span class="line">    <span class="comment">## FULL：对所有的 resultMap 都进行自动映射</span></span><br><span class="line">    <span class="attr">autoMappingBehavior:</span> <span class="string">PARTIAL</span></span><br><span class="line">    <span class="comment">## MyBatis 自动映射时未知列或未知属性处理策</span></span><br><span class="line">    <span class="comment">## NONE：不做任何处理 (默认值)</span></span><br><span class="line">    <span class="comment">## WARNING：以日志的形式打印相关警告信息</span></span><br><span class="line">    <span class="comment">## FAILING：当作映射失败处理，并抛出异常和详细信息</span></span><br><span class="line">    <span class="attr">autoMappingUnknownColumnBehavior:</span> <span class="string">NONE</span></span><br><span class="line">    <span class="comment">## Mybatis一级缓存，默认为 SESSION</span></span><br><span class="line">    <span class="comment">## SESSION session级别缓存，同一个session相同查询语句不会再次查询数据库</span></span><br><span class="line">    <span class="comment">## STATEMENT 关闭一级缓存</span></span><br><span class="line">    <span class="attr">localCacheScope:</span> <span class="string">SESSION</span></span><br><span class="line">    <span class="comment">## 开启Mybatis二级缓存，默认为 true</span></span><br><span class="line">    <span class="attr">cacheEnabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="comment">## 是否打印 Logo banner</span></span><br><span class="line">    <span class="attr">banner:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment">## 是否初始化 SqlRunner</span></span><br><span class="line">    <span class="attr">enableSqlRunner:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">dbConfig:</span></span><br><span class="line">      <span class="comment">## 主键类型</span></span><br><span class="line">      <span class="comment">## AUTO 数据库ID自增</span></span><br><span class="line">      <span class="comment">## NONE 空</span></span><br><span class="line">      <span class="comment">## INPUT 用户输入ID</span></span><br><span class="line">      <span class="comment">## ASSIGN_ID 全局唯一ID</span></span><br><span class="line">      <span class="comment">## ASSIGN_UUID 全局唯一ID UUID</span></span><br><span class="line">      <span class="attr">idType:</span> <span class="string">AUTO</span></span><br><span class="line">      <span class="comment">## 表名前缀</span></span><br><span class="line">      <span class="attr">tablePrefix:</span> <span class="literal">null</span></span><br><span class="line">      <span class="comment">## 字段 format,例: %s,(对主键无效)</span></span><br><span class="line">      <span class="attr">columnFormat:</span> <span class="literal">null</span></span><br><span class="line">      <span class="comment">## 表名是否使用驼峰转下划线命名,只对表名生效</span></span><br><span class="line">      <span class="attr">tableUnderline:</span> <span class="literal">true</span></span><br><span class="line">      <span class="comment">## 大写命名,对表名和字段名均生效</span></span><br><span class="line">      <span class="attr">capitalMode:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment">## 全局的entity的逻辑删除字段属性名</span></span><br><span class="line">      <span class="attr">logicDeleteField:</span> <span class="literal">null</span></span><br><span class="line">      <span class="comment">## 逻辑已删除值</span></span><br><span class="line">      <span class="attr">logicDeleteValue:</span> <span class="number">1</span></span><br><span class="line">      <span class="comment">## 逻辑未删除值</span></span><br><span class="line">      <span class="attr">logicNotDeleteValue:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment">## 字段验证策略之 insert,在 insert 的时候的字段验证策略</span></span><br><span class="line">      <span class="comment">## IGNORED 忽略判断</span></span><br><span class="line">      <span class="comment">## NOT_NULL 非NULL判断</span></span><br><span class="line">      <span class="comment">## NOT_EMPTY 非空判断(只对字符串类型字段,其他类型字段依然为非NULL判断)</span></span><br><span class="line">      <span class="comment">## DEFAULT 默认的,一般只用于注解里</span></span><br><span class="line">      <span class="comment">## NEVER 不加入 SQL</span></span><br><span class="line">      <span class="attr">insertStrategy:</span> <span class="string">NOT_NULL</span></span><br><span class="line">      <span class="comment">## 字段验证策略之 update,在 update 的时候的字段验证策略</span></span><br><span class="line">      <span class="attr">updateStrategy:</span> <span class="string">NOT_NULL</span></span><br><span class="line">      <span class="comment">## 字段验证策略之 select,在 select 的时候的字段验证策略既 wrapper 根据内部 entity 生成的 where 条件</span></span><br><span class="line">      <span class="attr">selectStrategy:</span> <span class="string">NOT_NULL</span></span><br><span class="line"></span><br></pre></td></tr></tbody></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Springboot </tag>
            
            <tag> 常用组件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简单了解清华大学朱军珠算框架</title>
      <link href="2020/02/19/%E7%8F%A0%E7%AE%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C/"/>
      <url>2020/02/19/%E7%8F%A0%E7%AE%97%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%E5%8F%8A%E8%B4%9D%E5%8F%B6%E6%96%AF%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<h1 id="珠算的基本概念"><a href="#珠算的基本概念" class="headerlink" title="珠算的基本概念"></a>珠算的基本概念</h1><h3 id="补充：张量"><a href="#补充：张量" class="headerlink" title="补充：张量"></a>补充：张量</h3><p><img src="https://pic1.zhimg.com/80/v2-c90867d134da775194ee98a97def9ea4_hd.jpg" alt="何为张量"></p><p>如图所示，0维就是数，1维是向量，2维是矩阵，3维以上就是张量了。当然一个1维向量也可叫做1维张量。</p><h2 id="分布"><a href="#分布" class="headerlink" title="分布"></a>分布</h2><blockquote><h2 id="分布-1"><a href="#分布-1" class="headerlink" title="分布"></a>分布</h2><p>分布是构建概率模型的基本功能。  Distribution类是各种概率分布的基类，它支持批输入，生成批量样本并评估给定值批次的概率。</p><p>可用的分布：</p><p><a href="https://zhusuan.readthedocs.io/en/latest/api/zhusuan.distributions.html#module-zhusuan.distributions.univariate">单变量分布</a></p><p><a href="https://zhusuan.readthedocs.io/en/latest/api/zhusuan.distributions.html#module-zhusuan.distributions.multivariate">多变量分布</a></p><p>我们可用珠算来创建一个<strong>单变量正态分布</strong>，代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> zhusuan <span class="keyword">as</span> zs</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = zs.distributions.Normal(mean=<span class="number">0.</span>, logstd=<span class="number">0.</span>)</span><br></pre></td></tr></tbody></table></figure><p>分布典型的输入形状是像<code>batch_shape + input_shape</code>，其中<code>batch_shape</code>表示一个non-batch的输入参数的形状;<code>batch_shape</code>代表有多少个独立的输入变量被放到分布中。总的来说，分布支持boradcast的输入。</p></blockquote><hr><h3 id="补充：boradcast机制"><a href="#补充：boradcast机制" class="headerlink" title="补充：boradcast机制"></a>补充：boradcast机制</h3><p>boradcast机制是numpy中的机制。TensorFlow中好像叫boradcasting机制……应该差不多吧。TensorFlow有不少操作支持boradcast。</p><p>举例如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = np.arange(<span class="number">0</span>, <span class="number">6</span>).reshape(<span class="number">6</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">array([[ <span class="number">0</span>], [<span class="number">1</span>], [<span class="number">2</span>], [<span class="number">3</span>], [<span class="number">4</span>], [<span class="number">5</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.shape</span><br><span class="line">(<span class="number">6</span>, <span class="number">1</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = np.arange(<span class="number">0</span>, <span class="number">5</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b.shape</span><br><span class="line">(<span class="number">5</span>,)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = a + b</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span> c</span><br><span class="line">[[<span class="number">0</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span>]</span><br><span class="line"> [<span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line"> [<span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span>]</span><br><span class="line"> [<span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span>]</span><br><span class="line"> [<span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span>]]</span><br></pre></td></tr></tbody></table></figure><p>图解：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1570782921386.png" alt="1570764082789"></p><p>不同维度向量相加，可以自动填充。</p><p>官方示例图：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1570764082789.png" alt="1570764298600"></p><p>更全的一个图：（矩阵+矩阵，矩阵+向量，向量+向量）</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1570764298600.png" alt="1570764825003"></p><p>广播机制的规则：</p><ol><li><p>让所有输入数组都向其中shape最长的数组看齐，shape中不足的部分都通过在前面加1补齐</p><p>（这是是说shape+1,矩阵中数据是复制的)</p></li><li><p>输出数组的shape是输入数组shape的各个轴上的最大值</p><p>（例如上面的5和6）</p></li><li><p>如果输入数组的某个轴和输出数组的对应轴的长度相同或者其长度为1时，这个数组能够用来计算，否则出错</p><p>（如果有多行的话就不知道复制哪一行了，所以说要求是1）</p></li><li><p>当输入数组的某个轴的长度为1时，沿着此轴运算时都用此轴上的第一组值</p><p>（复制第一行）</p></li></ol><p><a href="https://blog.csdn.net/yangnanhai93/article/details/50127747">TensorFlow, numpy中的broadcast机制</a></p><hr><blockquote><p>可以通过调用<code>distribution</code>对象的<code>sample()</code>方法来创建例子。它的形状是<code>([n_samples] + )batch_shape + value_shape</code>。只有当传递的n_samples为None(默认情况下)时，才会省略第一个附加<strong>轴</strong>.，在这种情况下创建一个样本。<code>value_shape</code>是非批次输入值的分布的形状。对于一个单变量分布来说，它的<code>value_shape</code>是<code>[]</code>。</p></blockquote><hr><h3 id="补充：axis参数"><a href="#补充：axis参数" class="headerlink" title="补充：axis参数"></a>补充：axis参数</h3><p>axis是许多函数中都有的一个参数，直接翻译是轴。其实是对于张量来说的一个概念。如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#python</span></span><br><span class="line">x=[[<span class="number">1</span>,<span class="number">2</span>],[<span class="number">5</span>,<span class="number">1</span>]]</span><br><span class="line">x=np.array(x)</span><br><span class="line">z1=np.<span class="built_in">max</span>(x,axis=<span class="number">0</span>)</span><br><span class="line">z2=np.<span class="built_in">max</span>(x,axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#tensorflow</span></span><br><span class="line">x=tf.constant([[<span class="number">1.</span>,<span class="number">2.</span>],[<span class="number">5.</span>,<span class="number">2.</span>]])  </span><br><span class="line">x=tf.shape(x)  </span><br><span class="line">z1=tf.reduce_max(x,axis=<span class="number">0</span>)<span class="comment">#沿axis=0操作  </span></span><br><span class="line">z2=tf.reduce_max(x,axis=<span class="number">1</span>)<span class="comment">#沿axis=1操作</span></span><br></pre></td></tr></tbody></table></figure><p>​    类似的还有argmax，sum等等函数，它们都含有一个名为axis的参数，那这个参数到底是什么意思呢？一句话总结就是：沿着axis指定的轴进行相应的函数操作。</p><p>​    对于2维来说，axis=0就是列，axis就是行，这里不再详解。直接理解3维的。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>z</span><br><span class="line">array([[[ <span class="number">2</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">8</span>],</span><br><span class="line">        [ <span class="number">3</span>,  <span class="number">1</span>,  <span class="number">4</span>,  <span class="number">1</span>],</span><br><span class="line">        [ <span class="number">6</span>,  <span class="number">3</span>,  <span class="number">2</span>,  <span class="number">6</span>]],</span><br><span class="line"></span><br><span class="line">       [[<span class="number">10</span>,  <span class="number">2</span>, <span class="number">45</span>,  <span class="number">2</span>],</span><br><span class="line">        [ <span class="number">2</span>,  <span class="number">4</span>,  <span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line">        [<span class="number">22</span>,  <span class="number">4</span>,  <span class="number">4</span>,  <span class="number">1</span>]]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>z.shape</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br></pre></td></tr></tbody></table></figure><p>​    这是一个2x3x4的3维张量，或者直接说是三维数组。</p><p>​    接下来我们看一下max()为例，取不同axis的形状：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.<span class="built_in">max</span>(z,axis=<span class="number">0</span>).shape</span><br><span class="line">(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.<span class="built_in">max</span>(z,axis=<span class="number">1</span>).shape</span><br><span class="line">(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.<span class="built_in">max</span>(z,axis=<span class="number">2</span>).shape</span><br><span class="line">(<span class="number">2</span>, <span class="number">3</span>)</span><br></pre></td></tr></tbody></table></figure><p>​    也就是说，axis取几，就去掉那个维度。这里的<strong>axis是对应shape中的第几个数，也就是第几维。</strong>比如axis=0就是说(2,3,4)中的2; axis=1就是对应3……以此类推。</p><p>​    其计算的最后输出结果如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.<span class="built_in">max</span>(z,axis=<span class="number">0</span>)</span><br><span class="line">array([[<span class="number">10</span>,  <span class="number">3</span>, <span class="number">45</span>,  <span class="number">8</span>],</span><br><span class="line">       [ <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line">       [<span class="number">22</span>,  <span class="number">4</span>,  <span class="number">4</span>,  <span class="number">6</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.<span class="built_in">max</span>(z,axis=<span class="number">1</span>)</span><br><span class="line">array([[ <span class="number">6</span>,  <span class="number">3</span>,  <span class="number">4</span>,  <span class="number">8</span>],</span><br><span class="line">       [<span class="number">22</span>,  <span class="number">4</span>, <span class="number">45</span>, <span class="number">10</span>]])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.<span class="built_in">max</span>(z,axis=<span class="number">2</span>)</span><br><span class="line">array([[ <span class="number">8</span>,  <span class="number">4</span>,  <span class="number">6</span>],</span><br><span class="line">       [<span class="number">45</span>, <span class="number">10</span>, <span class="number">22</span>]])</span><br></pre></td></tr></tbody></table></figure><p>​    解释一下，比如axis=0，那么它的输出就是去掉第一维度的影响，也就是(2,3,4)中去掉2，应该是个(3,4)的张量，如上所示。也就是说，去掉0这个轴，也就是说去掉开始的这个2维的影响。那么我们可以看做是z[]中的2个元素相互重叠，降维。</p><p>​    再比如说axis=1，那么就是去掉3的影响，得到结果应该是个(2,4)的张量。也就是对于z[0]和 z[1]分别考虑，取出一个（4）的张量。同时也就是说去掉3行的影响，也就是说按列来对比。</p><p>​    对于三维张量来说，如图所示：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/1570764825003.png" alt="1570782921386"></p><p>​    理解为降维即可，就是把那个轴上的数压缩一下到一个平面上。2是axis=0；3是axis=1；4是axis=2。</p><p>​    四维及其更高虽然说不能展示出来，但是可以通过相同的方式来理解。也就是看得到的结果是几维的，然后相应的比较。其他sum函数等等同理，只是对于数的操作不同，这里是取max，sum就是把重叠的数加起来啦。</p><hr><h2 id="单变量-多变量分布实例"><a href="#单变量-多变量分布实例" class="headerlink" title="单变量/多变量分布实例"></a>单变量/多变量分布实例</h2><blockquote><ul><li>单变量分布(正态分布)的例子：</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">&gt;In[<span class="number">3</span>]:</span><br><span class="line"><span class="keyword">import</span> zhusuan <span class="keyword">as</span> zs</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">_ = tf.InteractiveSession()</span><br><span class="line">b = zs.distributions.Normal(</span><br><span class="line"> [</span><br><span class="line">     [[-<span class="number">1.</span>,<span class="number">1.</span>],[-<span class="number">1.</span>,-<span class="number">2.</span>]],</span><br><span class="line">        [[<span class="number">9.</span>,<span class="number">1.</span>],[<span class="number">1.</span>,<span class="number">2.</span>]]</span><br><span class="line">    ],logstd=[<span class="number">0.</span>,<span class="number">1.</span>])</span><br><span class="line">   </span><br><span class="line">   </span><br><span class="line">In [<span class="number">4</span>]:<span class="comment"># batch_shape显示有多少批被输入到分布的形状中</span></span><br><span class="line"><span class="comment"># 这里是2维有2个，1维有2个，0维有2个</span></span><br><span class="line"><span class="comment"># 或者这样说：[2,2,2]三个数表示有3层，第一层里面有2，第二层里面有2，第三层里面有2</span></span><br><span class="line">b.batch_shape.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">Out[<span class="number">4</span>]:array([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]:b.value_shape.<span class="built_in">eval</span>()</span><br><span class="line"> </span><br><span class="line">Out[<span class="number">5</span>]:array([], dtype=int32)</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">In [<span class="number">9</span>]:tf.shape(b.sample()).<span class="built_in">eval</span>( )</span><br><span class="line"></span><br><span class="line">Out[<span class="number">9</span>]:array([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">In [<span class="number">11</span>]:tf.shape(b.sample(<span class="number">1</span>)).<span class="built_in">eval</span>()</span><br><span class="line">   </span><br><span class="line">Out[<span class="number">11</span>]:array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">In [<span class="number">12</span>]:tf.shape(b.sample(<span class="number">2</span>)).<span class="built_in">eval</span>()</span><br><span class="line">   </span><br><span class="line">Out[<span class="number">12</span>]:array([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">In [<span class="number">13</span>]:b.get_batch_shape()</span><br><span class="line">   </span><br><span class="line">Out[<span class="number">13</span>]:TensorShape([Dimension(<span class="number">2</span>), Dimension(<span class="number">2</span>), Dimension(<span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">In [<span class="number">14</span>]:b.get_value_shape()</span><br><span class="line">   </span><br><span class="line">Out[<span class="number">14</span>]:TensorShape([])</span><br></pre></td></tr></tbody></table></figure><p>多变量分布的例子（使用oneHot分类）：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="keyword">import</span> zhusuan <span class="keyword">as</span> zs</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line">_ = tf.InteractiveSession()</span><br><span class="line"></span><br><span class="line">c = zs.distributions.OnehotCategorical([[<span class="number">0.</span>,<span class="number">1.</span>,-<span class="number">1.</span>],</span><br><span class="line">                                     [<span class="number">2.</span>,<span class="number">3.</span>,<span class="number">4.</span>]])</span><br><span class="line"><span class="comment"># batch，批次，2个批次，也就是说是2维数组</span></span><br><span class="line">   c.batch_shape.<span class="built_in">eval</span>()</span><br><span class="line">array([<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每个批次有3个数</span></span><br><span class="line">c.value_shape.<span class="built_in">eval</span>()</span><br><span class="line">array([<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">tf.shape(c.sample()).<span class="built_in">eval</span>()</span><br><span class="line">array([<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">tf.shape(c.sample(<span class="number">1</span>)).<span class="built_in">eval</span>()</span><br><span class="line">array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">tf.shape(c.sample(<span class="number">10</span>)).<span class="built_in">eval</span>()</span><br><span class="line">array([<span class="number">10</span>,  <span class="number">2</span>,  <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出一下这两个shape看看</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'c.batch_shape == '</span>,c.batch_shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'c.batch_shape.eval() == '</span>,c.batch_shape.<span class="built_in">eval</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'c.value_shape == '</span>,c.value_shape)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'c.value_shape.eval() == '</span>,c.value_shape.<span class="built_in">eval</span>())</span><br><span class="line"></span><br><span class="line">c.batch_shape ==  Tensor(<span class="string">"shape_as_tensor_13:0"</span>, shape=(<span class="number">1</span>,), dtype=int32)</span><br><span class="line">c.batch_shape.<span class="built_in">eval</span>() ==  [<span class="number">2</span>]</span><br><span class="line">c.value_shape ==  Tensor(<span class="string">"shape_as_tensor_15:0"</span>, shape=(<span class="number">1</span>,), dtype=int32)</span><br><span class="line">c.value_shape.<span class="built_in">eval</span>() ==  [<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出一下sample</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'c.sample() == '</span>,c.sample().<span class="built_in">eval</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'c.sample(1) == '</span>,c.sample(<span class="number">1</span>).<span class="built_in">eval</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'c.sample(10) == '</span>,c.sample(<span class="number">10</span>).<span class="built_in">eval</span>())</span><br><span class="line"></span><br><span class="line">c.sample() ==  [[<span class="number">0</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]]</span><br><span class="line">c.sample(<span class="number">1</span>) ==  [[[<span class="number">0</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line"> [<span class="number">1</span> <span class="number">0</span> <span class="number">0</span>]]]</span><br><span class="line">c.sample(<span class="number">10</span>) ==  [[[<span class="number">0</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line">  [<span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">  [[<span class="number">0</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]]</span><br><span class="line"> </span><br><span class="line">  [[<span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]]</span><br><span class="line"> </span><br><span class="line">  [[<span class="number">0</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]]</span><br><span class="line"> </span><br><span class="line">  [[<span class="number">0</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">0</span>]]</span><br><span class="line"> </span><br><span class="line">  [[<span class="number">0</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">0</span>]]</span><br><span class="line"> </span><br><span class="line">  [[<span class="number">0</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]]</span><br><span class="line"> </span><br><span class="line">  [[<span class="number">0</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]]</span><br><span class="line"> </span><br><span class="line">  [[<span class="number">1</span> <span class="number">0</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]]</span><br><span class="line"> </span><br><span class="line">  [[<span class="number">0</span> <span class="number">1</span> <span class="number">0</span>]</span><br><span class="line">[<span class="number">0</span> <span class="number">0</span> <span class="number">1</span>]]]</span><br></pre></td></tr></tbody></table></figure><p>在某些情况下，一批随机变量可以分组到一个独立事件中，以便于可以一起计算他们的概率。这是通过设置group_ndims参数（默认是0）来实现的。batch_shape中最后的group_ndims个批次被分组为一个事件。 例如，Normal(…，group_ndims = 1）会将其batch_shape的最后一个axis设置为独立事件，即具有一致协方差矩阵（<em>在统计学与概率论中，协方差矩阵的每个元素是<strong>各个向量元素之间的协方差</strong>，是从标量随机变量到高维度随机向量的自然推广</em>）的多元正态分布。</p></blockquote><hr><h3 id="补充：-tf-InteractiveSession"><a href="#补充：-tf-InteractiveSession" class="headerlink" title="补充：_ = tf.InteractiveSession()"></a>补充：_ = tf.InteractiveSession()</h3><p>TensorFlow的前后端的连接依靠于session，使用TensorFlow程序的流程构建计算图完成之后，在session中启动运行。</p><h4 id="补充：Sesssion"><a href="#补充：Sesssion" class="headerlink" title="补充：Sesssion"></a>补充：Sesssion</h4><p>我们在Python中需要做一些计算操作时一般会使用NumPy，NumPy在做矩阵操作等复杂的计算的时候会使用其他语言(C/C++)来实现这些计算逻辑，来保证计算的高效性。但是频繁的在多个编程语言间切换也会有一定的耗时，如果只是单机操作这些耗时可能会忽略不计，但是如果在分布式并行计算中，计算操作可能分布在不同的CPU、GPU甚至不同的机器中，这些耗时可能会比较严重。<br>TensorFlow 底层是使用C++实现，这样可以保证计算效率，并使用 tf.Session类来连接客户端程序与C++运行时。上层的Python、Java等代码用来设计、定义模型，构建的Graph，最后通过tf.Session.run()方法传递给底层执行。</p><p>对于像Python原生编辑器，或者jupyter这样的基于浏览器的python编辑器，要一段一段的输入代码，  于是就有了 tf.InteractiveSession() 这样的交互式会话，它不需要用 “sess.run(变量)”这种形式，而是定义好会话对象后，每次执行tensor时，调用tensor.eval()即可。</p><h4 id="补充：eval"><a href="#补充：eval" class="headerlink" title="补充：eval()"></a>补充：eval()</h4><p>eval() 其实就是tf.Tensor的Session.run() 的另外一种写法，但两者有差别:</p><ol><li>eval(): 将<strong>字符串string对象转化为有效的表达式</strong>参与求值运算返回计算结果</li><li>eval()也是<strong>启动计算的一种方式</strong>。基于Tensorflow的基本原理，首先需要定义图，然后计算图，其中计算图的函数常见的有run()函数，如sess.run()。同样eval()也是此类函数，</li><li>要注意的是，eval()只能用于tf.Tensor类对象，也就是有输出的Operation。对于没有输出的Operation, 可以用.run()或者Session.run()；Session.run()没有这个限制。</li></ol><h1 id="贝叶斯网络"><a href="#贝叶斯网络" class="headerlink" title="贝叶斯网络"></a>贝叶斯网络</h1><blockquote><p>在ZhuSuan中，我们支持将概率模型构建为贝叶斯网络，即定向图形模型。 下面我们使用一个简单的贝叶斯线性回归示例来说明这一点。 模型的生成过程是<br>$$<br>w \mbox{<del>}  N(0,\alpha^2I)\<br>y \mbox{</del>} N(w^Tx,\beta^2)<br>$$<br>其中<strong>x表示线性回归中的输入特征</strong>。 我们应用贝叶斯处理并假设<strong>回归权重w</strong>的正态先验分布。 假设输入要素有5个维度。 为简单起见，我们将输入定义为占位符并设置超参数：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = tf.placeholder(tf.float32, shape=[<span class="number">5</span>])</span><br><span class="line">alpha = <span class="number">1.</span></span><br><span class="line">beta = <span class="number">0.1</span></span><br></pre></td></tr></tbody></table></figure></blockquote><hr><h4 id="补充：超参数-hyper-parameters"><a href="#补充：超参数-hyper-parameters" class="headerlink" title="补充：超参数 hyper-parameters"></a>补充：超参数 hyper-parameters</h4><ol><li>参数(parameters)/模型参数</li></ol><p>　<strong>由模型通过学习得到的变量</strong>，比如权重w和偏置b</p><ol start="2"><li><p>超参数(hyperparameters)/算法参数</p><p><strong>根据经验进行手动设定</strong>，影响到权重w和偏置b的大小，比如迭代次数、隐藏层的层数、每层神经元的个数、学习速率等</p></li></ol><h4 id="补充：tf-placeholder"><a href="#补充：tf-placeholder" class="headerlink" title="补充：tf.placeholder()"></a>补充：tf.placeholder()</h4><p>定义‘符号’变量，也称为占位符。相当于定义一个变量，但是不赋值，到了使用的时候再进行赋值。</p><p>​    Tensorflow的设计理念称之为计算流图，在编写程序时，首先构筑整个系统的graph，代码并不会直接生效，这一点和python的其他数值计算库（如Numpy等）不同，graph为静态的，类似于docker中的镜像。然后，在实际的运行时，启动一个session，程序才会真正的运行。这样做的好处就是：避免反复地切换底层程序实际运行的上下文，tensorflow帮你优化整个系统的代码。我们知道，很多python程序的底层为C语言或者其他语言，执行一行脚本，就要切换一次，是有成本的，tensorflow通过计算流图的方式，帮你优化整个session需要执行的代码，还是很有优势的。</p><p>​    所以placeholder()函数是在神经网络构建graph的时候在模型中的占位，此时并没有把要输入的数据传入模型，它只会分配必要的内存。等建立session，在会话中，运行模型的时候通过feed_dict()函数向占位符喂入数据。</p><hr><h2 id="BayesianNet实例"><a href="#BayesianNet实例" class="headerlink" title="BayesianNet实例"></a>BayesianNet实例</h2><blockquote><p>要定义模型，第一步是构造一个BayesianNet实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bn = zs.BayesianNet()</span><br></pre></td></tr></tbody></table></figure><p>贝叶斯网络将一组随机变量的联合分布的依存关系描述为有向图。 为此，BayesianNet实例可以保留两种节点：</p><ul><li>随机节点。 它们是图形模型中的随机变量。  w节点可以构造为：</li></ul><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w = bn.normal(<span class="string">"w"</span>, tf.zeros([x.shape[-<span class="number">1</span>]]), std=alpha)</span><br></pre></td></tr></tbody></table></figure><p>这里w是一个服从正态分布的StochasticTensor随机张量（StochasticTensor类，类似于Tensor，可以被传到任何Tensor操作中）:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(w)</span><br><span class="line">&lt;zhusuan.framework.bn.StochasticTensor <span class="built_in">object</span> at ...</span><br></pre></td></tr></tbody></table></figure><p>对于<code>zhusuan.distributions</code>中任何可用的分布，我们都能在<code>BayesianNet</code>中找到一个方法来创建相应的随机节点。<code>StochasticTenor</code>实例类类似于Tensor，这意味着你可以将StochasticTenor类与任何TensorFlow原语混用。例如，线性回归的预测均值是w与输入x之间的内积：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_mean = tf.reduce_sum(w * x, axis=-<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure></blockquote><p><a href="https://zhusuan.readthedocs.io/en/latest/api/zhusuan.framework.html#zhusuan.framework.bn.StochasticTensor">StochasticTenor类说明</a></p><p>插一句，这里的axis=-1就是说倒数第一个。比如（3,4,5）,axis=-1就是指5，也就是等价于axis=2。</p><p>w节点的构造，=bn.nomal(“节点名”，tf构造的全为0的一个数组【维度为x.shape】，标准差为上面定义的alpha)</p><p>这里还是关于-1的写法，x.shape[-1]就相当于x.shape[5].</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(w.shape,x.shape)</span><br><span class="line">(<span class="number">5</span>,) (<span class="number">5</span>,)</span><br></pre></td></tr></tbody></table></figure><h4 id="补充：tf-reduce-sum"><a href="#补充：tf-reduce-sum" class="headerlink" title="补充：tf.reduce_sum()"></a>补充：tf.reduce_sum()</h4><p>reduce_sum应该理解为按相应的轴压缩求和，用于降维。通过设置axis参数按相应轴压缩求和。</p><p>关于上面那个内积的计算举例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">a=tf.constant([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line">b=tf.constant([<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line">c = a*b</span><br><span class="line">c.<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">Out:array([ <span class="number">2</span>,  <span class="number">4</span>,  <span class="number">6</span>,  <span class="number">8</span>, <span class="number">10</span>])</span><br><span class="line"></span><br><span class="line">tf.reduce_sum(a*b,axis=-<span class="number">1</span>).<span class="built_in">eval</span>()</span><br><span class="line"></span><br><span class="line">Out:<span class="number">30</span></span><br></pre></td></tr></tbody></table></figure><hr><h3 id="确定性节点"><a href="#确定性节点" class="headerlink" title="确定性节点"></a>确定性节点</h3><blockquote><ul><li>确定性节点。</li></ul><p>确定性节点。 如上面的代码所示，可以使用Tensorflow操作直接构造确定性节点，而BayesianNet不会跟踪它们。 但是，在某些情况下，可以通过deterministic（）方法启用跟踪：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_mean = bn.deterministic(<span class="string">"y_mean"</span>, tf.reduce_sum(w * x, axis=-<span class="number">1</span>))</span><br></pre></td></tr></tbody></table></figure><p>这使你可以随时从bn获取y_mean张量。</p></blockquote><p>也就是说，如果在构建过程中这样写的话：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">y_mean = tf.reduce_sum(w * x, axis=-<span class="number">1</span>)</span><br></pre></td></tr></tbody></table></figure><p>​    那么bn中将不会有y_mean这个节点的信息。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 康康这个模型里面有啥节点</span></span><br><span class="line"><span class="built_in">print</span>(model_b.nodes.keys())</span><br><span class="line"></span><br><span class="line">Out: dict_keys([<span class="string">'w'</span>, <span class="string">'y_mean'</span>, <span class="string">'y'</span>])</span><br></pre></td></tr></tbody></table></figure><p>​    换成deterministic()方法的话，那么就可以从bn中get到y_mean了。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 康康这个模型里面有啥节点</span></span><br><span class="line"><span class="built_in">print</span>(model_b.nodes.keys())</span><br><span class="line"></span><br><span class="line">Out: dict_keys([<span class="string">'w'</span>, <span class="string">'y_mean'</span>, <span class="string">'y'</span>])</span><br></pre></td></tr></tbody></table></figure><h3 id="构建贝叶斯网络的完整代码"><a href="#构建贝叶斯网络的完整代码" class="headerlink" title="构建贝叶斯网络的完整代码"></a>构建贝叶斯网络的完整代码</h3><blockquote><p>构建贝叶斯线性回归模型的完整代码如下：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bayesian_linear_regression</span>(<span class="params">x, alpha, beta</span>):</span></span><br><span class="line"> bn = zs.BayesianNet()</span><br><span class="line"> w = bn.normal(<span class="string">"w"</span>, mean=<span class="number">0.</span>, std=alpha)</span><br><span class="line"> y_mean = tf.reduce_sum(w * x, axis=-<span class="number">1</span>)</span><br><span class="line"> bn.normal(<span class="string">"y"</span>, y_mean, std=beta)</span><br><span class="line"> <span class="keyword">return</span> bn</span><br></pre></td></tr></tbody></table></figure></blockquote><p>步骤总结：</p><ol><li><p>声明贝叶斯网络实例；</p></li><li><p>构建一个随机节点w，使用正态分布，均值为0，标准差为alpha。w节点如下公式。</p></li></ol><p>$$<br>w \mbox{~}  N(0,\alpha^2I)<br>$$</p><ol start="3"><li><p>求w*x的和，也就是内积</p></li><li><p>构建一个名为y的随机节点，使用正态分布，均值为w与x的内积，标准差为beta。x是占位符，传递过来的一个参数，应该是后来要输入的数据。y节点如下公式。<br>$$<br>y \mbox{~} N(w^Tx,\beta^2)<br>$$</p></li></ol><blockquote><p> 图形模型的一个独特的特点是<strong>允许随机节点具有不确定的行为</strong>（即是潜在的），我们可以<strong>随时观察它们（然后将它们固定在观察值上）</strong>。 在ZhuSuan中，可以使用观察到的字典参数来初始化BayesianNet，以将观察值分配给某些随机节点，例如： </p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bn = zs.BayesianNet(observed={<span class="string">"w"</span>: w_obs})</span><br></pre></td></tr></tbody></table></figure><p> 会使得随机变量w 作为w_obs被观察。这样做的的结果是在bn中，y_mean是根据w的观测值（w_obs）计算的。  对于未被观察的随机节点，当相应的StochasticTensor参与使用Tensor的计算或feed到Tensorflow操作中时，将使用其sample。  在此示例中，这意味着如果我们不对bn进行任何观察，则w的sample将会被用于计算y_mean。 </p><p> 尽管上述方法允许将观察值分配给随机节点，但在大多数情况下，<strong>首先定义图形模型然后在需要时传递观察值更为方便</strong>。  此外，该模型应<strong>允许查询具有不同观察值配置</strong>。 为了启用此工作流程，我们引入了一个新的类MetaBayesianNet。  从概念上讲，我们可以将MetaBayesianNet实例视为原始模型，并将BayesianNet视为确定的观察结果。  正如我们将看到的那样，BayesianNet实例可以从其元类实例惰性构造。</p><p> 我们要将模型定义为MetaBayesianNet是非常容易办到的。 上面的代码没有任何变化，只是向该函数添加了一个函数装饰器：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@zs.meta_bayesian_net(<span class="params">scope=<span class="string">"model"</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bayesian_linear_regression</span>(<span class="params">x, alpha, beta</span>):</span></span><br><span class="line"> bn = zs.BayesianNet()</span><br><span class="line"> w = bn.normal(<span class="string">"w"</span>, mean=<span class="number">0.</span>, std=alpha)</span><br><span class="line"> y_mean = tf.reduce_sum(w * x, axis=-<span class="number">1</span>)</span><br><span class="line"> bn.normal(<span class="string">"y"</span>, y_mean, std=beta)</span><br><span class="line"> <span class="keyword">return</span> bn</span><br></pre></td></tr></tbody></table></figure><p> 由<code>zs.meta_bayesian_net()</code>注释的函数将返回<code>MetaBayesianNet</code>而不是原始的<code>BayesianNet</code>实例： </p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>model = bayesian_linear_regression(x, alpha, beta)</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(model)</span><br><span class="line">&lt;zhusuan.framework.meta_bn.MetaBayesianNet <span class="built_in">object</span> at ...</span><br></pre></td></tr></tbody></table></figure><p> 正如我们已经提到的，<strong>MetaBayesianNet可以允许不同的观察配置</strong>。 这是通过其<code>observe()</code>方法实现的。 我们可以将观察值作为命名参数传递，它将返回相应的BayesianNet实例，例如：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bn = model.observe(w=w_obs)</span><br></pre></td></tr></tbody></table></figure><p> 会将w在<code>BayesianNet</code>类返回的实例bn中设置为被观察的。 使用不同的命名参数调用上述函数（observe)，可以用不同的观察结果observation实例化BayesianNet，<u><strong>这类似于概率图模型的常见行为。</strong></u> </p><blockquote><p>传递的观测值observation必须与StochasticTensor具有相同的类型和形状。</p></blockquote><p> 如果<strong>你在模型构造函数中创建了TensorFlow变量，你可能想将其重用于具有不同观察值的贝叶斯网络实例</strong>。  ZhuSuan中还有另一个函数装饰器，称为reuse_variables（），以方便使用。你可以将其添加到任何创建Tensorflow变量的函数中：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建BayesianNet重用变量</span></span><br><span class="line"><span class="meta">@zs.reuse_variables(<span class="params">scope=<span class="string">"model"</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_model</span>(<span class="params">...</span>):</span></span><br><span class="line"> bn = zs.BayesianNet()</span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">return</span> bn</span><br></pre></td></tr></tbody></table></figure><p> 或等效地，在@zs.meta_bayesian_net（）装饰器中打开redirect_variables选项：</p> <figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 构建MetaBayesianNet重用变量</span></span><br><span class="line"><span class="meta">@zs.meta_bayesian_net(<span class="params">scope=<span class="string">"model"</span>, reuse_variables=<span class="literal">True</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_model</span>(<span class="params">...</span>):</span></span><br><span class="line"> bn = zs.BayesianNet()</span><br><span class="line"> ...</span><br><span class="line"> <span class="keyword">return</span> bn</span><br></pre></td></tr></tbody></table></figure></blockquote><h4 id="总结：MetaBayesianNet与BayesianNet"><a href="#总结：MetaBayesianNet与BayesianNet" class="headerlink" title="总结：MetaBayesianNet与BayesianNet"></a>总结：MetaBayesianNet与BayesianNet</h4><p>MetaBayesianNet类是可变的BayesianNet，可以通过传递不同的观察值来构建贝叶斯网络。</p><p>在一个构造BayesianNet的函数上加个装饰器就将返回值转变为MetaBayesianNet。</p><p>这里的那个observed或许应该是:</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bn = zs.BayesianNet(observed={<span class="string">"w_obs"</span>: w})</span><br></pre></td></tr></tbody></table></figure><p>不然写{“w”:w_obs}的话会找不到w_obs报错。</p><p>自我否定：这里人家写的没错！</p><p>​    这里的w_obs应该是个自定义的张量，通过把它传递过来对贝叶斯net进行不同的训练。也就是说可以吧贝叶斯网络中的w节点也作为一个参数。</p><p>​    应该先自定义一个w_obs传过来。</p><blockquote><p>到目前为止，我们知道如何构建模型并将其重用于不同的观察结果。 构建完成后，BayesianNet支持查询网络当前状态，例如：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="comment"># get named node(s)    获取节点名称</span></span><br><span class="line">&gt;w = bn[<span class="string">"w"</span>]</span><br><span class="line">&gt;w, y = bn.get([<span class="string">"w"</span>, <span class="string">"y"</span>])</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment"># get log probabilities of stochastic nodes conditioned on the current</span></span><br><span class="line">&gt;<span class="comment"># value of other StochasticTensors.</span></span><br><span class="line">&gt;<span class="comment"># 以其他Stochastic Tensor的当前值为条件获取随机节点的log对数概率</span></span><br><span class="line">&gt;log_pw, log_py = bn.cond_log_prob([<span class="string">"w"</span>, <span class="string">"y"</span>])</span><br><span class="line"></span><br><span class="line">&gt;<span class="comment"># get log joint probability given the current values of all stochastic</span></span><br><span class="line">&gt;<span class="comment"># nodes</span></span><br><span class="line">&gt;<span class="comment"># 给定所有随机节点的当前值，获得对数联合概率</span></span><br><span class="line">&gt;log_joint_value = bn.log_joint()</span><br></pre></td></tr></tbody></table></figure><p>默认情况下，对数联合概率是通过对所有随机节点上的条件对数概率求和而得出的。 这就要求所有随机节点的分配批处理形状正确对齐。  如果不是，则返回值可以是任意的。 大多数时候，您可以调整随机节点的group_ndims参数来解决此问题。  如果不是这种情况，我们仍然可以通过在MetaBayesianNet实例中重写它来自定义对数联合概率函数，如下所示：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&gt;meta_bn = build_linear_regression(x, alpha, beta)</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="keyword">def</span> <span class="title">customized_log_joint</span>(<span class="params">bn</span>):</span></span><br><span class="line">   <span class="keyword">return</span> tf.reduce_sum(</span><br><span class="line">       bn.cond_log_prob(<span class="string">"w"</span>), axis=-<span class="number">1</span>) + bn.cond_log_prob(<span class="string">"y"</span>)</span><br><span class="line"></span><br><span class="line">&gt;meta_bn.log_joint = customized_log_joint</span><br></pre></td></tr></tbody></table></figure><p>然后，由这个meta_bn构建的所有BayesianNet实例将使用所提供的自定义函数来计算bn.log_joint()的结果。</p></blockquote><h3 id="cond-log-prob-函数"><a href="#cond-log-prob-函数" class="headerlink" title="cond_log_prob()函数"></a><code>cond_log_prob()</code>函数</h3><p> <code>cond_log_prob</code>(<em>name_or_names</em>)</p><p>The conditional log probabilities of stochastic nodes, evaluated at their current values (given by <a href="https://zhusuan.readthedocs.io/en/latest/api/zhusuan.framework.html#zhusuan.framework.bn.StochasticTensor.tensor"><code>StochasticTensor.tensor</code></a>).</p><p>随机节点的条件对数概率，按其当前值计算( 由StochasticTensor.tensor给出 )。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Parameters:name_or_names – A string <span class="keyword">or</span> a <span class="built_in">list</span> of strings. Name(s) of the stochastic nodes.</span><br><span class="line"></span><br><span class="line">Returns:A Tensor <span class="keyword">or</span> a <span class="built_in">list</span> of Tensors.</span><br></pre></td></tr></tbody></table></figure><h3 id="log-joint-函数"><a href="#log-joint-函数" class="headerlink" title="log_joint()函数"></a><code>log_joint()</code>函数</h3><p><code>log_joint</code>()</p><p>The default log joint probability of this <a href="https://zhusuan.readthedocs.io/en/latest/api/zhusuan.framework.html#zhusuan.framework.bn.BayesianNet"><code>BayesianNet</code></a>. It works by summing over all the conditional log probabilities of stochastic nodes evaluated at their current values (samples or observations).</p><p>该贝叶斯网络的默认对数联合概率。 它以随机节点当前值（sample或者是observations)的所有条件对数概率相加的方式来得到最终结果。</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Returns: A Tensor.</span><br></pre></td></tr></tbody></table></figure><h4 id="补充：字典"><a href="#补充：字典" class="headerlink" title="补充：字典"></a>补充：字典</h4><p>​    字典是另一种可变容器模型，且可存储任意类型对象。</p><p>​    字典的每个键值 key=&gt;value 对用冒号 : 分割，每个键值对之间用逗号 , 分割，整个字典包括在花括号 {} 中 ,格式如下所示： </p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">d = {key1 : value1, key2 : value2 }</span><br></pre></td></tr></tbody></table></figure><p>​    值可以取任何数据类型，但键必须是不可变的，如字符串，数字或元组。</p><p>​    一个简单的字典实例：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = {<span class="string">'Alice'</span>: <span class="string">'2341'</span>, <span class="string">'Beth'</span>: <span class="string">'9102'</span>, <span class="string">'Cecil'</span>: <span class="string">'3258'</span>}</span><br></pre></td></tr></tbody></table></figure><p>​    也可如此创建字典：</p><figure class="highlight python"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dict1 = { <span class="string">'abc'</span>: <span class="number">456</span> } </span><br><span class="line">dict2 = { <span class="string">'abc'</span>: <span class="number">123</span>, <span class="number">98.6</span>: <span class="number">37</span> }</span><br></pre></td></tr></tbody></table></figure><ul><li>参考：<a href="https://www.runoob.com/python/python-dictionary.html">菜鸟教程：字典</a></li></ul><h4 id="补充：函数装饰器"><a href="#补充：函数装饰器" class="headerlink" title="补充：函数装饰器"></a>补充：函数装饰器</h4><p>Python中的函数装饰器，写法注解一样。。。 所谓的装饰器，就是通过装饰器函数，来修改原函数的一些功能，使得原函数不需要修改。 </p><p>详细见：<a href="http://c.biancheng.net/view/2270.html">Python@函数装饰器及其用法</a></p><h4 id="补充：惰性函数"><a href="#补充：惰性函数" class="headerlink" title="补充：惰性函数"></a>补充：惰性函数</h4><p>惰性函数好像是js中的一个概念？</p><p>具体讲解：<a href="https://blog.csdn.net/orchid_djl/article/details/79955021">JS高阶-惰性函数</a></p><p>JS惰性函数，是针对优化频繁使用的函数。常用于函数库的编写、单例模式之中。</p><p> 惰性载入表示函数执行的分支只会在函数第一次掉用的时候执行，在第一次调用过程中，该函数会被覆盖为另一个按照合适方式执行的函数，这样任何对原函数的调用就不用再经过执行的分支了。 </p><h4 id="补充：贝叶斯线性回归"><a href="#补充：贝叶斯线性回归" class="headerlink" title="补充：贝叶斯线性回归"></a>补充：贝叶斯线性回归</h4><p>x为自变量，输入值；  y为输出值。</p><ol><li>频率派线性回归：y = ax + b（一元）</li></ol><p>​       <strong>y</strong>=<strong>β^T X</strong>+<strong>ω</strong> （多元，其中的各项均为向量）</p><ol start="2"><li>贝叶斯线性回归：y ~ N(<strong>w</strong>^t <strong>x</strong>,β^2)</li></ol><p>​        其中的各项变量应该为分布</p>]]></content>
      
      
      <categories>
          
          <category> 科研 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科研 </tag>
            
            <tag> 珠算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello,Hexo——关于Hexo部署CSS样式出错的解决</title>
      <link href="2020/01/15/hello-hexo/"/>
      <url>2020/01/15/hello-hexo/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello，Hexo"><a href="#Hello，Hexo" class="headerlink" title="Hello，Hexo"></a>Hello，Hexo</h1><p>瞎整乱整，终于花了一晚上搭建了自己的博客。</p><p>于是写第一篇来测试一下情况如何。明天再开始正式更新。</p><hr><p>于是，第二天，出毛病了。</p><h2 id="无CSS样式"><a href="#无CSS样式" class="headerlink" title="无CSS样式"></a>无CSS样式</h2><p>hexo部署到Github 出错了，为啥呢？</p><hr><p>在本地预览是有样式的，但是部署到github上就没有css样式了。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210416162335627.png" alt="image-20210416162335627"></p><p>尝试解决方法，在_config.yml文件中加上了root字段。然后再更新一下。</p><hr><p>然后又报Git推送错误了？</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210416162352648.png" alt="Git报错"></p><p>。。。直接无语，IE代理错误，还是我图床一看读不出图片来了才发现。再推送一遍试试</p><hr><h2 id="NodeJS更新"><a href="#NodeJS更新" class="headerlink" title="NodeJS更新"></a>NodeJS更新</h2><p>还是不行，没有样式。决定根据网上的方法，更新NodeJS版本试一下。我的是v12，稳定版是v14，最新版是v15。</p><p>开始看用命令方法，管理工具n更新，尝试了一下不行。。。报错</p><blockquote><p>“bash”‘ 不是内部或外部命令，也不是可运行的程序 或批处理文件。”</p></blockquote><p>然后看的有两种方法解决：</p><ul><li>安装gnvm</li><li>直接下载安装包覆盖安装</li></ul><p>图方便，用了第二种覆盖安装。。因为第一种说的可能错不少，所以说就没再尝试。</p><p>再推送一次试试。。</p><p>为啥还是没有样式啊！！快炸了</p><hr><h2 id="解决git推送问题"><a href="#解决git推送问题" class="headerlink" title="解决git推送问题"></a>解决git推送问题</h2><p>运行<code>hexo d</code> 后，git报错。</p><blockquote><p>git Failed to connect to 127.0.0.1 port xxxx: Connection refused</p></blockquote><p>解决：</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查一下代理：</span></span><br><span class="line">git config --global http.proxy</span><br><span class="line"><span class="comment"># 有没有呢，有就取消</span></span><br><span class="line">git config --global --<span class="built_in">unset</span> http.proxy</span><br></pre></td></tr></tbody></table></figure><p>取消之后再进行推送就可以了。</p><hr><h2 id="最终解决问题"><a href="#最终解决问题" class="headerlink" title="最终解决问题"></a>最终解决问题</h2><p>最终不乱搞了，决定对症下药。</p><p>先去浏览器F12打开控制台，然后查看网络请求。</p><p>因为没有样式嘛，所以说<strong>直接去看<code>.css</code>文件的请求路径</strong>。</p><p>然后发现<strong>它请求的路径</strong>是：<code>https://songx64.github.io/songx64.github.io/libs/awesome/css/all.css</code> ，然后访问了一下这个地址，发现==跳转回到我的主页==了。并没有CSS文件。</p><p>于是怀疑是路径的问题，再次尝试访问：<code>https://songx64.github.io/libs/awesome/css/all.css</code> ，然后发现可以正常加载CSS文件，如下图：</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210416174950122.png" alt="image-20210416174950122"></p><p>于是找到了症状所在。这是路径配置的不对啊，于是去查看 <code>_config.yml</code> 文件，找到URL所在位置：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://SongX64.github.io／SongX64.github.io</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing '.html' from permalinks</span></span><br></pre></td></tr></tbody></table></figure><p>将其中 <code>url</code> 更改为：</p><figure class="highlight yml"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://SongX64.github.io</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:day/:title/</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing '.html' from permalinks</span></span><br></pre></td></tr></tbody></table></figure><p>然后！还有一个重点的地方！！！</p><p>==<strong>Github页面有延迟！！！</strong>==</p><p>==<strong>Github页面有延迟！！！</strong>==</p><p>==<strong>Github页面有延迟！！！</strong>==</p><p>说不定之前我某次都改好了。。。然后直接刷新，一看没变又乱改了。</p><p>脑袋灵光一现，是不是Github反应太慢了的问题，于是去上个厕所，回来一看，正常了。</p><p>这是我修复后的正常的，可以看到获取的路径正常了。</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210416174651514.png" alt="image-20210416174651514"></p><p>然后访问，成功！</p><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20210416175435228.png" alt="image-20210416175435228"></p><p>开始愉快的博客之旅吧。接下来就是自定义主题瞎整一堆了。。。</p><p>果然，还是不能只看网上的解决方法啊，还是得自己思考对症下药。下次一定。</p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello,World</title>
      <link href="2020/01/14/hello-world/"/>
      <url>2020/01/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 杂项 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂项 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery基础复习回忆</title>
      <link href="2019/05/30/jQuery%E5%AD%A6%E4%B9%A0/"/>
      <url>2019/05/30/jQuery%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="CDN引用jQuery"><a href="#CDN引用jQuery" class="headerlink" title="CDN引用jQuery"></a>CDN引用jQuery</h3><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><blockquote><p> <strong>您是否很疑惑为什么我们没有在  标签中使用 type=”text/javascript” ？</strong></p><p>在 HTML5 中，不必那样做了。JavaScript 是 HTML5 以及所有现代浏览器中的默认脚本语言！ </p></blockquote><h3 id="在文档加载后执行js"><a href="#在文档加载后执行js" class="headerlink" title="在文档加载后执行js"></a>在文档加载后执行js</h3><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line"> </span><br><span class="line">   <span class="comment">// 开始写 jQuery 代码...</span></span><br><span class="line"> </span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>这就等价于：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>同时等价于js中的：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p><img src="https://gitee.com/songx86/SongPicBed/raw/master/img/image-20200329130242878.png" alt="image-20200329130242878"></p><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><p>$(“ ”)就是取值。</p><p>具体用法:</p> 元素 元素<table><thead><tr><th>语法</th><th>描述</th></tr></thead><tbody><tr><td>$(“*“)</td><td>选取所有元素</td></tr><tr><td>$(this)</td><td>选取当前 HTML 元素</td></tr><tr><td>$(“p.intro”)</td><td>选取 class 为 intro 的 <p> 元素</p></td></tr><tr><td>$(“p:first”)</td><td>选取第一个 <p> 元素</p></td></tr><tr><td>$(“ul li:first”)</td><td>选取第一个 <ul> 元素的第一个 <li> 元素</li></ul></td></tr><tr><td>$(“ul li:first-child”)</td><td>选取每个 <ul> 元素的第一个 <li> 元素</li></ul></td></tr><tr><td>$(“[href]”)</td><td>选取带有 href 属性的元素</td></tr><tr><td>$(“a[target=’_blank’]”)</td><td>选取所有 target 属性值等于 “_blank” 的 <a> 元素</a></td></tr><tr><td>$(“a[target!=’_blank’]”)</td><td>选取所有 target 属性值不等于 “_blank” 的 <a> 元素</a></td></tr><tr><td>$(“:button”)</td><td>选取所有 type=”button” 的 <input> 元素 和 <button> 元素</button></td></tr><tr><td>$(“tr:even”)</td><td>选取偶数位置的 </td></tr><tr></tr><tr><td>$(“tr:odd”)</td><td>选取奇数位置的 </td></tr><tr></tr></tbody></table><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><table><thead><tr><th align="left">鼠标事件</th><th align="left">键盘事件</th><th align="left">表单事件</th><th align="left">文档/窗口事件</th></tr></thead><tbody><tr><td align="left"><a href="https://www.runoob.com/jquery/event-click.html">click</a> (点击)</td><td align="left"><a href="https://www.runoob.com/jquery/event-keypress.html">keypress</a> （按了字符）</td><td align="left"><a href="https://www.runoob.com/jquery/event-submit.html">submit</a></td><td align="left"><a href="https://www.runoob.com/jquery/event-load.html">load</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/jquery/event-dblclick.html">dblclick</a> （双击）</td><td align="left"><a href="https://www.runoob.com/jquery/event-keydown.html">keydown</a> （按下）</td><td align="left"><a href="https://www.runoob.com/jquery/event-change.html">change</a></td><td align="left"><a href="https://www.runoob.com/jquery/event-resize.html">resize</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/jquery/event-mouseenter.html">mouseenter</a> （指针穿过）</td><td align="left"><a href="https://www.runoob.com/jquery/event-keyup.html">keyup</a> （按下后离开）</td><td align="left"><a href="https://www.runoob.com/jquery/event-focus.html">focus</a> （获得焦点）</td><td align="left"><a href="https://www.runoob.com/jquery/event-scroll.html">scroll</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/jquery/event-mouseleave.html">mouseleave</a> （指针离开）</td><td align="left"></td><td align="left"><a href="https://www.runoob.com/jquery/event-blur.html">blur</a> （失去焦点）</td><td align="left"><a href="https://www.runoob.com/jquery/event-unload.html">unload</a></td></tr><tr><td align="left"><a href="https://www.runoob.com/jquery/event-hover.html">hover</a> （光标悬停）</td><td align="left"></td><td align="left"></td><td align="left"></td></tr></tbody></table><h3 id="简单动画实例和函数"><a href="#简单动画实例和函数" class="headerlink" title="简单动画实例和函数"></a>简单动画实例和函数</h3><h4 id="显示和隐藏"><a href="#显示和隐藏" class="headerlink" title="显示和隐藏"></a>显示和隐藏</h4><p>这是显示和隐藏的函数：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//隐藏</span></span><br><span class="line">$(selector).hide(speed,callback);</span><br><span class="line"><span class="comment">//显示</span></span><br><span class="line">$(selector).show(speed,callback);</span><br><span class="line"><span class="comment">//隐藏和显示切换</span></span><br><span class="line">$(selector).toggle(speed,callback);</span><br></pre></td></tr></tbody></table></figure><p>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。</p><p>可选的 callback 参数是隐藏或显示完成后所执行的函数名称。</p><p>实例</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">  $(<span class="string">".hidebtn"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    $(<span class="string">"div"</span>).toggle(<span class="number">1000</span>,<span class="string">"linear"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">      alert(<span class="string">"方法已完成!"</span>);</span><br><span class="line">    });</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>PS:</p><blockquote><p>1.$(<em>selector</em>)选中的元素的个数为n个，则callback函数会执行n次；</p><p>2.callback函数名后加括号，会立刻执行函数体，而不是等到显示/隐藏完成后才执行；</p><p>3.callback既可以是函数名，也可以是匿名函数</p></blockquote><h4 id="淡入淡出方法"><a href="#淡入淡出方法" class="headerlink" title="淡入淡出方法"></a>淡入淡出方法</h4><p>通过 jQuery，您可以实现元素的淡入淡出效果。</p><p>jQuery 拥有下面四种 fade 方法：</p><ul><li>fadeIn(speed,callback)    淡入，显示不可见元素</li><li>fadeOut(speed,callback)    淡出，隐藏可见的元素  </li><li>fadeToggle(speed,callback)    切换两个状态</li><li>fadeTo(speed,opacity,callback)    渐变为指定的透明度（0–1之间）</li></ul><p>使用方法同隐藏显示。</p><h4 id="滑动方法"><a href="#滑动方法" class="headerlink" title="滑动方法"></a>滑动方法</h4><p>通过 jQuery，您可以在元素上创建滑动效果。</p><p>jQuery 拥有以下滑动方法：</p><ul><li>slideDown()</li><li>slideUp()</li><li>slideToggle()</li></ul><p>使用方法及参数同上，speed和callback</p><h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">  $(<span class="string">"div"</span>).animate({</span><br><span class="line">    left:<span class="string">'250px'</span>,</span><br><span class="line">    opacity:<span class="string">'0.5'</span>,</span><br><span class="line">    height:<span class="string">'150px'</span>,</span><br><span class="line">    width:<span class="string">'150px'</span></span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>大概就是这样，这里比较复杂先跳过</p><h4 id="jQuery链"><a href="#jQuery链" class="headerlink" title="jQuery链"></a>jQuery链</h4><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#p1"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>)</span><br><span class="line">  .slideUp(<span class="number">2000</span>)</span><br><span class="line">  .slideDown(<span class="number">2000</span>);</span><br></pre></td></tr></tbody></table></figure><p>jQuery中可以这样写，一个函数接着一个函数，这个就叫jQuery链接进制。</p><h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="获得（查）"><a href="#获得（查）" class="headerlink" title="获得（查）"></a>获得（查）</h3><h4 id="获得内容-text-、html-、val"><a href="#获得内容-text-、html-、val" class="headerlink" title="获得内容 - text()、html()、val()"></a>获得内容 - text()、html()、val()</h4><p>获得<strong>内容</strong>的三个函数： text()、html() 以及 val()</p><p>三个简单实用的用于 DOM 操作的 jQuery 方法：</p><ul><li>text() - 所选元素的文本内容</li><li>html() - 所选元素的内容（包括 HTML 标记）</li><li>val() - 表单字段的值</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">  alert(<span class="string">"Text: "</span> + $(<span class="string">"#test"</span>).text());</span><br><span class="line">});</span><br><span class="line">$(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">  alert(<span class="string">"HTML: "</span> + $(<span class="string">"#test"</span>).html());</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h4 id="获取属性-attr"><a href="#获取属性-attr" class="headerlink" title="获取属性 - attr()"></a>获取属性 - attr()</h4><p>jQuery attr() 方法用于获取<strong>属性值</strong>。</p><p>下面的例子演示如何获得链接中 href 属性的值：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">  alert($(<span class="string">"#runoob"</span>).attr(<span class="string">"href"</span>));</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><blockquote><p><strong>attr</strong> 和 <strong>prop</strong> 的区别介绍：</p><p>对于 HTML 元素本身就带有的固有属性，在处理时，使用 <strong>prop</strong> 方法。</p><p>对于 HTML 元素我们自己自定义的 DOM 属性，在处理时，使用 <strong>attr</strong> 方法。</p><p>实例 1：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://www.runoob.com"</span> <span class="attr">target</span>=<span class="string">"_self"</span> <span class="attr">class</span>=<span class="string">"btn"</span>&gt;</span>菜鸟教程<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这个例子里<code>&lt;a&gt; </code>元素的 DOM 属性有: <strong>href、target</strong> 和 <strong>class</strong>，这些属性就是 **** 元素本身就带有的属性，也是 W3C 标准里就包含有这几个属性，或者说在 IDE 里能够智能提示出的属性，这些就叫做固有属性。处理这些属性时，建议使用 <strong>prop</strong> 方法。</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">id</span>=<span class="string">"link1"</span> <span class="attr">action</span>=<span class="string">"delete"</span> <span class="attr">rel</span>=<span class="string">"nofollow"</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>这个例子里<a> 元素的 DOM 属性有: <strong>href、id</strong> 和 <strong>action</strong>，很明显，前两个是固有属性，而后面一个 <strong>action</strong> 属性是我们自己自定义上去的，<code>&lt;a&gt; </code>元素本身是没有这个属性的。这种就是自定义的 DOM 属性。处理这些属性时，建议使用 <strong>attr</strong> 方法。</a></p><a></a></blockquote><a></a><h3 id="设置（改）"><a></a><a href="#设置（改）" class="headerlink" title="设置（改）"></a>设置（改）</h3><h4 id="设置内容"><a href="#设置内容" class="headerlink" title="设置内容"></a>设置内容</h4><h5 id="直接设置元素的值"><a href="#直接设置元素的值" class="headerlink" title="直接设置元素的值"></a>直接设置元素的值</h5><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    $(<span class="string">"#test1"</span>).text(<span class="string">"Hello world!"</span>);</span><br><span class="line">});</span><br><span class="line">$(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    $(<span class="string">"#test2"</span>).html(<span class="string">"&lt;b&gt;Hello world!&lt;/b&gt;"</span>);</span><br><span class="line">});</span><br><span class="line">$(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    $(<span class="string">"#test3"</span>).val(<span class="string">"RUNOOB"</span>);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h5 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h5><p>上面的三个 jQuery 方法：text()、html() 以及 val()，同样拥有回调函数。回调函数有两个参数：被选元素列表中当前元素的下标，以及原始（旧的）值。然后以函数新值返回您希望使用的字符串。</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    $(<span class="string">"#test1"</span>).text(<span class="function"><span class="keyword">function</span>(<span class="params">i,origText</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"旧文本: "</span> + origText + <span class="string">" 新文本: Hello world! (index: "</span> + i + <span class="string">")"</span>; </span><br><span class="line">    });</span><br><span class="line">});</span><br><span class="line"> </span><br><span class="line">$(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    $(<span class="string">"#test2"</span>).html(<span class="function"><span class="keyword">function</span>(<span class="params">i,origText</span>)</span>{</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"旧 html: "</span> + origText + <span class="string">" 新 html: Hello &lt;b&gt;world!&lt;/b&gt; (index: "</span> + i + <span class="string">")"</span>; </span><br><span class="line">    });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h5 id="设置属性"><a href="#设置属性" class="headerlink" title="设置属性"></a>设置属性</h5><p>attr()同样适用</p><p>直接设置属性的值：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    $(<span class="string">"#runoob"</span>).attr({</span><br><span class="line">        <span class="string">"href"</span> : <span class="string">"http://www.runoob.com/jquery"</span>,</span><br><span class="line">        <span class="string">"title"</span> : <span class="string">"jQuery 教程"</span></span><br><span class="line">    });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>回调函数设置属性的值：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">  $(<span class="string">"#runoob"</span>).attr(<span class="string">"href"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">i,origValue</span>)</span>{</span><br><span class="line">    <span class="keyword">return</span> origValue + <span class="string">"/jquery"</span>; </span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="增加（增）"><a href="#增加（增）" class="headerlink" title="增加（增）"></a>增加（增）</h3><h4 id="添加新的元素"><a href="#添加新的元素" class="headerlink" title="添加新的元素"></a>添加新的元素</h4><p>我们将学习用于添加新内容的四个 jQuery 方法：</p><ul><li>append() - 在被选元素的结尾插入内容</li><li>prepend() - 在被选元素的开头插入内容</li><li>after() - 在被选元素之后插入内容</li><li>before() - 在被选元素之前插入内容</li></ul><p>prepend()方法和append()方法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">appendText</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> txt1=<span class="string">"&lt;p&gt;文本。&lt;/p&gt;"</span>;              <span class="comment">// 使用 HTML 标签创建文本</span></span><br><span class="line">    <span class="keyword">var</span> txt2=$(<span class="string">"&lt;p&gt;&lt;/p&gt;"</span>).text(<span class="string">"文本。"</span>);  <span class="comment">// 使用 jQuery 创建文本</span></span><br><span class="line">    <span class="keyword">var</span> txt3=<span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line">    txt3.innerHTML=<span class="string">"文本。"</span>;               <span class="comment">// 使用 DOM 创建文本 text with DOM</span></span><br><span class="line">    $(<span class="string">"body"</span>).append(txt1,txt2,txt3);        <span class="comment">// 追加新元素</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>after()方法和before()方法：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">afterText</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>{</span><br><span class="line">    <span class="keyword">var</span> txt1=<span class="string">"&lt;b&gt;I &lt;/b&gt;"</span>;                    <span class="comment">// 使用 HTML 创建元素</span></span><br><span class="line">    <span class="keyword">var</span> txt2=$(<span class="string">"&lt;i&gt;&lt;/i&gt;"</span>).text(<span class="string">"love "</span>);     <span class="comment">// 使用 jQuery 创建元素</span></span><br><span class="line">    <span class="keyword">var</span> txt3=<span class="built_in">document</span>.createElement(<span class="string">"big"</span>);  <span class="comment">// 使用 DOM 创建元素</span></span><br><span class="line">    txt3.innerHTML=<span class="string">"jQuery!"</span>;</span><br><span class="line">    $(<span class="string">"img"</span>).after(txt1,txt2,txt3);          <span class="comment">// 在图片后添加文本</span></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><blockquote><p>append/prepend 是在选择元素内部嵌入。</p><p>after/before 是在元素外面追加。</p></blockquote><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><p>如需删除元素和内容，一般可使用以下两个 jQuery 方法：</p><ul><li>remove() - 删除被选元素（及其子元素）</li><li>empty() - 从被选元素中删除子元素</li></ul><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移除div1，啥都不剩</span></span><br><span class="line">$(<span class="string">"#div1"</span>).remove();</span><br><span class="line"><span class="comment">//移除div1中的东西，剩下&lt;div1&gt;&lt;/div1&gt;</span></span><br><span class="line">$(<span class="string">"#div1"</span>).empty();</span><br></pre></td></tr></tbody></table></figure><p>可以过滤进行删除：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//移除所有class="italic" 的 p 元素。</span></span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">  $(<span class="string">"button"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">    $(<span class="string">"p"</span>).remove(<span class="string">".italic"</span>);</span><br><span class="line">  });</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><h3 id="操作-CSS"><a href="#操作-CSS" class="headerlink" title="操作 CSS"></a>操作 CSS</h3><p>jQuery 拥有若干进行 CSS 操作的方法。我们将学习下面这些：</p><ul><li>addClass() - 向被选元素添加一个或多个类</li><li>removeClass() - 从被选元素删除一个或多个类</li><li>toggleClass() - 对被选元素进行添加/删除类的切换操作</li><li>css() - 设置或返回样式属性</li></ul><p>css() 方法设置或返回被选元素的一个或多个样式属性。</p><h2 id="数据校验"><a href="#数据校验" class="headerlink" title="数据校验"></a>数据校验</h2><p>引入：</p><figure class="highlight html"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/jquery-validation-1.14.0/lib/jquery.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://static.runoob.com/assets/jquery-validation-1.14.0/dist/jquery.validate.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><p>加载完成后调用：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$().ready(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">    validateRule();</span><br><span class="line">});</span><br><span class="line">$.validator.setDefaults({</span><br><span class="line">    submitHandler: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{</span><br><span class="line">        save();</span><br><span class="line">    }</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><p>编写校验规则：</p><figure class="highlight js"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数据校验规则</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">validateRule</span>(<span class="params"></span>) </span>{</span><br><span class="line">    <span class="comment">//alert('成功3！');</span></span><br><span class="line">    $(<span class="string">"#staffInfoAddForm"</span>).validate({</span><br><span class="line">        rules: {</span><br><span class="line">            name: {</span><br><span class="line">                required: <span class="literal">true</span></span><br><span class="line">            },</span><br><span class="line">            tel:{</span><br><span class="line">                required:<span class="literal">true</span></span><br><span class="line">            },</span><br><span class="line">            username:{</span><br><span class="line">                required:<span class="literal">true</span></span><br><span class="line">            },</span><br><span class="line">            password:{</span><br><span class="line">                required:<span class="literal">true</span>,</span><br><span class="line">                minlength:<span class="number">5</span></span><br><span class="line">            },</span><br><span class="line">            passwordagain:{</span><br><span class="line">                required:<span class="literal">true</span>,</span><br><span class="line">                minlength:<span class="number">5</span>,</span><br><span class="line">                equalTo:<span class="string">"#password"</span></span><br><span class="line">            },</span><br><span class="line">            intime:{</span><br><span class="line">                required:<span class="literal">true</span></span><br><span class="line">            }</span><br><span class="line">        },</span><br><span class="line">        messages: {</span><br><span class="line">            name: {</span><br><span class="line">                required: icon + <span class="string">"请输入姓名"</span></span><br><span class="line">            },</span><br><span class="line">            tel: {</span><br><span class="line">                required: icon + <span class="string">"请输入联系方式"</span></span><br><span class="line">            },</span><br><span class="line">            username: {</span><br><span class="line">                required: icon + <span class="string">"请输入用户账号"</span></span><br><span class="line">            },</span><br><span class="line">            password: {</span><br><span class="line">                required: icon + <span class="string">"请输入密码"</span>,</span><br><span class="line">                minlength: <span class="string">"密码长度不能小于 5 个字母"</span></span><br><span class="line">            },</span><br><span class="line">            passwordagain: {</span><br><span class="line">                required: icon + <span class="string">"请再次输入密码"</span>,</span><br><span class="line">                minlength: <span class="string">"密码长度不能小于 5 个字母"</span>,</span><br><span class="line">                equalTo: <span class="string">"两次密码输入不一致"</span></span><br><span class="line">            },</span><br><span class="line">            intime: {</span><br><span class="line">                required: icon + <span class="string">"请输入入职日期"</span></span><br><span class="line">            }</span><br><span class="line">        }</span><br><span class="line">    });</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><p>常见的校验规则：</p><table><thead><tr><th align="left">序号</th><th align="left">规则</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">required:true</td><td align="left">必须输入的字段。</td></tr><tr><td align="left">2</td><td align="left">remote:”check.php”</td><td align="left">使用 ajax 方法调用 check.php 验证输入值。</td></tr><tr><td align="left">3</td><td align="left">email:true</td><td align="left">必须输入正确格式的电子邮件。</td></tr><tr><td align="left">4</td><td align="left">url:true</td><td align="left">必须输入正确格式的网址。</td></tr><tr><td align="left">5</td><td align="left">date:true</td><td align="left">必须输入正确格式的日期。日期校验 ie6 出错，慎用。</td></tr><tr><td align="left">6</td><td align="left">dateISO:true</td><td align="left">必须输入正确格式的日期（ISO），例如：2009-06-23，1998/01/22。只验证格式，不验证有效性。</td></tr><tr><td align="left">7</td><td align="left">number:true</td><td align="left">必须输入合法的数字（负数，小数）。</td></tr><tr><td align="left">8</td><td align="left">digits:true</td><td align="left">必须输入整数。</td></tr><tr><td align="left">9</td><td align="left">creditcard:</td><td align="left">必须输入合法的信用卡号。</td></tr><tr><td align="left">10</td><td align="left">equalTo:”#field”</td><td align="left">输入值必须和 #field 相同。</td></tr><tr><td align="left">11</td><td align="left">accept:</td><td align="left">输入拥有合法后缀名的字符串（上传文件的后缀）。</td></tr><tr><td align="left">12</td><td align="left">maxlength:5</td><td align="left">输入长度最多是 5 的字符串（汉字算一个字符）。</td></tr><tr><td align="left">13</td><td align="left">minlength:10</td><td align="left">输入长度最小是 10 的字符串（汉字算一个字符）。</td></tr><tr><td align="left">14</td><td align="left">rangelength:[5,10]</td><td align="left">输入长度必须介于 5 和 10 之间的字符串（汉字算一个字符）。</td></tr><tr><td align="left">15</td><td align="left">range:[5,10]</td><td align="left">输入值必须介于 5 和 10 之间。</td></tr><tr><td align="left">16</td><td align="left">max:5</td><td align="left">输入值不能大于 5。</td></tr><tr><td align="left">17</td><td align="left">min:10</td><td align="left">输入值不能小于 10。</td></tr></tbody></table><p><a href="https://www.runoob.com/try/try.php?filename=jquery_validate_demo1">演示Demo</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> jQuery </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
